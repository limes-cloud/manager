// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFound.String() && e.Code == 200
}

func NotFoundFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotFound.String(), "数据不存在:"+fmt.Sprintf(format, args...))
}

func NotFound() *errors.Error {
	return errors.New(200, ErrorReason_NotFound.String(), "数据不存在")
}

func IsDatabase(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Database.String() && e.Code == 200
}

func DatabaseFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func Database() *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误")
}

func IsMetadata(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Metadata.String() && e.Code == 200
}

func MetadataFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Metadata.String(), "元数据异常:"+fmt.Sprintf(format, args...))
}

func Metadata() *errors.Error {
	return errors.New(200, ErrorReason_Metadata.String(), "元数据异常")
}

func IsTransform(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Transform.String() && e.Code == 200
}

func TransformFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func Transform() *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败")
}

func IsDepartmentPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DepartmentPermissions.String() && e.Code == 200
}

func DepartmentPermissionsFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DepartmentPermissions.String(), "无此部门权限:"+fmt.Sprintf(format, args...))
}

func DepartmentPermissions() *errors.Error {
	return errors.New(200, ErrorReason_DepartmentPermissions.String(), "无此部门权限")
}

func IsRolePermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RolePermissions.String() && e.Code == 200
}

func RolePermissionsFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_RolePermissions.String(), "无此角色权限:"+fmt.Sprintf(format, args...))
}

func RolePermissions() *errors.Error {
	return errors.New(200, ErrorReason_RolePermissions.String(), "无此角色权限")
}

func IsUserPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserPermissions.String() && e.Code == 200
}

func UserPermissionsFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UserPermissions.String(), "无此用户权限:"+fmt.Sprintf(format, args...))
}

func UserPermissions() *errors.Error {
	return errors.New(200, ErrorReason_UserPermissions.String(), "无此用户权限")
}

func IsMenuPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MenuPermissions.String() && e.Code == 200
}

func MenuPermissionsFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_MenuPermissions.String(), "无此菜单权限:"+fmt.Sprintf(format, args...))
}

func MenuPermissions() *errors.Error {
	return errors.New(200, ErrorReason_MenuPermissions.String(), "无此菜单权限")
}

func IsEditSystemData(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EditSystemData.String() && e.Code == 200
}

func EditSystemDataFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_EditSystemData.String(), "系统数据，不允许修改:"+fmt.Sprintf(format, args...))
}

func EditSystemData() *errors.Error {
	return errors.New(200, ErrorReason_EditSystemData.String(), "系统数据，不允许修改")
}

func IsDeleteSystemData(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSystemData.String() && e.Code == 200
}

func DeleteSystemDataFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DeleteSystemData.String(), "系统数据，不允许删除:"+fmt.Sprintf(format, args...))
}

func DeleteSystemData() *errors.Error {
	return errors.New(200, ErrorReason_DeleteSystemData.String(), "系统数据，不允许删除")
}

func IsNewCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NewCaptcha.String() && e.Code == 200
}

func NewCaptchaFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NewCaptcha.String(), "二维码生成失败:"+fmt.Sprintf(format, args...))
}

func NewCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_NewCaptcha.String(), "二维码生成失败")
}

func IsVerifyCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifyCaptcha.String() && e.Code == 200
}

func VerifyCaptchaFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_VerifyCaptcha.String(), "验证码验证失败:"+fmt.Sprintf(format, args...))
}

func VerifyCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_VerifyCaptcha.String(), "验证码验证失败")
}

func IsRsaDecode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RsaDecode.String() && e.Code == 200
}

func RsaDecodeFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_RsaDecode.String(), "rsa解密失败:"+fmt.Sprintf(format, args...))
}

func RsaDecode() *errors.Error {
	return errors.New(200, ErrorReason_RsaDecode.String(), "rsa解密失败")
}

func IsPasswordFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordFormat.String() && e.Code == 200
}

func PasswordFormatFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_PasswordFormat.String(), "密码格式错误:"+fmt.Sprintf(format, args...))
}

func PasswordFormat() *errors.Error {
	return errors.New(200, ErrorReason_PasswordFormat.String(), "密码格式错误")
}

func IsPasswordExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpire.String() && e.Code == 200
}

func PasswordExpireFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_PasswordExpire.String(), "密码已过期:"+fmt.Sprintf(format, args...))
}

func PasswordExpire() *errors.Error {
	return errors.New(200, ErrorReason_PasswordExpire.String(), "密码已过期")
}

func IsUserDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserDisable.String() && e.Code == 200
}

func UserDisableFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UserDisable.String(), "用户已被禁用:"+fmt.Sprintf(format, args...))
}

func UserDisable() *errors.Error {
	return errors.New(200, ErrorReason_UserDisable.String(), "用户已被禁用")
}

func IsRoleDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RoleDisable.String() && e.Code == 200
}

func RoleDisableFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_RoleDisable.String(), "角色已被禁用:"+fmt.Sprintf(format, args...))
}

func RoleDisable() *errors.Error {
	return errors.New(200, ErrorReason_RoleDisable.String(), "角色已被禁用")
}

func IsUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserPassword.String() && e.Code == 200
}

func UserPasswordFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UserPassword.String(), "用户密码错误:"+fmt.Sprintf(format, args...))
}

func UserPassword() *errors.Error {
	return errors.New(200, ErrorReason_UserPassword.String(), "用户密码错误")
}

func IsNewToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NewToken.String() && e.Code == 200
}

func NewTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NewToken.String(), "token生成失败:"+fmt.Sprintf(format, args...))
}

func NewToken() *errors.Error {
	return errors.New(200, ErrorReason_NewToken.String(), "token生成失败")
}

func IsParseToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseToken.String() && e.Code == 200
}

func ParseTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParseToken.String(), "token解析失败:"+fmt.Sprintf(format, args...))
}

func ParseToken() *errors.Error {
	return errors.New(200, ErrorReason_ParseToken.String(), "token解析失败")
}

func IsRefreshToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshToken.String() && e.Code == 401
}

func RefreshTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_RefreshToken.String(), "刷新token失败:"+fmt.Sprintf(format, args...))
}

func RefreshToken() *errors.Error {
	return errors.New(401, ErrorReason_RefreshToken.String(), "刷新token失败")
}

func IsEmptyToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EmptyToken.String() && e.Code == 200
}

func EmptyTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_EmptyToken.String(), "token不能为空:"+fmt.Sprintf(format, args...))
}

func EmptyToken() *errors.Error {
	return errors.New(200, ErrorReason_EmptyToken.String(), "token不能为空")
}

func IsDeleteSelfRole(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSelfRole.String() && e.Code == 200
}

func DeleteSelfRoleFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfRole.String(), "不能删除自己的当前所属角色:"+fmt.Sprintf(format, args...))
}

func DeleteSelfRole() *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfRole.String(), "不能删除自己的当前所属角色")
}

func IsDeleteSelfDepartment(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSelfDepartment.String() && e.Code == 200
}

func DeleteSelfDepartmentFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfDepartment.String(), "不能删除自己的当前所属部门:"+fmt.Sprintf(format, args...))
}

func DeleteSelfDepartment() *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfDepartment.String(), "不能删除自己的当前所属部门")
}

func IsParentMenu(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParentMenu.String() && e.Code == 200
}

func ParentMenuFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParentMenu.String(), "当前菜单的父菜单不能为自己:"+fmt.Sprintf(format, args...))
}

func ParentMenu() *errors.Error {
	return errors.New(200, ErrorReason_ParentMenu.String(), "当前菜单的父菜单不能为自己")
}

func IsSendEmailCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SendEmailCaptcha.String() && e.Code == 200
}

func SendEmailCaptchaFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_SendEmailCaptcha.String(), "发送邮箱验证码失败:"+fmt.Sprintf(format, args...))
}

func SendEmailCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_SendEmailCaptcha.String(), "发送邮箱验证码失败")
}

func IsUsernameFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameFormat.String() && e.Code == 200
}

func UsernameFormatFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UsernameFormat.String(), "用户名格式错误:"+fmt.Sprintf(format, args...))
}

func UsernameFormat() *errors.Error {
	return errors.New(200, ErrorReason_UsernameFormat.String(), "用户名格式错误")
}

func IsUsernameNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameNotExist.String() && e.Code == 200
}

func UsernameNotExistFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UsernameNotExist.String(), "用户不存在:"+fmt.Sprintf(format, args...))
}

func UsernameNotExist() *errors.Error {
	return errors.New(200, ErrorReason_UsernameNotExist.String(), "用户不存在")
}

func IsDisableSelfUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DisableSelfUser.String() && e.Code == 200
}

func DisableSelfUserFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DisableSelfUser.String(), "不能禁用当前用户:"+fmt.Sprintf(format, args...))
}

func DisableSelfUser() *errors.Error {
	return errors.New(200, ErrorReason_DisableSelfUser.String(), "不能禁用当前用户")
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Forbidden.String() && e.Code == 403
}

func ForbiddenFormat(format string, args ...any) *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), "无接口权限:"+fmt.Sprintf(format, args...))
}

func Forbidden() *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), "无接口权限")
}

func IsDeleteSelfUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSelfUser.String() && e.Code == 200
}

func DeleteSelfUserFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfUser.String(), "不能删除当前账号:"+fmt.Sprintf(format, args...))
}

func DeleteSelfUser() *errors.Error {
	return errors.New(200, ErrorReason_DeleteSelfUser.String(), "不能删除当前账号")
}

func IsResetSelfUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResetSelfUserPassword.String() && e.Code == 200
}

func ResetSelfUserPasswordFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ResetSelfUserPassword.String(), "不能重置当前账号密码:"+fmt.Sprintf(format, args...))
}

func ResetSelfUserPassword() *errors.Error {
	return errors.New(200, ErrorReason_ResetSelfUserPassword.String(), "不能重置当前账号密码")
}
