// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/tenant/proto/tenant_service.proto

package tenant

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationTenantCreateTenant = "/manager.api.tenant.Tenant/CreateTenant"
	OperationTenantDeleteTenant = "/manager.api.tenant.Tenant/DeleteTenant"
	OperationTenantGetTenant    = "/manager.api.tenant.Tenant/GetTenant"
	OperationTenantListTenant   = "/manager.api.tenant.Tenant/ListTenant"
	OperationTenantUpdateTenant = "/manager.api.tenant.Tenant/UpdateTenant"
)

type TenantHTTPServer interface {
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantReply, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantReply, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantReply, error)
	ListTenant(context.Context, *ListTenantRequest) (*ListTenantReply, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantReply, error)
}

func RegisterTenantHTTPServer(s *http.Server, srv TenantHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/tenant", _Tenant_GetTenant0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/tenants", _Tenant_ListTenant0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/tenant", _Tenant_CreateTenant0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/tenant", _Tenant_UpdateTenant0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/tenant", _Tenant_DeleteTenant0_HTTP_Handler(srv))
}

func _Tenant_GetTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantGetTenant)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTenant(ctx, req.(*GetTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_ListTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantListTenant)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListTenant(ctx, req.(*ListTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_CreateTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantCreateTenant)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateTenant(ctx, req.(*CreateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_UpdateTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantUpdateTenant)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTenant(ctx, req.(*UpdateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTenantReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_DeleteTenant0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantDeleteTenant)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTenant(ctx, req.(*DeleteTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantReply)
		return ctx.Result(200, reply)
	}
}

type TenantHTTPClient interface {
	CreateTenant(ctx context.Context, req *CreateTenantRequest, opts ...http.CallOption) (rsp *CreateTenantReply, err error)
	DeleteTenant(ctx context.Context, req *DeleteTenantRequest, opts ...http.CallOption) (rsp *DeleteTenantReply, err error)
	GetTenant(ctx context.Context, req *GetTenantRequest, opts ...http.CallOption) (rsp *GetTenantReply, err error)
	ListTenant(ctx context.Context, req *ListTenantRequest, opts ...http.CallOption) (rsp *ListTenantReply, err error)
	UpdateTenant(ctx context.Context, req *UpdateTenantRequest, opts ...http.CallOption) (rsp *UpdateTenantReply, err error)
}

type TenantHTTPClientImpl struct {
	cc *http.Client
}

func NewTenantHTTPClient(client *http.Client) TenantHTTPClient {
	return &TenantHTTPClientImpl{client}
}

func (c *TenantHTTPClientImpl) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...http.CallOption) (*CreateTenantReply, error) {
	var out CreateTenantReply
	pattern := "/manager/api/v1/tenant"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantCreateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...http.CallOption) (*DeleteTenantReply, error) {
	var out DeleteTenantReply
	pattern := "/manager/api/v1/tenant"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantDeleteTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...http.CallOption) (*GetTenantReply, error) {
	var out GetTenantReply
	pattern := "/manager/api/v1/tenant"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantGetTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) ListTenant(ctx context.Context, in *ListTenantRequest, opts ...http.CallOption) (*ListTenantReply, error) {
	var out ListTenantReply
	pattern := "/manager/api/v1/tenants"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantListTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...http.CallOption) (*UpdateTenantReply, error) {
	var out UpdateTenantReply
	pattern := "/manager/api/v1/tenant"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantUpdateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
