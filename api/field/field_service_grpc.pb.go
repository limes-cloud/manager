// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/field/proto/field_service.proto

package field

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Field_ListFieldType_FullMethodName = "/manager.api.field.Field/ListFieldType"
	Field_ListField_FullMethodName     = "/manager.api.field.Field/ListField"
	Field_CreateField_FullMethodName   = "/manager.api.field.Field/CreateField"
	Field_UpdateField_FullMethodName   = "/manager.api.field.Field/UpdateField"
	Field_DeleteField_FullMethodName   = "/manager.api.field.Field/DeleteField"
)

// FieldClient is the client API for Field service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldClient interface {
	// ListFieldType 获取可用的字段列表
	ListFieldType(ctx context.Context, in *ListFieldTypeRequest, opts ...grpc.CallOption) (*ListFieldTypeReply, error)
	// ListField 获取用户字段列表
	ListField(ctx context.Context, in *ListFieldRequest, opts ...grpc.CallOption) (*ListFieldReply, error)
	// CreateField 创建用户字段
	CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldReply, error)
	// UpdateField 更新用户字段
	UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*UpdateFieldReply, error)
	// DeleteField 删除用户字段
	DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*DeleteFieldReply, error)
}

type fieldClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldClient(cc grpc.ClientConnInterface) FieldClient {
	return &fieldClient{cc}
}

func (c *fieldClient) ListFieldType(ctx context.Context, in *ListFieldTypeRequest, opts ...grpc.CallOption) (*ListFieldTypeReply, error) {
	out := new(ListFieldTypeReply)
	err := c.cc.Invoke(ctx, Field_ListFieldType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldClient) ListField(ctx context.Context, in *ListFieldRequest, opts ...grpc.CallOption) (*ListFieldReply, error) {
	out := new(ListFieldReply)
	err := c.cc.Invoke(ctx, Field_ListField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldClient) CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldReply, error) {
	out := new(CreateFieldReply)
	err := c.cc.Invoke(ctx, Field_CreateField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldClient) UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*UpdateFieldReply, error) {
	out := new(UpdateFieldReply)
	err := c.cc.Invoke(ctx, Field_UpdateField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldClient) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*DeleteFieldReply, error) {
	out := new(DeleteFieldReply)
	err := c.cc.Invoke(ctx, Field_DeleteField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldServer is the server API for Field service.
// All implementations must embed UnimplementedFieldServer
// for forward compatibility
type FieldServer interface {
	// ListFieldType 获取可用的字段列表
	ListFieldType(context.Context, *ListFieldTypeRequest) (*ListFieldTypeReply, error)
	// ListField 获取用户字段列表
	ListField(context.Context, *ListFieldRequest) (*ListFieldReply, error)
	// CreateField 创建用户字段
	CreateField(context.Context, *CreateFieldRequest) (*CreateFieldReply, error)
	// UpdateField 更新用户字段
	UpdateField(context.Context, *UpdateFieldRequest) (*UpdateFieldReply, error)
	// DeleteField 删除用户字段
	DeleteField(context.Context, *DeleteFieldRequest) (*DeleteFieldReply, error)
	mustEmbedUnimplementedFieldServer()
}

// UnimplementedFieldServer must be embedded to have forward compatible implementations.
type UnimplementedFieldServer struct{}

func (UnimplementedFieldServer) ListFieldType(context.Context, *ListFieldTypeRequest) (*ListFieldTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFieldType not implemented")
}

func (UnimplementedFieldServer) ListField(context.Context, *ListFieldRequest) (*ListFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListField not implemented")
}

func (UnimplementedFieldServer) CreateField(context.Context, *CreateFieldRequest) (*CreateFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}

func (UnimplementedFieldServer) UpdateField(context.Context, *UpdateFieldRequest) (*UpdateFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}

func (UnimplementedFieldServer) DeleteField(context.Context, *DeleteFieldRequest) (*DeleteFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedFieldServer) mustEmbedUnimplementedFieldServer() {}

// UnsafeFieldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldServer will
// result in compilation errors.
type UnsafeFieldServer interface {
	mustEmbedUnimplementedFieldServer()
}

func RegisterFieldServer(s grpc.ServiceRegistrar, srv FieldServer) {
	s.RegisterService(&Field_ServiceDesc, srv)
}

func _Field_ListFieldType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFieldTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServer).ListFieldType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Field_ListFieldType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServer).ListFieldType(ctx, req.(*ListFieldTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Field_ListField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServer).ListField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Field_ListField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServer).ListField(ctx, req.(*ListFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Field_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Field_CreateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServer).CreateField(ctx, req.(*CreateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Field_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Field_UpdateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServer).UpdateField(ctx, req.(*UpdateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Field_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Field_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServer).DeleteField(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Field_ServiceDesc is the grpc.ServiceDesc for Field service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Field_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.field.Field",
	HandlerType: (*FieldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFieldType",
			Handler:    _Field_ListFieldType_Handler,
		},
		{
			MethodName: "ListField",
			Handler:    _Field_ListField_Handler,
		},
		{
			MethodName: "CreateField",
			Handler:    _Field_CreateField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _Field_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _Field_DeleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/field/proto/field_service.proto",
}
