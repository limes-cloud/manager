// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/limes-cloud/kratos/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_FOUND.String() && e.Code == 200
}

func ErrorNotFoundFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NOT_FOUND.String(), "数据不存在:"+fmt.Sprintf(format, args...))
}

func ErrorNotFound() *errors.Error {
	return errors.New(200, ErrorReason_NOT_FOUND.String(), "数据不存在")
}

func IsDatabase(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATABASE.String() && e.Code == 200
}

func ErrorDatabaseFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DATABASE.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func ErrorDatabase() *errors.Error {
	return errors.New(200, ErrorReason_DATABASE.String(), "数据库错误")
}

func IsMetadata(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_METADATA.String() && e.Code == 200
}

func ErrorMetadataFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_METADATA.String(), "元数据异常:"+fmt.Sprintf(format, args...))
}

func ErrorMetadata() *errors.Error {
	return errors.New(200, ErrorReason_METADATA.String(), "元数据异常")
}

func IsTransform(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TRANSFORM.String() && e.Code == 200
}

func ErrorTransformFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_TRANSFORM.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func ErrorTransform() *errors.Error {
	return errors.New(200, ErrorReason_TRANSFORM.String(), "数据转换失败")
}

func IsDepartmentPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPARTMENT_PERMISSIONS.String() && e.Code == 200
}

func ErrorDepartmentPermissionsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DEPARTMENT_PERMISSIONS.String(), "无此部门权限:"+fmt.Sprintf(format, args...))
}

func ErrorDepartmentPermissions() *errors.Error {
	return errors.New(200, ErrorReason_DEPARTMENT_PERMISSIONS.String(), "无此部门权限")
}

func IsRolePermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_PERMISSIONS.String() && e.Code == 200
}

func ErrorRolePermissionsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_ROLE_PERMISSIONS.String(), "无此角色权限:"+fmt.Sprintf(format, args...))
}

func ErrorRolePermissions() *errors.Error {
	return errors.New(200, ErrorReason_ROLE_PERMISSIONS.String(), "无此角色权限")
}

func IsUserPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PERMISSIONS.String() && e.Code == 200
}

func ErrorUserPermissionsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_USER_PERMISSIONS.String(), "无此用户权限:"+fmt.Sprintf(format, args...))
}

func ErrorUserPermissions() *errors.Error {
	return errors.New(200, ErrorReason_USER_PERMISSIONS.String(), "无此用户权限")
}

func IsMenuPermissions(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_PERMISSIONS.String() && e.Code == 200
}

func ErrorMenuPermissionsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_MENU_PERMISSIONS.String(), "无此菜单权限:"+fmt.Sprintf(format, args...))
}

func ErrorMenuPermissions() *errors.Error {
	return errors.New(200, ErrorReason_MENU_PERMISSIONS.String(), "无此菜单权限")
}

func IsEditSystemData(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EDIT_SYSTEM_DATA.String() && e.Code == 200
}

func ErrorEditSystemDataFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_EDIT_SYSTEM_DATA.String(), "系统数据，不允许修改:"+fmt.Sprintf(format, args...))
}

func ErrorEditSystemData() *errors.Error {
	return errors.New(200, ErrorReason_EDIT_SYSTEM_DATA.String(), "系统数据，不允许修改")
}

func IsDeleteSystemData(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_SYSTEM_DATA.String() && e.Code == 200
}

func ErrorDeleteSystemDataFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SYSTEM_DATA.String(), "系统数据，不允许删除:"+fmt.Sprintf(format, args...))
}

func ErrorDeleteSystemData() *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SYSTEM_DATA.String(), "系统数据，不允许删除")
}

func IsNewCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NEW_CAPTCHA.String() && e.Code == 200
}

func ErrorNewCaptchaFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NEW_CAPTCHA.String(), "二维码生成失败:"+fmt.Sprintf(format, args...))
}

func ErrorNewCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_NEW_CAPTCHA.String(), "二维码生成失败")
}

func IsVerifyCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VERIFY_CAPTCHA.String() && e.Code == 200
}

func ErrorVerifyCaptchaFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_VERIFY_CAPTCHA.String(), "验证码验证失败:"+fmt.Sprintf(format, args...))
}

func ErrorVerifyCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_VERIFY_CAPTCHA.String(), "验证码验证失败")
}

func IsRsaDecode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RSA_DECODE.String() && e.Code == 200
}

func ErrorRsaDecodeFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_RSA_DECODE.String(), "rsa解密失败:"+fmt.Sprintf(format, args...))
}

func ErrorRsaDecode() *errors.Error {
	return errors.New(200, ErrorReason_RSA_DECODE.String(), "rsa解密失败")
}

func IsPasswordFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_FORMAT.String() && e.Code == 200
}

func ErrorPasswordFormatFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_PASSWORD_FORMAT.String(), "密码格式错误:"+fmt.Sprintf(format, args...))
}

func ErrorPasswordFormat() *errors.Error {
	return errors.New(200, ErrorReason_PASSWORD_FORMAT.String(), "密码格式错误")
}

func IsPasswordExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_EXPIRE.String() && e.Code == 200
}

func ErrorPasswordExpireFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_PASSWORD_EXPIRE.String(), "密码已过期:"+fmt.Sprintf(format, args...))
}

func ErrorPasswordExpire() *errors.Error {
	return errors.New(200, ErrorReason_PASSWORD_EXPIRE.String(), "密码已过期")
}

func IsUserDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLE.String() && e.Code == 200
}

func ErrorUserDisableFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_USER_DISABLE.String(), "用户已被禁用:"+fmt.Sprintf(format, args...))
}

func ErrorUserDisable() *errors.Error {
	return errors.New(200, ErrorReason_USER_DISABLE.String(), "用户已被禁用")
}

func IsRoleDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_DISABLE.String() && e.Code == 200
}

func ErrorRoleDisableFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_ROLE_DISABLE.String(), "角色已被禁用:"+fmt.Sprintf(format, args...))
}

func ErrorRoleDisable() *errors.Error {
	return errors.New(200, ErrorReason_ROLE_DISABLE.String(), "角色已被禁用")
}

func IsUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD.String() && e.Code == 200
}

func ErrorUserPasswordFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_USER_PASSWORD.String(), "用户密码错误:"+fmt.Sprintf(format, args...))
}

func ErrorUserPassword() *errors.Error {
	return errors.New(200, ErrorReason_USER_PASSWORD.String(), "用户密码错误")
}

func IsNewToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NEW_TOKEN.String() && e.Code == 200
}

func ErrorNewTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NEW_TOKEN.String(), "token生成失败:"+fmt.Sprintf(format, args...))
}

func ErrorNewToken() *errors.Error {
	return errors.New(200, ErrorReason_NEW_TOKEN.String(), "token生成失败")
}

func IsParseToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARSE_TOKEN.String() && e.Code == 200
}

func ErrorParseTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_PARSE_TOKEN.String(), "token解析失败:"+fmt.Sprintf(format, args...))
}

func ErrorParseToken() *errors.Error {
	return errors.New(200, ErrorReason_PARSE_TOKEN.String(), "token解析失败")
}

func IsRefreshToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REFRESH_TOKEN.String() && e.Code == 401
}

func ErrorRefreshTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_REFRESH_TOKEN.String(), "刷新token失败:"+fmt.Sprintf(format, args...))
}

func ErrorRefreshToken() *errors.Error {
	return errors.New(401, ErrorReason_REFRESH_TOKEN.String(), "刷新token失败")
}

func IsEmptyToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMPTY_TOKEN.String() && e.Code == 200
}

func ErrorEmptyTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_EMPTY_TOKEN.String(), "token不能为空:"+fmt.Sprintf(format, args...))
}

func ErrorEmptyToken() *errors.Error {
	return errors.New(200, ErrorReason_EMPTY_TOKEN.String(), "token不能为空")
}

func IsDeleteSelfRole(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_SELF_ROLE.String() && e.Code == 200
}

func ErrorDeleteSelfRoleFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SELF_ROLE.String(), "不能删除自己的当前所属角色:"+fmt.Sprintf(format, args...))
}

func ErrorDeleteSelfRole() *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SELF_ROLE.String(), "不能删除自己的当前所属角色")
}

func IsDeleteSelfDepartment(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_SELF_DEPARTMENT.String() && e.Code == 200
}

func ErrorDeleteSelfDepartmentFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SELF_DEPARTMENT.String(), "不能删除自己的当前所属部门:"+fmt.Sprintf(format, args...))
}

func ErrorDeleteSelfDepartment() *errors.Error {
	return errors.New(200, ErrorReason_DELETE_SELF_DEPARTMENT.String(), "不能删除自己的当前所属部门")
}

func IsParentMenu(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARENT_MENU.String() && e.Code == 200
}

func ErrorParentMenuFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_PARENT_MENU.String(), "当前菜单的父菜单不能为自己:"+fmt.Sprintf(format, args...))
}

func ErrorParentMenu() *errors.Error {
	return errors.New(200, ErrorReason_PARENT_MENU.String(), "当前菜单的父菜单不能为自己")
}

func IsSendEmailCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SEND_EMAIL_CAPTCHA.String() && e.Code == 200
}

func ErrorSendEmailCaptchaFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_SEND_EMAIL_CAPTCHA.String(), "发送邮箱验证码失败:"+fmt.Sprintf(format, args...))
}

func ErrorSendEmailCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_SEND_EMAIL_CAPTCHA.String(), "发送邮箱验证码失败")
}

func IsUsernameFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USERNAME_FORMAT.String() && e.Code == 200
}

func ErrorUsernameFormatFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_USERNAME_FORMAT.String(), "用户名格式错误:"+fmt.Sprintf(format, args...))
}

func ErrorUsernameFormat() *errors.Error {
	return errors.New(200, ErrorReason_USERNAME_FORMAT.String(), "用户名格式错误")
}

func IsUsernameNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USERNAME_NOT_EXIST.String() && e.Code == 200
}

func ErrorUsernameNotExistFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_USERNAME_NOT_EXIST.String(), "用户不存在:"+fmt.Sprintf(format, args...))
}

func ErrorUsernameNotExist() *errors.Error {
	return errors.New(200, ErrorReason_USERNAME_NOT_EXIST.String(), "用户不存在")
}

func IsDisableSelfUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DISABLE_SELF_USER.String() && e.Code == 200
}

func ErrorDisableSelfUserFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DISABLE_SELF_USER.String(), "不能禁用当前用户:"+fmt.Sprintf(format, args...))
}

func ErrorDisableSelfUser() *errors.Error {
	return errors.New(200, ErrorReason_DISABLE_SELF_USER.String(), "不能禁用当前用户")
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FORBIDDEN.String() && e.Code == 200
}

func ErrorForbiddenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_FORBIDDEN.String(), "无接口权限:"+fmt.Sprintf(format, args...))
}

func ErrorForbidden() *errors.Error {
	return errors.New(200, ErrorReason_FORBIDDEN.String(), "无接口权限")
}
