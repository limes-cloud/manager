// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager_dict_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DictValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictValueMultiError, or nil
// if none found.
func (m *DictValue) ValidateAll() error {
	return m.validate(true)
}

func (m *DictValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DictId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for Extra

	// no validation rules for Description

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return DictValueMultiError(errors)
	}

	return nil
}

// DictValueMultiError is an error wrapping multiple validation errors returned
// by DictValue.ValidateAll() if the designated constraints aren't met.
type DictValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictValueMultiError) AllErrors() []error { return m }

// DictValueValidationError is the validation error returned by
// DictValue.Validate if the designated constraints aren't met.
type DictValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictValueValidationError) ErrorName() string { return "DictValueValidationError" }

// Error satisfies the builtin error interface
func (e DictValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictValueValidationError{}

// Validate checks the field values on PageDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageDictValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageDictValueRequestMultiError, or nil if none found.
func (m *PageDictValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageDictValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageDictValueRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageDictValueRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if len(errors) > 0 {
		return PageDictValueRequestMultiError(errors)
	}

	return nil
}

// PageDictValueRequestMultiError is an error wrapping multiple validation
// errors returned by PageDictValueRequest.ValidateAll() if the designated
// constraints aren't met.
type PageDictValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageDictValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageDictValueRequestMultiError) AllErrors() []error { return m }

// PageDictValueRequestValidationError is the validation error returned by
// PageDictValueRequest.Validate if the designated constraints aren't met.
type PageDictValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageDictValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageDictValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageDictValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageDictValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageDictValueRequestValidationError) ErrorName() string {
	return "PageDictValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageDictValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageDictValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageDictValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageDictValueRequestValidationError{}

// Validate checks the field values on PageDictValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageDictValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageDictValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageDictValueReplyMultiError, or nil if none found.
func (m *PageDictValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageDictValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageDictValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageDictValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageDictValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageDictValueReplyMultiError(errors)
	}

	return nil
}

// PageDictValueReplyMultiError is an error wrapping multiple validation errors
// returned by PageDictValueReply.ValidateAll() if the designated constraints
// aren't met.
type PageDictValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageDictValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageDictValueReplyMultiError) AllErrors() []error { return m }

// PageDictValueReplyValidationError is the validation error returned by
// PageDictValueReply.Validate if the designated constraints aren't met.
type PageDictValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageDictValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageDictValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageDictValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageDictValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageDictValueReplyValidationError) ErrorName() string {
	return "PageDictValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageDictValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageDictValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageDictValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageDictValueReplyValidationError{}

// Validate checks the field values on AddDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDictValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDictValueRequestMultiError, or nil if none found.
func (m *AddDictValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDictValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDictId() <= 0 {
		err := AddDictValueRequestValidationError{
			field:  "DictId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := AddDictValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := AddDictValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return AddDictValueRequestMultiError(errors)
	}

	return nil
}

// AddDictValueRequestMultiError is an error wrapping multiple validation
// errors returned by AddDictValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AddDictValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDictValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDictValueRequestMultiError) AllErrors() []error { return m }

// AddDictValueRequestValidationError is the validation error returned by
// AddDictValueRequest.Validate if the designated constraints aren't met.
type AddDictValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDictValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDictValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDictValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDictValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDictValueRequestValidationError) ErrorName() string {
	return "AddDictValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDictValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDictValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDictValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDictValueRequestValidationError{}

// Validate checks the field values on UpdateDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictValueRequestMultiError, or nil if none found.
func (m *UpdateDictValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDictId() <= 0 {
		err := UpdateDictValueRequestValidationError{
			field:  "DictId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := UpdateDictValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateDictValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateDictValueRequestMultiError(errors)
	}

	return nil
}

// UpdateDictValueRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictValueRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictValueRequestMultiError) AllErrors() []error { return m }

// UpdateDictValueRequestValidationError is the validation error returned by
// UpdateDictValueRequest.Validate if the designated constraints aren't met.
type UpdateDictValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictValueRequestValidationError) ErrorName() string {
	return "UpdateDictValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictValueRequestValidationError{}

// Validate checks the field values on DeleteDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictValueRequestMultiError, or nil if none found.
func (m *DeleteDictValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictValueRequestMultiError(errors)
	}

	return nil
}

// DeleteDictValueRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictValueRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictValueRequestMultiError) AllErrors() []error { return m }

// DeleteDictValueRequestValidationError is the validation error returned by
// DeleteDictValueRequest.Validate if the designated constraints aren't met.
type DeleteDictValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictValueRequestValidationError) ErrorName() string {
	return "DeleteDictValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictValueRequestValidationError{}
