// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: basic_platform_user_role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleMultiError, or nil
// if none found.
func (m *UserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RoleId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRoleValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRoleValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRoleValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRoleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRoleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRoleValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserRoleMultiError(errors)
	}

	return nil
}

// UserRoleMultiError is an error wrapping multiple validation errors returned
// by UserRole.ValidateAll() if the designated constraints aren't met.
type UserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleMultiError) AllErrors() []error { return m }

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on GetUserRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRolesRequestMultiError, or nil if none found.
func (m *GetUserRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserRolesRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRolesRequestMultiError(errors)
	}

	return nil
}

// GetUserRolesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRolesRequestMultiError) AllErrors() []error { return m }

// GetUserRolesRequestValidationError is the validation error returned by
// GetUserRolesRequest.Validate if the designated constraints aren't met.
type GetUserRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRolesRequestValidationError) ErrorName() string {
	return "GetUserRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRolesRequestValidationError{}

// Validate checks the field values on GetUserRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRolesReplyMultiError, or nil if none found.
func (m *GetUserRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRole() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRolesReplyValidationError{
						field:  fmt.Sprintf("UserRole[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRolesReplyValidationError{
						field:  fmt.Sprintf("UserRole[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRolesReplyValidationError{
					field:  fmt.Sprintf("UserRole[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRolesReplyMultiError(errors)
	}

	return nil
}

// GetUserRolesReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserRolesReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRolesReplyMultiError) AllErrors() []error { return m }

// GetUserRolesReplyValidationError is the validation error returned by
// GetUserRolesReply.Validate if the designated constraints aren't met.
type GetUserRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRolesReplyValidationError) ErrorName() string {
	return "GetUserRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRolesReplyValidationError{}

// Validate checks the field values on SwitchCurrentUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwitchCurrentUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchCurrentUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchCurrentUserRoleRequestMultiError, or nil if none found.
func (m *SwitchCurrentUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchCurrentUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := SwitchCurrentUserRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SwitchCurrentUserRoleRequestMultiError(errors)
	}

	return nil
}

// SwitchCurrentUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by SwitchCurrentUserRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type SwitchCurrentUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchCurrentUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchCurrentUserRoleRequestMultiError) AllErrors() []error { return m }

// SwitchCurrentUserRoleRequestValidationError is the validation error returned
// by SwitchCurrentUserRoleRequest.Validate if the designated constraints
// aren't met.
type SwitchCurrentUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchCurrentUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchCurrentUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchCurrentUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchCurrentUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchCurrentUserRoleRequestValidationError) ErrorName() string {
	return "SwitchCurrentUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchCurrentUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchCurrentUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchCurrentUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchCurrentUserRoleRequestValidationError{}

// Validate checks the field values on SwitchCurrentUserRoleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwitchCurrentUserRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchCurrentUserRoleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchCurrentUserRoleReplyMultiError, or nil if none found.
func (m *SwitchCurrentUserRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchCurrentUserRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return SwitchCurrentUserRoleReplyMultiError(errors)
	}

	return nil
}

// SwitchCurrentUserRoleReplyMultiError is an error wrapping multiple
// validation errors returned by SwitchCurrentUserRoleReply.ValidateAll() if
// the designated constraints aren't met.
type SwitchCurrentUserRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchCurrentUserRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchCurrentUserRoleReplyMultiError) AllErrors() []error { return m }

// SwitchCurrentUserRoleReplyValidationError is the validation error returned
// by SwitchCurrentUserRoleReply.Validate if the designated constraints aren't met.
type SwitchCurrentUserRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchCurrentUserRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchCurrentUserRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchCurrentUserRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchCurrentUserRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchCurrentUserRoleReplyValidationError) ErrorName() string {
	return "SwitchCurrentUserRoleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchCurrentUserRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchCurrentUserRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchCurrentUserRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchCurrentUserRoleReplyValidationError{}
