// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager_department.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Department with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Department) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Department with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepartmentMultiError, or
// nil if none found.
func (m *Department) ValidateAll() error {
	return m.validate(true)
}

func (m *Department) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DepartmentValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DepartmentValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DepartmentValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DepartmentMultiError(errors)
	}

	return nil
}

// DepartmentMultiError is an error wrapping multiple validation errors
// returned by Department.ValidateAll() if the designated constraints aren't met.
type DepartmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepartmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepartmentMultiError) AllErrors() []error { return m }

// DepartmentValidationError is the validation error returned by
// Department.Validate if the designated constraints aren't met.
type DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentValidationError) ErrorName() string { return "DepartmentValidationError" }

// Error satisfies the builtin error interface
func (e DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentValidationError{}

// Validate checks the field values on GetDepartmentTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentTreeReplyMultiError, or nil if none found.
func (m *GetDepartmentTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDepartmentTreeReplyValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDepartmentTreeReplyValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentTreeReplyValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDepartmentTreeReplyMultiError(errors)
	}

	return nil
}

// GetDepartmentTreeReplyMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentTreeReply.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentTreeReplyMultiError) AllErrors() []error { return m }

// GetDepartmentTreeReplyValidationError is the validation error returned by
// GetDepartmentTreeReply.Validate if the designated constraints aren't met.
type GetDepartmentTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentTreeReplyValidationError) ErrorName() string {
	return "GetDepartmentTreeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentTreeReplyValidationError{}

// Validate checks the field values on GetUserDepartmentTreeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDepartmentTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDepartmentTreeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDepartmentTreeReplyMultiError, or nil if none found.
func (m *GetUserDepartmentTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDepartmentTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDepartmentTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDepartmentTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDepartmentTreeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDepartmentTreeReplyMultiError(errors)
	}

	return nil
}

// GetUserDepartmentTreeReplyMultiError is an error wrapping multiple
// validation errors returned by GetUserDepartmentTreeReply.ValidateAll() if
// the designated constraints aren't met.
type GetUserDepartmentTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDepartmentTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDepartmentTreeReplyMultiError) AllErrors() []error { return m }

// GetUserDepartmentTreeReplyValidationError is the validation error returned
// by GetUserDepartmentTreeReply.Validate if the designated constraints aren't met.
type GetUserDepartmentTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDepartmentTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDepartmentTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDepartmentTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDepartmentTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDepartmentTreeReplyValidationError) ErrorName() string {
	return "GetUserDepartmentTreeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDepartmentTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDepartmentTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDepartmentTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDepartmentTreeReplyValidationError{}

// Validate checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentRequestMultiError, or nil if none found.
func (m *GetDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDepartmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDepartmentRequestMultiError(errors)
	}

	return nil
}

// GetDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentRequestMultiError) AllErrors() []error { return m }

// GetDepartmentRequestValidationError is the validation error returned by
// GetDepartmentRequest.Validate if the designated constraints aren't met.
type GetDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentRequestValidationError) ErrorName() string {
	return "GetDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentRequestValidationError{}

// Validate checks the field values on GetDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentReplyMultiError, or nil if none found.
func (m *GetDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDepartment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDepartmentReplyValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDepartmentReplyValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentReplyValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDepartmentReplyMultiError(errors)
	}

	return nil
}

// GetDepartmentReplyMultiError is an error wrapping multiple validation errors
// returned by GetDepartmentReply.ValidateAll() if the designated constraints
// aren't met.
type GetDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentReplyMultiError) AllErrors() []error { return m }

// GetDepartmentReplyValidationError is the validation error returned by
// GetDepartmentReply.Validate if the designated constraints aren't met.
type GetDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentReplyValidationError) ErrorName() string {
	return "GetDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentReplyValidationError{}

// Validate checks the field values on AddDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDepartmentRequestMultiError, or nil if none found.
func (m *AddDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() <= 0 {
		err := AddDepartmentRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddDepartmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := AddDepartmentRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddDepartmentRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDepartmentRequestMultiError(errors)
	}

	return nil
}

// AddDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by AddDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDepartmentRequestMultiError) AllErrors() []error { return m }

// AddDepartmentRequestValidationError is the validation error returned by
// AddDepartmentRequest.Validate if the designated constraints aren't met.
type AddDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDepartmentRequestValidationError) ErrorName() string {
	return "AddDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDepartmentRequestValidationError{}

// Validate checks the field values on UpdateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDepartmentRequestMultiError, or nil if none found.
func (m *UpdateDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDepartmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() <= 0 {
		err := UpdateDepartmentRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDepartmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateDepartmentRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDepartmentRequestMultiError(errors)
	}

	return nil
}

// UpdateDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentRequestMultiError) AllErrors() []error { return m }

// UpdateDepartmentRequestValidationError is the validation error returned by
// UpdateDepartmentRequest.Validate if the designated constraints aren't met.
type UpdateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentRequestValidationError) ErrorName() string {
	return "UpdateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentRequestValidationError{}

// Validate checks the field values on DeleteDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDepartmentRequestMultiError, or nil if none found.
func (m *DeleteDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDepartmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDepartmentRequestMultiError(errors)
	}

	return nil
}

// DeleteDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentRequestMultiError) AllErrors() []error { return m }

// DeleteDepartmentRequestValidationError is the validation error returned by
// DeleteDepartmentRequest.Validate if the designated constraints aren't met.
type DeleteDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentRequestValidationError) ErrorName() string {
	return "DeleteDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentRequestValidationError{}
