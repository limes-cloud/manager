// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: manager_department_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddDepartment = "/manager_department.Service/AddDepartment"
const OperationServiceAddDepartmentObject = "/manager_department.Service/AddDepartmentObject"
const OperationServiceAllDepartmentObjectValue = "/manager_department.Service/AllDepartmentObjectValue"
const OperationServiceDeleteDepartment = "/manager_department.Service/DeleteDepartment"
const OperationServiceDeleteDepartmentObject = "/manager_department.Service/DeleteDepartmentObject"
const OperationServiceGetDepartmentTree = "/manager_department.Service/GetDepartmentTree"
const OperationServiceImportDepartmentObject = "/manager_department.Service/ImportDepartmentObject"
const OperationServiceUpdateDepartment = "/manager_department.Service/UpdateDepartment"

type ServiceHTTPServer interface {
	// AddDepartment AddDepartment 删除部门信息
	AddDepartment(context.Context, *AddDepartmentRequest) (*AddDepartmentReply, error)
	// AddDepartmentObject AddDepartmentObject 删除资源对象信息
	AddDepartmentObject(context.Context, *AddDepartmentObjectRequest) (*AddDepartmentObjectReply, error)
	// AllDepartmentObjectValue AllDepartmentObject 分页获取资源对象信息值
	AllDepartmentObjectValue(context.Context, *AllDepartmentObjectValueRequest) (*AllDepartmentObjectValueReply, error)
	// DeleteDepartment DeleteDepartment 删除部门信息
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error)
	// DeleteDepartmentObject DeleteDepartmentObject 删除资源对象信息
	DeleteDepartmentObject(context.Context, *DeleteDepartmentObjectRequest) (*emptypb.Empty, error)
	// GetDepartmentTree GetDepartmentTree 获取部门树
	GetDepartmentTree(context.Context, *emptypb.Empty) (*GetDepartmentTreeReply, error)
	// ImportDepartmentObject ImportDepartmentObject 更新资源对象信息
	ImportDepartmentObject(context.Context, *ImportDepartmentObjectRequest) (*emptypb.Empty, error)
	// UpdateDepartment UpdateDepartment 更新部门信息
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/v1/department/tree", _Service_GetDepartmentTree0_HTTP_Handler(srv))
	r.POST("/manager/v1/department", _Service_AddDepartment0_HTTP_Handler(srv))
	r.PUT("/manager/v1/department", _Service_UpdateDepartment0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/department", _Service_DeleteDepartment0_HTTP_Handler(srv))
	r.GET("/manager/v1/department/objects", _Service_AllDepartmentObjectValue0_HTTP_Handler(srv))
	r.POST("/manager/v1/department/object", _Service_AddDepartmentObject0_HTTP_Handler(srv))
	r.POST("/manager/v1/department/objects", _Service_ImportDepartmentObject0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/department/object", _Service_DeleteDepartmentObject0_HTTP_Handler(srv))
}

func _Service_GetDepartmentTree0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetDepartmentTree)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDepartmentTree(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepartmentTreeReply)
		return ctx.Result(200, reply.List)
	}
}

func _Service_AddDepartment0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddDepartmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddDepartment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddDepartment(ctx, req.(*AddDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddDepartmentReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateDepartment0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDepartmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteDepartment0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepartmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteDepartment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllDepartmentObjectValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllDepartmentObjectValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllDepartmentObjectValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllDepartmentObjectValue(ctx, req.(*AllDepartmentObjectValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllDepartmentObjectValueReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddDepartmentObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddDepartmentObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddDepartmentObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddDepartmentObject(ctx, req.(*AddDepartmentObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddDepartmentObjectReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ImportDepartmentObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportDepartmentObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceImportDepartmentObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ImportDepartmentObject(ctx, req.(*ImportDepartmentObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteDepartmentObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepartmentObjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteDepartmentObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDepartmentObject(ctx, req.(*DeleteDepartmentObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddDepartment(ctx context.Context, req *AddDepartmentRequest, opts ...http.CallOption) (rsp *AddDepartmentReply, err error)
	AddDepartmentObject(ctx context.Context, req *AddDepartmentObjectRequest, opts ...http.CallOption) (rsp *AddDepartmentObjectReply, err error)
	AllDepartmentObjectValue(ctx context.Context, req *AllDepartmentObjectValueRequest, opts ...http.CallOption) (rsp *AllDepartmentObjectValueReply, err error)
	DeleteDepartment(ctx context.Context, req *DeleteDepartmentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteDepartmentObject(ctx context.Context, req *DeleteDepartmentObjectRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetDepartmentTree(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetDepartmentTreeReply, err error)
	ImportDepartmentObject(ctx context.Context, req *ImportDepartmentObjectRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateDepartment(ctx context.Context, req *UpdateDepartmentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddDepartment(ctx context.Context, in *AddDepartmentRequest, opts ...http.CallOption) (*AddDepartmentReply, error) {
	var out AddDepartmentReply
	pattern := "/manager/v1/department"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddDepartmentObject(ctx context.Context, in *AddDepartmentObjectRequest, opts ...http.CallOption) (*AddDepartmentObjectReply, error) {
	var out AddDepartmentObjectReply
	pattern := "/manager/v1/department/object"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddDepartmentObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllDepartmentObjectValue(ctx context.Context, in *AllDepartmentObjectValueRequest, opts ...http.CallOption) (*AllDepartmentObjectValueReply, error) {
	var out AllDepartmentObjectValueReply
	pattern := "/manager/v1/department/objects"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllDepartmentObjectValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/department"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteDepartmentObject(ctx context.Context, in *DeleteDepartmentObjectRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/department/object"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteDepartmentObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetDepartmentTree(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetDepartmentTreeReply, error) {
	var out GetDepartmentTreeReply
	pattern := "/manager/v1/department/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetDepartmentTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.List, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ImportDepartmentObject(ctx context.Context, in *ImportDepartmentObjectRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/department/objects"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceImportDepartmentObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/department"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
