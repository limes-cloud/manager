// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: manager_department_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_GetDepartmentTree_FullMethodName        = "/manager_department.Service/GetDepartmentTree"
	Service_AddDepartment_FullMethodName            = "/manager_department.Service/AddDepartment"
	Service_UpdateDepartment_FullMethodName         = "/manager_department.Service/UpdateDepartment"
	Service_DeleteDepartment_FullMethodName         = "/manager_department.Service/DeleteDepartment"
	Service_AllDepartmentObjectValue_FullMethodName = "/manager_department.Service/AllDepartmentObjectValue"
	Service_AddDepartmentObject_FullMethodName      = "/manager_department.Service/AddDepartmentObject"
	Service_ImportDepartmentObject_FullMethodName   = "/manager_department.Service/ImportDepartmentObject"
	Service_DeleteDepartmentObject_FullMethodName   = "/manager_department.Service/DeleteDepartmentObject"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// GetDepartmentTree 获取部门树
	GetDepartmentTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDepartmentTreeReply, error)
	// AddDepartment 删除部门信息
	AddDepartment(ctx context.Context, in *AddDepartmentRequest, opts ...grpc.CallOption) (*AddDepartmentReply, error)
	// UpdateDepartment 更新部门信息
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDepartment 删除部门信息
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AllDepartmentObject 分页获取资源对象信息值
	AllDepartmentObjectValue(ctx context.Context, in *AllDepartmentObjectValueRequest, opts ...grpc.CallOption) (*AllDepartmentObjectValueReply, error)
	// AddDepartmentObject 删除资源对象信息
	AddDepartmentObject(ctx context.Context, in *AddDepartmentObjectRequest, opts ...grpc.CallOption) (*AddDepartmentObjectReply, error)
	// ImportDepartmentObject 更新资源对象信息
	ImportDepartmentObject(ctx context.Context, in *ImportDepartmentObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDepartmentObject 删除资源对象信息
	DeleteDepartmentObject(ctx context.Context, in *DeleteDepartmentObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetDepartmentTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDepartmentTreeReply, error) {
	out := new(GetDepartmentTreeReply)
	err := c.cc.Invoke(ctx, Service_GetDepartmentTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddDepartment(ctx context.Context, in *AddDepartmentRequest, opts ...grpc.CallOption) (*AddDepartmentReply, error) {
	out := new(AddDepartmentReply)
	err := c.cc.Invoke(ctx, Service_AddDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllDepartmentObjectValue(ctx context.Context, in *AllDepartmentObjectValueRequest, opts ...grpc.CallOption) (*AllDepartmentObjectValueReply, error) {
	out := new(AllDepartmentObjectValueReply)
	err := c.cc.Invoke(ctx, Service_AllDepartmentObjectValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddDepartmentObject(ctx context.Context, in *AddDepartmentObjectRequest, opts ...grpc.CallOption) (*AddDepartmentObjectReply, error) {
	out := new(AddDepartmentObjectReply)
	err := c.cc.Invoke(ctx, Service_AddDepartmentObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ImportDepartmentObject(ctx context.Context, in *ImportDepartmentObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_ImportDepartmentObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteDepartmentObject(ctx context.Context, in *DeleteDepartmentObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteDepartmentObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// GetDepartmentTree 获取部门树
	GetDepartmentTree(context.Context, *emptypb.Empty) (*GetDepartmentTreeReply, error)
	// AddDepartment 删除部门信息
	AddDepartment(context.Context, *AddDepartmentRequest) (*AddDepartmentReply, error)
	// UpdateDepartment 更新部门信息
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*emptypb.Empty, error)
	// DeleteDepartment 删除部门信息
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error)
	// AllDepartmentObject 分页获取资源对象信息值
	AllDepartmentObjectValue(context.Context, *AllDepartmentObjectValueRequest) (*AllDepartmentObjectValueReply, error)
	// AddDepartmentObject 删除资源对象信息
	AddDepartmentObject(context.Context, *AddDepartmentObjectRequest) (*AddDepartmentObjectReply, error)
	// ImportDepartmentObject 更新资源对象信息
	ImportDepartmentObject(context.Context, *ImportDepartmentObjectRequest) (*emptypb.Empty, error)
	// DeleteDepartmentObject 删除资源对象信息
	DeleteDepartmentObject(context.Context, *DeleteDepartmentObjectRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetDepartmentTree(context.Context, *emptypb.Empty) (*GetDepartmentTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentTree not implemented")
}
func (UnimplementedServiceServer) AddDepartment(context.Context, *AddDepartmentRequest) (*AddDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDepartment not implemented")
}
func (UnimplementedServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedServiceServer) AllDepartmentObjectValue(context.Context, *AllDepartmentObjectValueRequest) (*AllDepartmentObjectValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDepartmentObjectValue not implemented")
}
func (UnimplementedServiceServer) AddDepartmentObject(context.Context, *AddDepartmentObjectRequest) (*AddDepartmentObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDepartmentObject not implemented")
}
func (UnimplementedServiceServer) ImportDepartmentObject(context.Context, *ImportDepartmentObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDepartmentObject not implemented")
}
func (UnimplementedServiceServer) DeleteDepartmentObject(context.Context, *DeleteDepartmentObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartmentObject not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetDepartmentTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetDepartmentTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetDepartmentTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetDepartmentTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddDepartment(ctx, req.(*AddDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllDepartmentObjectValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllDepartmentObjectValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllDepartmentObjectValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllDepartmentObjectValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllDepartmentObjectValue(ctx, req.(*AllDepartmentObjectValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddDepartmentObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartmentObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddDepartmentObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddDepartmentObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddDepartmentObject(ctx, req.(*AddDepartmentObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ImportDepartmentObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDepartmentObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ImportDepartmentObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ImportDepartmentObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ImportDepartmentObject(ctx, req.(*ImportDepartmentObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteDepartmentObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteDepartmentObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteDepartmentObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteDepartmentObject(ctx, req.(*DeleteDepartmentObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_department.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartmentTree",
			Handler:    _Service_GetDepartmentTree_Handler,
		},
		{
			MethodName: "AddDepartment",
			Handler:    _Service_AddDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Service_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Service_DeleteDepartment_Handler,
		},
		{
			MethodName: "AllDepartmentObjectValue",
			Handler:    _Service_AllDepartmentObjectValue_Handler,
		},
		{
			MethodName: "AddDepartmentObject",
			Handler:    _Service_AddDepartmentObject_Handler,
		},
		{
			MethodName: "ImportDepartmentObject",
			Handler:    _Service_ImportDepartmentObject_Handler,
		},
		{
			MethodName: "DeleteDepartmentObject",
			Handler:    _Service_DeleteDepartmentObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_department_service.proto",
}
