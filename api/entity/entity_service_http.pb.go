// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/entity/proto/entity_service.proto

package entity

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationEntityCreateEntity      = "/manager.api.entity.Entity/CreateEntity"
	OperationEntityCreateEntityField = "/manager.api.entity.Entity/CreateEntityField"
	OperationEntityCreateEntityRule  = "/manager.api.entity.Entity/CreateEntityRule"
	OperationEntityDeleteEntity      = "/manager.api.entity.Entity/DeleteEntity"
	OperationEntityDeleteEntityField = "/manager.api.entity.Entity/DeleteEntityField"
	OperationEntityDeleteEntityRule  = "/manager.api.entity.Entity/DeleteEntityRule"
	OperationEntityImportEntity      = "/manager.api.entity.Entity/ImportEntity"
	OperationEntityListEntity        = "/manager.api.entity.Entity/ListEntity"
	OperationEntityListEntityField   = "/manager.api.entity.Entity/ListEntityField"
	OperationEntityListEntityRule    = "/manager.api.entity.Entity/ListEntityRule"
	OperationEntityLoadEntity        = "/manager.api.entity.Entity/LoadEntity"
	OperationEntityUpdateEntity      = "/manager.api.entity.Entity/UpdateEntity"
	OperationEntityUpdateEntityField = "/manager.api.entity.Entity/UpdateEntityField"
	OperationEntityUpdateEntityRule  = "/manager.api.entity.Entity/UpdateEntityRule"
)

type EntityHTTPServer interface {
	// CreateEntity CreateEntity 创建部门信息
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityReply, error)
	// CreateEntityField CreateEntityField 创建部门分类
	CreateEntityField(context.Context, *CreateEntityFieldRequest) (*CreateEntityFieldReply, error)
	// CreateEntityRule CreateEntityRule 创建实体规则
	CreateEntityRule(context.Context, *CreateEntityRuleRequest) (*CreateEntityRuleReply, error)
	// DeleteEntity DeleteEntity 删除部门信息
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityReply, error)
	// DeleteEntityField DeleteEntityField 删除部门分类
	DeleteEntityField(context.Context, *DeleteEntityFieldRequest) (*DeleteEntityFieldReply, error)
	// DeleteEntityRule DeleteEntityRule 删除实体规则
	DeleteEntityRule(context.Context, *DeleteEntityRuleRequest) (*DeleteEntityRuleReply, error)
	// ImportEntity ImportEntity 载入全部系统的实体
	ImportEntity(context.Context, *ImportEntityRequest) (*emptypb.Empty, error)
	// ListEntity ListEntity 获取部门信息列表
	ListEntity(context.Context, *ListEntityRequest) (*ListEntityReply, error)
	// ListEntityField ListEntityField 获取部门分类列表
	ListEntityField(context.Context, *ListEntityFieldRequest) (*ListEntityFieldReply, error)
	// ListEntityRule ListEntityRule 获取实体规则列表
	ListEntityRule(context.Context, *ListEntityRuleRequest) (*ListEntityRuleReply, error)
	// LoadEntity LoadEntity 载入全部系统的实体
	LoadEntity(context.Context, *emptypb.Empty) (*LoadEntityReply, error)
	// UpdateEntity UpdateEntity 更新部门信息
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityReply, error)
	// UpdateEntityField UpdateEntityField 更新部门分类
	UpdateEntityField(context.Context, *UpdateEntityFieldRequest) (*UpdateEntityFieldReply, error)
	// UpdateEntityRule UpdateEntityRule 更新实体规则
	UpdateEntityRule(context.Context, *UpdateEntityRuleRequest) (*UpdateEntityRuleReply, error)
}

func RegisterEntityHTTPServer(s *http.Server, srv EntityHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/load/entities", _Entity_LoadEntity0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/import/entities", _Entity_ImportEntity0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/entities", _Entity_ListEntity0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/entity", _Entity_CreateEntity0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/entity", _Entity_UpdateEntity0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/entity", _Entity_DeleteEntity0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/entity/fields", _Entity_ListEntityField0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/entity/field", _Entity_CreateEntityField0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/entity/field", _Entity_UpdateEntityField0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/entity/field", _Entity_DeleteEntityField0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/entity/rules", _Entity_ListEntityRule0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/entity/rule", _Entity_CreateEntityRule0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/entity/rule", _Entity_UpdateEntityRule0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/entity/rule", _Entity_DeleteEntityRule0_HTTP_Handler(srv))
}

func _Entity_LoadEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityLoadEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.LoadEntity(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadEntityReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_ImportEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityImportEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ImportEntity(ctx, req.(*ImportEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Entity_ListEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEntityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityListEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListEntity(ctx, req.(*ListEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEntityReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_CreateEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityCreateEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateEntity(ctx, req.(*CreateEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEntityReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_UpdateEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityUpdateEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEntity(ctx, req.(*UpdateEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEntityReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_DeleteEntity0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEntityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityDeleteEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEntity(ctx, req.(*DeleteEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEntityReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_ListEntityField0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEntityFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityListEntityField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListEntityField(ctx, req.(*ListEntityFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEntityFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_CreateEntityField0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEntityFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityCreateEntityField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateEntityField(ctx, req.(*CreateEntityFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEntityFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_UpdateEntityField0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEntityFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityUpdateEntityField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEntityField(ctx, req.(*UpdateEntityFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEntityFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_DeleteEntityField0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEntityFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityDeleteEntityField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEntityField(ctx, req.(*DeleteEntityFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEntityFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_ListEntityRule0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEntityRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityListEntityRule)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListEntityRule(ctx, req.(*ListEntityRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEntityRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_CreateEntityRule0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEntityRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityCreateEntityRule)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateEntityRule(ctx, req.(*CreateEntityRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEntityRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_UpdateEntityRule0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEntityRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityUpdateEntityRule)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEntityRule(ctx, req.(*UpdateEntityRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEntityRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Entity_DeleteEntityRule0_HTTP_Handler(srv EntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEntityRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEntityDeleteEntityRule)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEntityRule(ctx, req.(*DeleteEntityRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEntityRuleReply)
		return ctx.Result(200, reply)
	}
}

type EntityHTTPClient interface {
	CreateEntity(ctx context.Context, req *CreateEntityRequest, opts ...http.CallOption) (rsp *CreateEntityReply, err error)
	CreateEntityField(ctx context.Context, req *CreateEntityFieldRequest, opts ...http.CallOption) (rsp *CreateEntityFieldReply, err error)
	CreateEntityRule(ctx context.Context, req *CreateEntityRuleRequest, opts ...http.CallOption) (rsp *CreateEntityRuleReply, err error)
	DeleteEntity(ctx context.Context, req *DeleteEntityRequest, opts ...http.CallOption) (rsp *DeleteEntityReply, err error)
	DeleteEntityField(ctx context.Context, req *DeleteEntityFieldRequest, opts ...http.CallOption) (rsp *DeleteEntityFieldReply, err error)
	DeleteEntityRule(ctx context.Context, req *DeleteEntityRuleRequest, opts ...http.CallOption) (rsp *DeleteEntityRuleReply, err error)
	ImportEntity(ctx context.Context, req *ImportEntityRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ListEntity(ctx context.Context, req *ListEntityRequest, opts ...http.CallOption) (rsp *ListEntityReply, err error)
	ListEntityField(ctx context.Context, req *ListEntityFieldRequest, opts ...http.CallOption) (rsp *ListEntityFieldReply, err error)
	ListEntityRule(ctx context.Context, req *ListEntityRuleRequest, opts ...http.CallOption) (rsp *ListEntityRuleReply, err error)
	LoadEntity(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LoadEntityReply, err error)
	UpdateEntity(ctx context.Context, req *UpdateEntityRequest, opts ...http.CallOption) (rsp *UpdateEntityReply, err error)
	UpdateEntityField(ctx context.Context, req *UpdateEntityFieldRequest, opts ...http.CallOption) (rsp *UpdateEntityFieldReply, err error)
	UpdateEntityRule(ctx context.Context, req *UpdateEntityRuleRequest, opts ...http.CallOption) (rsp *UpdateEntityRuleReply, err error)
}

type EntityHTTPClientImpl struct {
	cc *http.Client
}

func NewEntityHTTPClient(client *http.Client) EntityHTTPClient {
	return &EntityHTTPClientImpl{client}
}

func (c *EntityHTTPClientImpl) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...http.CallOption) (*CreateEntityReply, error) {
	var out CreateEntityReply
	pattern := "/manager/api/v1/entity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityCreateEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) CreateEntityField(ctx context.Context, in *CreateEntityFieldRequest, opts ...http.CallOption) (*CreateEntityFieldReply, error) {
	var out CreateEntityFieldReply
	pattern := "/manager/api/v1/entity/field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityCreateEntityField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) CreateEntityRule(ctx context.Context, in *CreateEntityRuleRequest, opts ...http.CallOption) (*CreateEntityRuleReply, error) {
	var out CreateEntityRuleReply
	pattern := "/manager/api/v1/entity/rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityCreateEntityRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...http.CallOption) (*DeleteEntityReply, error) {
	var out DeleteEntityReply
	pattern := "/manager/api/v1/entity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityDeleteEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) DeleteEntityField(ctx context.Context, in *DeleteEntityFieldRequest, opts ...http.CallOption) (*DeleteEntityFieldReply, error) {
	var out DeleteEntityFieldReply
	pattern := "/manager/api/v1/entity/field"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityDeleteEntityField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) DeleteEntityRule(ctx context.Context, in *DeleteEntityRuleRequest, opts ...http.CallOption) (*DeleteEntityRuleReply, error) {
	var out DeleteEntityRuleReply
	pattern := "/manager/api/v1/entity/rule"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityDeleteEntityRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) ImportEntity(ctx context.Context, in *ImportEntityRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/api/v1/import/entities"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityImportEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) ListEntity(ctx context.Context, in *ListEntityRequest, opts ...http.CallOption) (*ListEntityReply, error) {
	var out ListEntityReply
	pattern := "/manager/api/v1/entities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityListEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) ListEntityField(ctx context.Context, in *ListEntityFieldRequest, opts ...http.CallOption) (*ListEntityFieldReply, error) {
	var out ListEntityFieldReply
	pattern := "/manager/api/v1/entity/fields"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityListEntityField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) ListEntityRule(ctx context.Context, in *ListEntityRuleRequest, opts ...http.CallOption) (*ListEntityRuleReply, error) {
	var out ListEntityRuleReply
	pattern := "/manager/api/v1/entity/rules"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityListEntityRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) LoadEntity(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LoadEntityReply, error) {
	var out LoadEntityReply
	pattern := "/manager/api/v1/load/entities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEntityLoadEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...http.CallOption) (*UpdateEntityReply, error) {
	var out UpdateEntityReply
	pattern := "/manager/api/v1/entity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityUpdateEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) UpdateEntityField(ctx context.Context, in *UpdateEntityFieldRequest, opts ...http.CallOption) (*UpdateEntityFieldReply, error) {
	var out UpdateEntityFieldReply
	pattern := "/manager/api/v1/entity/field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityUpdateEntityField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EntityHTTPClientImpl) UpdateEntityRule(ctx context.Context, in *UpdateEntityRuleRequest, opts ...http.CallOption) (*UpdateEntityRuleReply, error) {
	var out UpdateEntityRuleReply
	pattern := "/manager/api/v1/entity/rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEntityUpdateEntityRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
