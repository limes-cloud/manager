// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/entity/proto/entity_service.proto

package entity

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Entity_LoadEntity_FullMethodName        = "/manager.api.entity.Entity/LoadEntity"
	Entity_ImportEntity_FullMethodName      = "/manager.api.entity.Entity/ImportEntity"
	Entity_ListEntity_FullMethodName        = "/manager.api.entity.Entity/ListEntity"
	Entity_CreateEntity_FullMethodName      = "/manager.api.entity.Entity/CreateEntity"
	Entity_UpdateEntity_FullMethodName      = "/manager.api.entity.Entity/UpdateEntity"
	Entity_DeleteEntity_FullMethodName      = "/manager.api.entity.Entity/DeleteEntity"
	Entity_ListEntityField_FullMethodName   = "/manager.api.entity.Entity/ListEntityField"
	Entity_CreateEntityField_FullMethodName = "/manager.api.entity.Entity/CreateEntityField"
	Entity_UpdateEntityField_FullMethodName = "/manager.api.entity.Entity/UpdateEntityField"
	Entity_DeleteEntityField_FullMethodName = "/manager.api.entity.Entity/DeleteEntityField"
	Entity_ListEntityRule_FullMethodName    = "/manager.api.entity.Entity/ListEntityRule"
	Entity_CreateEntityRule_FullMethodName  = "/manager.api.entity.Entity/CreateEntityRule"
	Entity_UpdateEntityRule_FullMethodName  = "/manager.api.entity.Entity/UpdateEntityRule"
	Entity_DeleteEntityRule_FullMethodName  = "/manager.api.entity.Entity/DeleteEntityRule"
)

// EntityClient is the client API for Entity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityClient interface {
	// LoadEntity 载入全部系统的实体
	LoadEntity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadEntityReply, error)
	// ImportEntity 载入全部系统的实体
	ImportEntity(ctx context.Context, in *ImportEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListEntity 获取部门信息列表
	ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityReply, error)
	// CreateEntity 创建部门信息
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityReply, error)
	// UpdateEntity 更新部门信息
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityReply, error)
	// DeleteEntity 删除部门信息
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityReply, error)
	// ListEntityField 获取部门分类列表
	ListEntityField(ctx context.Context, in *ListEntityFieldRequest, opts ...grpc.CallOption) (*ListEntityFieldReply, error)
	// CreateEntityField 创建部门分类
	CreateEntityField(ctx context.Context, in *CreateEntityFieldRequest, opts ...grpc.CallOption) (*CreateEntityFieldReply, error)
	// UpdateEntityField 更新部门分类
	UpdateEntityField(ctx context.Context, in *UpdateEntityFieldRequest, opts ...grpc.CallOption) (*UpdateEntityFieldReply, error)
	// DeleteEntityField 删除部门分类
	DeleteEntityField(ctx context.Context, in *DeleteEntityFieldRequest, opts ...grpc.CallOption) (*DeleteEntityFieldReply, error)
	// ListEntityRule 获取实体规则列表
	ListEntityRule(ctx context.Context, in *ListEntityRuleRequest, opts ...grpc.CallOption) (*ListEntityRuleReply, error)
	// CreateEntityRule 创建实体规则
	CreateEntityRule(ctx context.Context, in *CreateEntityRuleRequest, opts ...grpc.CallOption) (*CreateEntityRuleReply, error)
	// UpdateEntityRule 更新实体规则
	UpdateEntityRule(ctx context.Context, in *UpdateEntityRuleRequest, opts ...grpc.CallOption) (*UpdateEntityRuleReply, error)
	// DeleteEntityRule 删除实体规则
	DeleteEntityRule(ctx context.Context, in *DeleteEntityRuleRequest, opts ...grpc.CallOption) (*DeleteEntityRuleReply, error)
}

type entityClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityClient(cc grpc.ClientConnInterface) EntityClient {
	return &entityClient{cc}
}

func (c *entityClient) LoadEntity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadEntityReply, error) {
	out := new(LoadEntityReply)
	err := c.cc.Invoke(ctx, Entity_LoadEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ImportEntity(ctx context.Context, in *ImportEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Entity_ImportEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityReply, error) {
	out := new(ListEntityReply)
	err := c.cc.Invoke(ctx, Entity_ListEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityReply, error) {
	out := new(CreateEntityReply)
	err := c.cc.Invoke(ctx, Entity_CreateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityReply, error) {
	out := new(UpdateEntityReply)
	err := c.cc.Invoke(ctx, Entity_UpdateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityReply, error) {
	out := new(DeleteEntityReply)
	err := c.cc.Invoke(ctx, Entity_DeleteEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListEntityField(ctx context.Context, in *ListEntityFieldRequest, opts ...grpc.CallOption) (*ListEntityFieldReply, error) {
	out := new(ListEntityFieldReply)
	err := c.cc.Invoke(ctx, Entity_ListEntityField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) CreateEntityField(ctx context.Context, in *CreateEntityFieldRequest, opts ...grpc.CallOption) (*CreateEntityFieldReply, error) {
	out := new(CreateEntityFieldReply)
	err := c.cc.Invoke(ctx, Entity_CreateEntityField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntityField(ctx context.Context, in *UpdateEntityFieldRequest, opts ...grpc.CallOption) (*UpdateEntityFieldReply, error) {
	out := new(UpdateEntityFieldReply)
	err := c.cc.Invoke(ctx, Entity_UpdateEntityField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntityField(ctx context.Context, in *DeleteEntityFieldRequest, opts ...grpc.CallOption) (*DeleteEntityFieldReply, error) {
	out := new(DeleteEntityFieldReply)
	err := c.cc.Invoke(ctx, Entity_DeleteEntityField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListEntityRule(ctx context.Context, in *ListEntityRuleRequest, opts ...grpc.CallOption) (*ListEntityRuleReply, error) {
	out := new(ListEntityRuleReply)
	err := c.cc.Invoke(ctx, Entity_ListEntityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) CreateEntityRule(ctx context.Context, in *CreateEntityRuleRequest, opts ...grpc.CallOption) (*CreateEntityRuleReply, error) {
	out := new(CreateEntityRuleReply)
	err := c.cc.Invoke(ctx, Entity_CreateEntityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntityRule(ctx context.Context, in *UpdateEntityRuleRequest, opts ...grpc.CallOption) (*UpdateEntityRuleReply, error) {
	out := new(UpdateEntityRuleReply)
	err := c.cc.Invoke(ctx, Entity_UpdateEntityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntityRule(ctx context.Context, in *DeleteEntityRuleRequest, opts ...grpc.CallOption) (*DeleteEntityRuleReply, error) {
	out := new(DeleteEntityRuleReply)
	err := c.cc.Invoke(ctx, Entity_DeleteEntityRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServer is the server API for Entity service.
// All implementations must embed UnimplementedEntityServer
// for forward compatibility
type EntityServer interface {
	// LoadEntity 载入全部系统的实体
	LoadEntity(context.Context, *emptypb.Empty) (*LoadEntityReply, error)
	// ImportEntity 载入全部系统的实体
	ImportEntity(context.Context, *ImportEntityRequest) (*emptypb.Empty, error)
	// ListEntity 获取部门信息列表
	ListEntity(context.Context, *ListEntityRequest) (*ListEntityReply, error)
	// CreateEntity 创建部门信息
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityReply, error)
	// UpdateEntity 更新部门信息
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityReply, error)
	// DeleteEntity 删除部门信息
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityReply, error)
	// ListEntityField 获取部门分类列表
	ListEntityField(context.Context, *ListEntityFieldRequest) (*ListEntityFieldReply, error)
	// CreateEntityField 创建部门分类
	CreateEntityField(context.Context, *CreateEntityFieldRequest) (*CreateEntityFieldReply, error)
	// UpdateEntityField 更新部门分类
	UpdateEntityField(context.Context, *UpdateEntityFieldRequest) (*UpdateEntityFieldReply, error)
	// DeleteEntityField 删除部门分类
	DeleteEntityField(context.Context, *DeleteEntityFieldRequest) (*DeleteEntityFieldReply, error)
	// ListEntityRule 获取实体规则列表
	ListEntityRule(context.Context, *ListEntityRuleRequest) (*ListEntityRuleReply, error)
	// CreateEntityRule 创建实体规则
	CreateEntityRule(context.Context, *CreateEntityRuleRequest) (*CreateEntityRuleReply, error)
	// UpdateEntityRule 更新实体规则
	UpdateEntityRule(context.Context, *UpdateEntityRuleRequest) (*UpdateEntityRuleReply, error)
	// DeleteEntityRule 删除实体规则
	DeleteEntityRule(context.Context, *DeleteEntityRuleRequest) (*DeleteEntityRuleReply, error)
	mustEmbedUnimplementedEntityServer()
}

// UnimplementedEntityServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServer struct{}

func (UnimplementedEntityServer) LoadEntity(context.Context, *emptypb.Empty) (*LoadEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadEntity not implemented")
}

func (UnimplementedEntityServer) ImportEntity(context.Context, *ImportEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportEntity not implemented")
}

func (UnimplementedEntityServer) ListEntity(context.Context, *ListEntityRequest) (*ListEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}

func (UnimplementedEntityServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}

func (UnimplementedEntityServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}

func (UnimplementedEntityServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}

func (UnimplementedEntityServer) ListEntityField(context.Context, *ListEntityFieldRequest) (*ListEntityFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityField not implemented")
}

func (UnimplementedEntityServer) CreateEntityField(context.Context, *CreateEntityFieldRequest) (*CreateEntityFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityField not implemented")
}

func (UnimplementedEntityServer) UpdateEntityField(context.Context, *UpdateEntityFieldRequest) (*UpdateEntityFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityField not implemented")
}

func (UnimplementedEntityServer) DeleteEntityField(context.Context, *DeleteEntityFieldRequest) (*DeleteEntityFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityField not implemented")
}

func (UnimplementedEntityServer) ListEntityRule(context.Context, *ListEntityRuleRequest) (*ListEntityRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityRule not implemented")
}

func (UnimplementedEntityServer) CreateEntityRule(context.Context, *CreateEntityRuleRequest) (*CreateEntityRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityRule not implemented")
}

func (UnimplementedEntityServer) UpdateEntityRule(context.Context, *UpdateEntityRuleRequest) (*UpdateEntityRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityRule not implemented")
}

func (UnimplementedEntityServer) DeleteEntityRule(context.Context, *DeleteEntityRuleRequest) (*DeleteEntityRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityRule not implemented")
}
func (UnimplementedEntityServer) mustEmbedUnimplementedEntityServer() {}

// UnsafeEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServer will
// result in compilation errors.
type UnsafeEntityServer interface {
	mustEmbedUnimplementedEntityServer()
}

func RegisterEntityServer(s grpc.ServiceRegistrar, srv EntityServer) {
	s.RegisterService(&Entity_ServiceDesc, srv)
}

func _Entity_LoadEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).LoadEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_LoadEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).LoadEntity(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ImportEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ImportEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_ImportEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ImportEntity(ctx, req.(*ImportEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_ListEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListEntity(ctx, req.(*ListEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListEntityField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListEntityField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_ListEntityField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListEntityField(ctx, req.(*ListEntityFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_CreateEntityField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).CreateEntityField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_CreateEntityField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).CreateEntityField(ctx, req.(*CreateEntityFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntityField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntityField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_UpdateEntityField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntityField(ctx, req.(*UpdateEntityFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntityField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntityField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_DeleteEntityField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntityField(ctx, req.(*DeleteEntityFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListEntityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListEntityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_ListEntityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListEntityRule(ctx, req.(*ListEntityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_CreateEntityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).CreateEntityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_CreateEntityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).CreateEntityRule(ctx, req.(*CreateEntityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_UpdateEntityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntityRule(ctx, req.(*UpdateEntityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entity_DeleteEntityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntityRule(ctx, req.(*DeleteEntityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entity_ServiceDesc is the grpc.ServiceDesc for Entity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.entity.Entity",
	HandlerType: (*EntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadEntity",
			Handler:    _Entity_LoadEntity_Handler,
		},
		{
			MethodName: "ImportEntity",
			Handler:    _Entity_ImportEntity_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _Entity_ListEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Entity_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _Entity_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Entity_DeleteEntity_Handler,
		},
		{
			MethodName: "ListEntityField",
			Handler:    _Entity_ListEntityField_Handler,
		},
		{
			MethodName: "CreateEntityField",
			Handler:    _Entity_CreateEntityField_Handler,
		},
		{
			MethodName: "UpdateEntityField",
			Handler:    _Entity_UpdateEntityField_Handler,
		},
		{
			MethodName: "DeleteEntityField",
			Handler:    _Entity_DeleteEntityField_Handler,
		},
		{
			MethodName: "ListEntityRule",
			Handler:    _Entity_ListEntityRule_Handler,
		},
		{
			MethodName: "CreateEntityRule",
			Handler:    _Entity_CreateEntityRule_Handler,
		},
		{
			MethodName: "UpdateEntityRule",
			Handler:    _Entity_UpdateEntityRule_Handler,
		},
		{
			MethodName: "DeleteEntityRule",
			Handler:    _Entity_DeleteEntityRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/entity/proto/entity_service.proto",
}
