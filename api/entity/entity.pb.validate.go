// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/entity/proto/entity.proto

package entity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListEntityRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityRequestMultiError, or nil if none found.
func (m *ListEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListEntityRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListEntityRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() < 1 {
		err := ListEntityRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		if _, ok := _ListEntityRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListEntityRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.OrderBy != nil {
		if _, ok := _ListEntityRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListEntityRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Database != nil {
		// no validation rules for Database
	}

	if len(errors) > 0 {
		return ListEntityRequestMultiError(errors)
	}

	return nil
}

// ListEntityRequestMultiError is an error wrapping multiple validation errors
// returned by ListEntityRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityRequestMultiError) AllErrors() []error { return m }

// ListEntityRequestValidationError is the validation error returned by
// ListEntityRequest.Validate if the designated constraints aren't met.
type ListEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityRequestValidationError) ErrorName() string {
	return "ListEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityRequestValidationError{}

var _ListEntityRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListEntityRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListEntityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityReplyMultiError, or nil if none found.
func (m *ListEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntityReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntityReplyMultiError(errors)
	}

	return nil
}

// ListEntityReplyMultiError is an error wrapping multiple validation errors
// returned by ListEntityReply.ValidateAll() if the designated constraints
// aren't met.
type ListEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityReplyMultiError) AllErrors() []error { return m }

// ListEntityReplyValidationError is the validation error returned by
// ListEntityReply.Validate if the designated constraints aren't met.
type ListEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityReplyValidationError) ErrorName() string { return "ListEntityReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityReplyValidationError{}

// Validate checks the field values on LoadEntityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadEntityReplyMultiError, or nil if none found.
func (m *LoadEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadEntityReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoadEntityReplyMultiError(errors)
	}

	return nil
}

// LoadEntityReplyMultiError is an error wrapping multiple validation errors
// returned by LoadEntityReply.ValidateAll() if the designated constraints
// aren't met.
type LoadEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadEntityReplyMultiError) AllErrors() []error { return m }

// LoadEntityReplyValidationError is the validation error returned by
// LoadEntityReply.Validate if the designated constraints aren't met.
type LoadEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadEntityReplyValidationError) ErrorName() string { return "LoadEntityReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoadEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadEntityReplyValidationError{}

// Validate checks the field values on ImportEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportEntityRequestMultiError, or nil if none found.
func (m *ImportEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportEntityRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportEntityRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportEntityRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportEntityRequestMultiError(errors)
	}

	return nil
}

// ImportEntityRequestMultiError is an error wrapping multiple validation
// errors returned by ImportEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportEntityRequestMultiError) AllErrors() []error { return m }

// ImportEntityRequestValidationError is the validation error returned by
// ImportEntityRequest.Validate if the designated constraints aren't met.
type ImportEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportEntityRequestValidationError) ErrorName() string {
	return "ImportEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportEntityRequestValidationError{}

// Validate checks the field values on CreateEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityRequestMultiError, or nil if none found.
func (m *CreateEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() < 1 {
		err := CreateEntityRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDatabase()); l < 1 || l > 64 {
		err := CreateEntityRequestValidationError{
			field:  "Database",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateEntityRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetComment()); l < 1 || l > 128 {
		err := CreateEntityRequestValidationError{
			field:  "Comment",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEntityRequestMultiError(errors)
	}

	return nil
}

// CreateEntityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityRequestMultiError) AllErrors() []error { return m }

// CreateEntityRequestValidationError is the validation error returned by
// CreateEntityRequest.Validate if the designated constraints aren't met.
type CreateEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityRequestValidationError) ErrorName() string {
	return "CreateEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityRequestValidationError{}

// Validate checks the field values on CreateEntityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityReplyMultiError, or nil if none found.
func (m *CreateEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEntityReplyMultiError(errors)
	}

	return nil
}

// CreateEntityReplyMultiError is an error wrapping multiple validation errors
// returned by CreateEntityReply.ValidateAll() if the designated constraints
// aren't met.
type CreateEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityReplyMultiError) AllErrors() []error { return m }

// CreateEntityReplyValidationError is the validation error returned by
// CreateEntityReply.Validate if the designated constraints aren't met.
type CreateEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityReplyValidationError) ErrorName() string {
	return "CreateEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityReplyValidationError{}

// Validate checks the field values on UpdateEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityRequestMultiError, or nil if none found.
func (m *UpdateEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Database != nil {
		if l := utf8.RuneCountInString(m.GetDatabase()); l < 1 || l > 64 {
			err := UpdateEntityRequestValidationError{
				field:  "Database",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
			err := UpdateEntityRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Comment != nil {
		if l := utf8.RuneCountInString(m.GetComment()); l < 1 || l > 128 {
			err := UpdateEntityRequestValidationError{
				field:  "Comment",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateEntityRequestMultiError(errors)
	}

	return nil
}

// UpdateEntityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityRequestMultiError) AllErrors() []error { return m }

// UpdateEntityRequestValidationError is the validation error returned by
// UpdateEntityRequest.Validate if the designated constraints aren't met.
type UpdateEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityRequestValidationError) ErrorName() string {
	return "UpdateEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityRequestValidationError{}

// Validate checks the field values on UpdateEntityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityReplyMultiError, or nil if none found.
func (m *UpdateEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEntityReplyMultiError(errors)
	}

	return nil
}

// UpdateEntityReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateEntityReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityReplyMultiError) AllErrors() []error { return m }

// UpdateEntityReplyValidationError is the validation error returned by
// UpdateEntityReply.Validate if the designated constraints aren't met.
type UpdateEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityReplyValidationError) ErrorName() string {
	return "UpdateEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityReplyValidationError{}

// Validate checks the field values on DeleteEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityRequestMultiError, or nil if none found.
func (m *DeleteEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEntityRequestMultiError(errors)
	}

	return nil
}

// DeleteEntityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityRequestMultiError) AllErrors() []error { return m }

// DeleteEntityRequestValidationError is the validation error returned by
// DeleteEntityRequest.Validate if the designated constraints aren't met.
type DeleteEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityRequestValidationError) ErrorName() string {
	return "DeleteEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityRequestValidationError{}

// Validate checks the field values on DeleteEntityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityReplyMultiError, or nil if none found.
func (m *DeleteEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEntityReplyMultiError(errors)
	}

	return nil
}

// DeleteEntityReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteEntityReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityReplyMultiError) AllErrors() []error { return m }

// DeleteEntityReplyValidationError is the validation error returned by
// DeleteEntityReply.Validate if the designated constraints aren't met.
type DeleteEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityReplyValidationError) ErrorName() string {
	return "DeleteEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityReplyValidationError{}

// Validate checks the field values on ListEntityFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntityFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityFieldRequestMultiError, or nil if none found.
func (m *ListEntityFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() < 1 {
		err := ListEntityFieldRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListEntityFieldRequestMultiError(errors)
	}

	return nil
}

// ListEntityFieldRequestMultiError is an error wrapping multiple validation
// errors returned by ListEntityFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEntityFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityFieldRequestMultiError) AllErrors() []error { return m }

// ListEntityFieldRequestValidationError is the validation error returned by
// ListEntityFieldRequest.Validate if the designated constraints aren't met.
type ListEntityFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityFieldRequestValidationError) ErrorName() string {
	return "ListEntityFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityFieldRequestValidationError{}

// Validate checks the field values on EntityField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityFieldMultiError, or
// nil if none found.
func (m *EntityField) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EntityId

	// no validation rules for Name

	// no validation rules for Comment

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EntityFieldMultiError(errors)
	}

	return nil
}

// EntityFieldMultiError is an error wrapping multiple validation errors
// returned by EntityField.ValidateAll() if the designated constraints aren't met.
type EntityFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityFieldMultiError) AllErrors() []error { return m }

// EntityFieldValidationError is the validation error returned by
// EntityField.Validate if the designated constraints aren't met.
type EntityFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityFieldValidationError) ErrorName() string { return "EntityFieldValidationError" }

// Error satisfies the builtin error interface
func (e EntityFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityFieldValidationError{}

// Validate checks the field values on ListEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntityFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityFieldReplyMultiError, or nil if none found.
func (m *ListEntityFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntityFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntityFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntityFieldReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntityFieldReplyMultiError(errors)
	}

	return nil
}

// ListEntityFieldReplyMultiError is an error wrapping multiple validation
// errors returned by ListEntityFieldReply.ValidateAll() if the designated
// constraints aren't met.
type ListEntityFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityFieldReplyMultiError) AllErrors() []error { return m }

// ListEntityFieldReplyValidationError is the validation error returned by
// ListEntityFieldReply.Validate if the designated constraints aren't met.
type ListEntityFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityFieldReplyValidationError) ErrorName() string {
	return "ListEntityFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityFieldReplyValidationError{}

// Validate checks the field values on CreateEntityFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityFieldRequestMultiError, or nil if none found.
func (m *CreateEntityFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() < 1 {
		err := CreateEntityFieldRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateEntityFieldRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetComment()); l < 1 || l > 128 {
		err := CreateEntityFieldRequestValidationError{
			field:  "Comment",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEntityFieldRequestMultiError(errors)
	}

	return nil
}

// CreateEntityFieldRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEntityFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityFieldRequestMultiError) AllErrors() []error { return m }

// CreateEntityFieldRequestValidationError is the validation error returned by
// CreateEntityFieldRequest.Validate if the designated constraints aren't met.
type CreateEntityFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityFieldRequestValidationError) ErrorName() string {
	return "CreateEntityFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityFieldRequestValidationError{}

// Validate checks the field values on CreateEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityFieldReplyMultiError, or nil if none found.
func (m *CreateEntityFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEntityFieldReplyMultiError(errors)
	}

	return nil
}

// CreateEntityFieldReplyMultiError is an error wrapping multiple validation
// errors returned by CreateEntityFieldReply.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityFieldReplyMultiError) AllErrors() []error { return m }

// CreateEntityFieldReplyValidationError is the validation error returned by
// CreateEntityFieldReply.Validate if the designated constraints aren't met.
type CreateEntityFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityFieldReplyValidationError) ErrorName() string {
	return "CreateEntityFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityFieldReplyValidationError{}

// Validate checks the field values on UpdateEntityFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityFieldRequestMultiError, or nil if none found.
func (m *UpdateEntityFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEntityFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.EntityId != nil {
		if m.GetEntityId() < 1 {
			err := UpdateEntityFieldRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
			err := UpdateEntityFieldRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Comment != nil {
		if l := utf8.RuneCountInString(m.GetComment()); l < 1 || l > 128 {
			err := UpdateEntityFieldRequestValidationError{
				field:  "Comment",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateEntityFieldRequestMultiError(errors)
	}

	return nil
}

// UpdateEntityFieldRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEntityFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEntityFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityFieldRequestMultiError) AllErrors() []error { return m }

// UpdateEntityFieldRequestValidationError is the validation error returned by
// UpdateEntityFieldRequest.Validate if the designated constraints aren't met.
type UpdateEntityFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityFieldRequestValidationError) ErrorName() string {
	return "UpdateEntityFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityFieldRequestValidationError{}

// Validate checks the field values on UpdateEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityFieldReplyMultiError, or nil if none found.
func (m *UpdateEntityFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEntityFieldReplyMultiError(errors)
	}

	return nil
}

// UpdateEntityFieldReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateEntityFieldReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateEntityFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityFieldReplyMultiError) AllErrors() []error { return m }

// UpdateEntityFieldReplyValidationError is the validation error returned by
// UpdateEntityFieldReply.Validate if the designated constraints aren't met.
type UpdateEntityFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityFieldReplyValidationError) ErrorName() string {
	return "UpdateEntityFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityFieldReplyValidationError{}

// Validate checks the field values on DeleteEntityFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityFieldRequestMultiError, or nil if none found.
func (m *DeleteEntityFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteEntityFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEntityFieldRequestMultiError(errors)
	}

	return nil
}

// DeleteEntityFieldRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEntityFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEntityFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityFieldRequestMultiError) AllErrors() []error { return m }

// DeleteEntityFieldRequestValidationError is the validation error returned by
// DeleteEntityFieldRequest.Validate if the designated constraints aren't met.
type DeleteEntityFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityFieldRequestValidationError) ErrorName() string {
	return "DeleteEntityFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityFieldRequestValidationError{}

// Validate checks the field values on DeleteEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityFieldReplyMultiError, or nil if none found.
func (m *DeleteEntityFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEntityFieldReplyMultiError(errors)
	}

	return nil
}

// DeleteEntityFieldReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteEntityFieldReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteEntityFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityFieldReplyMultiError) AllErrors() []error { return m }

// DeleteEntityFieldReplyValidationError is the validation error returned by
// DeleteEntityFieldReply.Validate if the designated constraints aren't met.
type DeleteEntityFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityFieldReplyValidationError) ErrorName() string {
	return "DeleteEntityFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityFieldReplyValidationError{}

// Validate checks the field values on ListEntityRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntityRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityRuleRequestMultiError, or nil if none found.
func (m *ListEntityRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() < 1 {
		err := ListEntityRuleRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListEntityRuleRequestMultiError(errors)
	}

	return nil
}

// ListEntityRuleRequestMultiError is an error wrapping multiple validation
// errors returned by ListEntityRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEntityRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityRuleRequestMultiError) AllErrors() []error { return m }

// ListEntityRuleRequestValidationError is the validation error returned by
// ListEntityRuleRequest.Validate if the designated constraints aren't met.
type ListEntityRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityRuleRequestValidationError) ErrorName() string {
	return "ListEntityRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityRuleRequestValidationError{}

// Validate checks the field values on EntityRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityRuleMultiError, or
// nil if none found.
func (m *EntityRule) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EntityId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Expression

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EntityRuleMultiError(errors)
	}

	return nil
}

// EntityRuleMultiError is an error wrapping multiple validation errors
// returned by EntityRule.ValidateAll() if the designated constraints aren't met.
type EntityRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityRuleMultiError) AllErrors() []error { return m }

// EntityRuleValidationError is the validation error returned by
// EntityRule.Validate if the designated constraints aren't met.
type EntityRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityRuleValidationError) ErrorName() string { return "EntityRuleValidationError" }

// Error satisfies the builtin error interface
func (e EntityRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityRuleValidationError{}

// Validate checks the field values on ListEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntityRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityRuleReplyMultiError, or nil if none found.
func (m *ListEntityRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEntityRuleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEntityRuleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEntityRuleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEntityRuleReplyMultiError(errors)
	}

	return nil
}

// ListEntityRuleReplyMultiError is an error wrapping multiple validation
// errors returned by ListEntityRuleReply.ValidateAll() if the designated
// constraints aren't met.
type ListEntityRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityRuleReplyMultiError) AllErrors() []error { return m }

// ListEntityRuleReplyValidationError is the validation error returned by
// ListEntityRuleReply.Validate if the designated constraints aren't met.
type ListEntityRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityRuleReplyValidationError) ErrorName() string {
	return "ListEntityRuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityRuleReplyValidationError{}

// Validate checks the field values on CreateEntityRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityRuleRequestMultiError, or nil if none found.
func (m *CreateEntityRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() < 1 {
		err := CreateEntityRuleRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateEntityRuleRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := CreateEntityRuleRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpression()) < 1 {
		err := CreateEntityRuleRequestValidationError{
			field:  "Expression",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEntityRuleRequestMultiError(errors)
	}

	return nil
}

// CreateEntityRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEntityRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityRuleRequestMultiError) AllErrors() []error { return m }

// CreateEntityRuleRequestValidationError is the validation error returned by
// CreateEntityRuleRequest.Validate if the designated constraints aren't met.
type CreateEntityRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityRuleRequestValidationError) ErrorName() string {
	return "CreateEntityRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityRuleRequestValidationError{}

// Validate checks the field values on CreateEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEntityRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEntityRuleReplyMultiError, or nil if none found.
func (m *CreateEntityRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEntityRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEntityRuleReplyMultiError(errors)
	}

	return nil
}

// CreateEntityRuleReplyMultiError is an error wrapping multiple validation
// errors returned by CreateEntityRuleReply.ValidateAll() if the designated
// constraints aren't met.
type CreateEntityRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEntityRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEntityRuleReplyMultiError) AllErrors() []error { return m }

// CreateEntityRuleReplyValidationError is the validation error returned by
// CreateEntityRuleReply.Validate if the designated constraints aren't met.
type CreateEntityRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEntityRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEntityRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEntityRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEntityRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEntityRuleReplyValidationError) ErrorName() string {
	return "CreateEntityRuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEntityRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEntityRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEntityRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEntityRuleReplyValidationError{}

// Validate checks the field values on UpdateEntityRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityRuleRequestMultiError, or nil if none found.
func (m *UpdateEntityRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEntityRuleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.EntityId != nil {
		if m.GetEntityId() < 1 {
			err := UpdateEntityRuleRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
			err := UpdateEntityRuleRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Expression != nil {
		if utf8.RuneCountInString(m.GetExpression()) < 1 {
			err := UpdateEntityRuleRequestValidationError{
				field:  "Expression",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Description != nil {
		if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
			err := UpdateEntityRuleRequestValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateEntityRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateEntityRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEntityRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEntityRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityRuleRequestMultiError) AllErrors() []error { return m }

// UpdateEntityRuleRequestValidationError is the validation error returned by
// UpdateEntityRuleRequest.Validate if the designated constraints aren't met.
type UpdateEntityRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityRuleRequestValidationError) ErrorName() string {
	return "UpdateEntityRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityRuleRequestValidationError{}

// Validate checks the field values on UpdateEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEntityRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEntityRuleReplyMultiError, or nil if none found.
func (m *UpdateEntityRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEntityRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEntityRuleReplyMultiError(errors)
	}

	return nil
}

// UpdateEntityRuleReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateEntityRuleReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateEntityRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEntityRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEntityRuleReplyMultiError) AllErrors() []error { return m }

// UpdateEntityRuleReplyValidationError is the validation error returned by
// UpdateEntityRuleReply.Validate if the designated constraints aren't met.
type UpdateEntityRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEntityRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEntityRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEntityRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEntityRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEntityRuleReplyValidationError) ErrorName() string {
	return "UpdateEntityRuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEntityRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEntityRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEntityRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEntityRuleReplyValidationError{}

// Validate checks the field values on DeleteEntityRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityRuleRequestMultiError, or nil if none found.
func (m *DeleteEntityRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteEntityRuleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEntityRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteEntityRuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEntityRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEntityRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityRuleRequestMultiError) AllErrors() []error { return m }

// DeleteEntityRuleRequestValidationError is the validation error returned by
// DeleteEntityRuleRequest.Validate if the designated constraints aren't met.
type DeleteEntityRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityRuleRequestValidationError) ErrorName() string {
	return "DeleteEntityRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityRuleRequestValidationError{}

// Validate checks the field values on DeleteEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEntityRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEntityRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEntityRuleReplyMultiError, or nil if none found.
func (m *DeleteEntityRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEntityRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEntityRuleReplyMultiError(errors)
	}

	return nil
}

// DeleteEntityRuleReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteEntityRuleReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteEntityRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEntityRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEntityRuleReplyMultiError) AllErrors() []error { return m }

// DeleteEntityRuleReplyValidationError is the validation error returned by
// DeleteEntityRuleReply.Validate if the designated constraints aren't met.
type DeleteEntityRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEntityRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEntityRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEntityRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEntityRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEntityRuleReplyValidationError) ErrorName() string {
	return "DeleteEntityRuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEntityRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEntityRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEntityRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEntityRuleReplyValidationError{}

// Validate checks the field values on ListEntityReply_Entity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEntityReply_Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEntityReply_Entity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEntityReply_EntityMultiError, or nil if none found.
func (m *ListEntityReply_Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEntityReply_Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for Database

	// no validation rules for Name

	// no validation rules for Comment

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ListEntityReply_EntityMultiError(errors)
	}

	return nil
}

// ListEntityReply_EntityMultiError is an error wrapping multiple validation
// errors returned by ListEntityReply_Entity.ValidateAll() if the designated
// constraints aren't met.
type ListEntityReply_EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEntityReply_EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEntityReply_EntityMultiError) AllErrors() []error { return m }

// ListEntityReply_EntityValidationError is the validation error returned by
// ListEntityReply_Entity.Validate if the designated constraints aren't met.
type ListEntityReply_EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEntityReply_EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEntityReply_EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEntityReply_EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEntityReply_EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEntityReply_EntityValidationError) ErrorName() string {
	return "ListEntityReply_EntityValidationError"
}

// Error satisfies the builtin error interface
func (e ListEntityReply_EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEntityReply_Entity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEntityReply_EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEntityReply_EntityValidationError{}

// Validate checks the field values on LoadEntityReply_EntityField with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadEntityReply_EntityField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadEntityReply_EntityField with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadEntityReply_EntityFieldMultiError, or nil if none found.
func (m *LoadEntityReply_EntityField) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadEntityReply_EntityField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Comment

	if len(errors) > 0 {
		return LoadEntityReply_EntityFieldMultiError(errors)
	}

	return nil
}

// LoadEntityReply_EntityFieldMultiError is an error wrapping multiple
// validation errors returned by LoadEntityReply_EntityField.ValidateAll() if
// the designated constraints aren't met.
type LoadEntityReply_EntityFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadEntityReply_EntityFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadEntityReply_EntityFieldMultiError) AllErrors() []error { return m }

// LoadEntityReply_EntityFieldValidationError is the validation error returned
// by LoadEntityReply_EntityField.Validate if the designated constraints
// aren't met.
type LoadEntityReply_EntityFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadEntityReply_EntityFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadEntityReply_EntityFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadEntityReply_EntityFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadEntityReply_EntityFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadEntityReply_EntityFieldValidationError) ErrorName() string {
	return "LoadEntityReply_EntityFieldValidationError"
}

// Error satisfies the builtin error interface
func (e LoadEntityReply_EntityFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadEntityReply_EntityField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadEntityReply_EntityFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadEntityReply_EntityFieldValidationError{}

// Validate checks the field values on LoadEntityReply_Entity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadEntityReply_Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadEntityReply_Entity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadEntityReply_EntityMultiError, or nil if none found.
func (m *LoadEntityReply_Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadEntityReply_Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Database

	// no validation rules for Name

	// no validation rules for Comment

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadEntityReply_EntityValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadEntityReply_EntityValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadEntityReply_EntityValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoadEntityReply_EntityMultiError(errors)
	}

	return nil
}

// LoadEntityReply_EntityMultiError is an error wrapping multiple validation
// errors returned by LoadEntityReply_Entity.ValidateAll() if the designated
// constraints aren't met.
type LoadEntityReply_EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadEntityReply_EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadEntityReply_EntityMultiError) AllErrors() []error { return m }

// LoadEntityReply_EntityValidationError is the validation error returned by
// LoadEntityReply_Entity.Validate if the designated constraints aren't met.
type LoadEntityReply_EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadEntityReply_EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadEntityReply_EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadEntityReply_EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadEntityReply_EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadEntityReply_EntityValidationError) ErrorName() string {
	return "LoadEntityReply_EntityValidationError"
}

// Error satisfies the builtin error interface
func (e LoadEntityReply_EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadEntityReply_Entity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadEntityReply_EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadEntityReply_EntityValidationError{}

// Validate checks the field values on ImportEntityRequest_EntityField with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportEntityRequest_EntityField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportEntityRequest_EntityField with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportEntityRequest_EntityFieldMultiError, or nil if none found.
func (m *ImportEntityRequest_EntityField) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportEntityRequest_EntityField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Comment

	if len(errors) > 0 {
		return ImportEntityRequest_EntityFieldMultiError(errors)
	}

	return nil
}

// ImportEntityRequest_EntityFieldMultiError is an error wrapping multiple
// validation errors returned by ImportEntityRequest_EntityField.ValidateAll()
// if the designated constraints aren't met.
type ImportEntityRequest_EntityFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportEntityRequest_EntityFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportEntityRequest_EntityFieldMultiError) AllErrors() []error { return m }

// ImportEntityRequest_EntityFieldValidationError is the validation error
// returned by ImportEntityRequest_EntityField.Validate if the designated
// constraints aren't met.
type ImportEntityRequest_EntityFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportEntityRequest_EntityFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportEntityRequest_EntityFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportEntityRequest_EntityFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportEntityRequest_EntityFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportEntityRequest_EntityFieldValidationError) ErrorName() string {
	return "ImportEntityRequest_EntityFieldValidationError"
}

// Error satisfies the builtin error interface
func (e ImportEntityRequest_EntityFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportEntityRequest_EntityField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportEntityRequest_EntityFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportEntityRequest_EntityFieldValidationError{}

// Validate checks the field values on ImportEntityRequest_Entity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportEntityRequest_Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportEntityRequest_Entity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportEntityRequest_EntityMultiError, or nil if none found.
func (m *ImportEntityRequest_Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportEntityRequest_Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Database

	// no validation rules for Name

	// no validation rules for Comment

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportEntityRequest_EntityValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportEntityRequest_EntityValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportEntityRequest_EntityValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportEntityRequest_EntityMultiError(errors)
	}

	return nil
}

// ImportEntityRequest_EntityMultiError is an error wrapping multiple
// validation errors returned by ImportEntityRequest_Entity.ValidateAll() if
// the designated constraints aren't met.
type ImportEntityRequest_EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportEntityRequest_EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportEntityRequest_EntityMultiError) AllErrors() []error { return m }

// ImportEntityRequest_EntityValidationError is the validation error returned
// by ImportEntityRequest_Entity.Validate if the designated constraints aren't met.
type ImportEntityRequest_EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportEntityRequest_EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportEntityRequest_EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportEntityRequest_EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportEntityRequest_EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportEntityRequest_EntityValidationError) ErrorName() string {
	return "ImportEntityRequest_EntityValidationError"
}

// Error satisfies the builtin error interface
func (e ImportEntityRequest_EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportEntityRequest_Entity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportEntityRequest_EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportEntityRequest_EntityValidationError{}
