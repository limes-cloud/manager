// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/tenantapp/proto/tenantapp_service.proto

package tenantapp

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tenant_GetTenantAppMenuIds_FullMethodName = "/manager.api.tenantapp.Tenant/GetTenantAppMenuIds"
	Tenant_ListTenantApp_FullMethodName       = "/manager.api.tenantapp.Tenant/ListTenantApp"
	Tenant_CreateTenantApp_FullMethodName     = "/manager.api.tenantapp.Tenant/CreateTenantApp"
	Tenant_UpdateTenantApp_FullMethodName     = "/manager.api.tenantapp.Tenant/UpdateTenantApp"
	Tenant_DeleteTenantApp_FullMethodName     = "/manager.api.tenantapp.Tenant/DeleteTenantApp"
)

// TenantClient is the client API for Tenant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantClient interface {
	GetTenantAppMenuIds(ctx context.Context, in *GetTenantAppMenuIdsRequest, opts ...grpc.CallOption) (*GetTenantAppMenuIdsReply, error)
	ListTenantApp(ctx context.Context, in *ListTenantAppRequest, opts ...grpc.CallOption) (*ListTenantAppReply, error)
	CreateTenantApp(ctx context.Context, in *CreateTenantAppRequest, opts ...grpc.CallOption) (*CreateTenantAppReply, error)
	UpdateTenantApp(ctx context.Context, in *UpdateTenantAppRequest, opts ...grpc.CallOption) (*UpdateTenantAppReply, error)
	DeleteTenantApp(ctx context.Context, in *DeleteTenantAppRequest, opts ...grpc.CallOption) (*DeleteTenantAppReply, error)
}

type tenantClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantClient(cc grpc.ClientConnInterface) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) GetTenantAppMenuIds(ctx context.Context, in *GetTenantAppMenuIdsRequest, opts ...grpc.CallOption) (*GetTenantAppMenuIdsReply, error) {
	out := new(GetTenantAppMenuIdsReply)
	err := c.cc.Invoke(ctx, Tenant_GetTenantAppMenuIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) ListTenantApp(ctx context.Context, in *ListTenantAppRequest, opts ...grpc.CallOption) (*ListTenantAppReply, error) {
	out := new(ListTenantAppReply)
	err := c.cc.Invoke(ctx, Tenant_ListTenantApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) CreateTenantApp(ctx context.Context, in *CreateTenantAppRequest, opts ...grpc.CallOption) (*CreateTenantAppReply, error) {
	out := new(CreateTenantAppReply)
	err := c.cc.Invoke(ctx, Tenant_CreateTenantApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) UpdateTenantApp(ctx context.Context, in *UpdateTenantAppRequest, opts ...grpc.CallOption) (*UpdateTenantAppReply, error) {
	out := new(UpdateTenantAppReply)
	err := c.cc.Invoke(ctx, Tenant_UpdateTenantApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) DeleteTenantApp(ctx context.Context, in *DeleteTenantAppRequest, opts ...grpc.CallOption) (*DeleteTenantAppReply, error) {
	out := new(DeleteTenantAppReply)
	err := c.cc.Invoke(ctx, Tenant_DeleteTenantApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServer is the server API for Tenant service.
// All implementations must embed UnimplementedTenantServer
// for forward compatibility
type TenantServer interface {
	GetTenantAppMenuIds(context.Context, *GetTenantAppMenuIdsRequest) (*GetTenantAppMenuIdsReply, error)
	ListTenantApp(context.Context, *ListTenantAppRequest) (*ListTenantAppReply, error)
	CreateTenantApp(context.Context, *CreateTenantAppRequest) (*CreateTenantAppReply, error)
	UpdateTenantApp(context.Context, *UpdateTenantAppRequest) (*UpdateTenantAppReply, error)
	DeleteTenantApp(context.Context, *DeleteTenantAppRequest) (*DeleteTenantAppReply, error)
	mustEmbedUnimplementedTenantServer()
}

// UnimplementedTenantServer must be embedded to have forward compatible implementations.
type UnimplementedTenantServer struct{}

func (UnimplementedTenantServer) GetTenantAppMenuIds(context.Context, *GetTenantAppMenuIdsRequest) (*GetTenantAppMenuIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantAppMenuIds not implemented")
}

func (UnimplementedTenantServer) ListTenantApp(context.Context, *ListTenantAppRequest) (*ListTenantAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantApp not implemented")
}

func (UnimplementedTenantServer) CreateTenantApp(context.Context, *CreateTenantAppRequest) (*CreateTenantAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantApp not implemented")
}

func (UnimplementedTenantServer) UpdateTenantApp(context.Context, *UpdateTenantAppRequest) (*UpdateTenantAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantApp not implemented")
}

func (UnimplementedTenantServer) DeleteTenantApp(context.Context, *DeleteTenantAppRequest) (*DeleteTenantAppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantApp not implemented")
}
func (UnimplementedTenantServer) mustEmbedUnimplementedTenantServer() {}

// UnsafeTenantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServer will
// result in compilation errors.
type UnsafeTenantServer interface {
	mustEmbedUnimplementedTenantServer()
}

func RegisterTenantServer(s grpc.ServiceRegistrar, srv TenantServer) {
	s.RegisterService(&Tenant_ServiceDesc, srv)
}

func _Tenant_GetTenantAppMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantAppMenuIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).GetTenantAppMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_GetTenantAppMenuIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).GetTenantAppMenuIds(ctx, req.(*GetTenantAppMenuIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_ListTenantApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ListTenantApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ListTenantApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ListTenantApp(ctx, req.(*ListTenantAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_CreateTenantApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).CreateTenantApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_CreateTenantApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).CreateTenantApp(ctx, req.(*CreateTenantAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_UpdateTenantApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).UpdateTenantApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_UpdateTenantApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).UpdateTenantApp(ctx, req.(*UpdateTenantAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_DeleteTenantApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).DeleteTenantApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_DeleteTenantApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).DeleteTenantApp(ctx, req.(*DeleteTenantAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tenant_ServiceDesc is the grpc.ServiceDesc for Tenant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tenant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.tenantapp.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantAppMenuIds",
			Handler:    _Tenant_GetTenantAppMenuIds_Handler,
		},
		{
			MethodName: "ListTenantApp",
			Handler:    _Tenant_ListTenantApp_Handler,
		},
		{
			MethodName: "CreateTenantApp",
			Handler:    _Tenant_CreateTenantApp_Handler,
		},
		{
			MethodName: "UpdateTenantApp",
			Handler:    _Tenant_UpdateTenantApp_Handler,
		},
		{
			MethodName: "DeleteTenantApp",
			Handler:    _Tenant_DeleteTenantApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tenantapp/proto/tenantapp_service.proto",
}
