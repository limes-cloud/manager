// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/tenantapp/proto/tenantapp.proto

package tenantapp

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantAppRequestMultiError, or nil if none found.
func (m *CreateTenantAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() < 1 {
		err := CreateTenantAppRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() < 1 {
		err := CreateTenantAppRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiredAt() < 1 {
		err := CreateTenantAppRequestValidationError{
			field:  "ExpiredAt",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := CreateTenantAppRequestValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTenantAppRequestMultiError(errors)
	}

	return nil
}

// CreateTenantAppRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantAppRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantAppRequestMultiError) AllErrors() []error { return m }

// CreateTenantAppRequestValidationError is the validation error returned by
// CreateTenantAppRequest.Validate if the designated constraints aren't met.
type CreateTenantAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantAppRequestValidationError) ErrorName() string {
	return "CreateTenantAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantAppRequestValidationError{}

// Validate checks the field values on CreateTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantAppReplyMultiError, or nil if none found.
func (m *CreateTenantAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTenantAppReplyMultiError(errors)
	}

	return nil
}

// CreateTenantAppReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTenantAppReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantAppReplyMultiError) AllErrors() []error { return m }

// CreateTenantAppReplyValidationError is the validation error returned by
// CreateTenantAppReply.Validate if the designated constraints aren't met.
type CreateTenantAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantAppReplyValidationError) ErrorName() string {
	return "CreateTenantAppReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantAppReplyValidationError{}

// Validate checks the field values on UpdateTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantAppRequestMultiError, or nil if none found.
func (m *UpdateTenantAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() < 1 {
		err := UpdateTenantAppRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() < 1 {
		err := UpdateTenantAppRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiredAt() < 1 {
		err := UpdateTenantAppRequestValidationError{
			field:  "ExpiredAt",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := UpdateTenantAppRequestValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateTenantAppRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantAppRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantAppRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantAppRequestMultiError) AllErrors() []error { return m }

// UpdateTenantAppRequestValidationError is the validation error returned by
// UpdateTenantAppRequest.Validate if the designated constraints aren't met.
type UpdateTenantAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantAppRequestValidationError) ErrorName() string {
	return "UpdateTenantAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantAppRequestValidationError{}

// Validate checks the field values on UpdateTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantAppReplyMultiError, or nil if none found.
func (m *UpdateTenantAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTenantAppReplyMultiError(errors)
	}

	return nil
}

// UpdateTenantAppReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantAppReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantAppReplyMultiError) AllErrors() []error { return m }

// UpdateTenantAppReplyValidationError is the validation error returned by
// UpdateTenantAppReply.Validate if the designated constraints aren't met.
type UpdateTenantAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantAppReplyValidationError) ErrorName() string {
	return "UpdateTenantAppReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantAppReplyValidationError{}

// Validate checks the field values on DeleteTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantAppRequestMultiError, or nil if none found.
func (m *DeleteTenantAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() < 1 {
		err := DeleteTenantAppRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() < 1 {
		err := DeleteTenantAppRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTenantAppRequestMultiError(errors)
	}

	return nil
}

// DeleteTenantAppRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantAppRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantAppRequestMultiError) AllErrors() []error { return m }

// DeleteTenantAppRequestValidationError is the validation error returned by
// DeleteTenantAppRequest.Validate if the designated constraints aren't met.
type DeleteTenantAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantAppRequestValidationError) ErrorName() string {
	return "DeleteTenantAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantAppRequestValidationError{}

// Validate checks the field values on DeleteTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantAppReplyMultiError, or nil if none found.
func (m *DeleteTenantAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTenantAppReplyMultiError(errors)
	}

	return nil
}

// DeleteTenantAppReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantAppReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantAppReplyMultiError) AllErrors() []error { return m }

// DeleteTenantAppReplyValidationError is the validation error returned by
// DeleteTenantAppReply.Validate if the designated constraints aren't met.
type DeleteTenantAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantAppReplyValidationError) ErrorName() string {
	return "DeleteTenantAppReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantAppReplyValidationError{}

// Validate checks the field values on ListTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantAppRequestMultiError, or nil if none found.
func (m *ListTenantAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListTenantAppRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListTenantAppRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTenantId() < 1 {
		err := ListTenantAppRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		// no validation rules for Order
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.AppName != nil {
		// no validation rules for AppName
	}

	if len(errors) > 0 {
		return ListTenantAppRequestMultiError(errors)
	}

	return nil
}

// ListTenantAppRequestMultiError is an error wrapping multiple validation
// errors returned by ListTenantAppRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTenantAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantAppRequestMultiError) AllErrors() []error { return m }

// ListTenantAppRequestValidationError is the validation error returned by
// ListTenantAppRequest.Validate if the designated constraints aren't met.
type ListTenantAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantAppRequestValidationError) ErrorName() string {
	return "ListTenantAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantAppRequestValidationError{}

// Validate checks the field values on ListTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantAppReplyMultiError, or nil if none found.
func (m *ListTenantAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantAppReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTenantAppReplyMultiError(errors)
	}

	return nil
}

// ListTenantAppReplyMultiError is an error wrapping multiple validation errors
// returned by ListTenantAppReply.ValidateAll() if the designated constraints
// aren't met.
type ListTenantAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantAppReplyMultiError) AllErrors() []error { return m }

// ListTenantAppReplyValidationError is the validation error returned by
// ListTenantAppReply.Validate if the designated constraints aren't met.
type ListTenantAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantAppReplyValidationError) ErrorName() string {
	return "ListTenantAppReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantAppReplyValidationError{}

// Validate checks the field values on GetTenantAppMenuIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantAppMenuIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantAppMenuIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantAppMenuIdsRequestMultiError, or nil if none found.
func (m *GetTenantAppMenuIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantAppMenuIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() < 1 {
		err := GetTenantAppMenuIdsRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() < 1 {
		err := GetTenantAppMenuIdsRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTenantAppMenuIdsRequestMultiError(errors)
	}

	return nil
}

// GetTenantAppMenuIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetTenantAppMenuIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTenantAppMenuIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantAppMenuIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantAppMenuIdsRequestMultiError) AllErrors() []error { return m }

// GetTenantAppMenuIdsRequestValidationError is the validation error returned
// by GetTenantAppMenuIdsRequest.Validate if the designated constraints aren't met.
type GetTenantAppMenuIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantAppMenuIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantAppMenuIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantAppMenuIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantAppMenuIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantAppMenuIdsRequestValidationError) ErrorName() string {
	return "GetTenantAppMenuIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantAppMenuIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantAppMenuIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantAppMenuIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantAppMenuIdsRequestValidationError{}

// Validate checks the field values on GetTenantAppMenuIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantAppMenuIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantAppMenuIdsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantAppMenuIdsReplyMultiError, or nil if none found.
func (m *GetTenantAppMenuIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantAppMenuIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTenantAppMenuIdsReplyMultiError(errors)
	}

	return nil
}

// GetTenantAppMenuIdsReplyMultiError is an error wrapping multiple validation
// errors returned by GetTenantAppMenuIdsReply.ValidateAll() if the designated
// constraints aren't met.
type GetTenantAppMenuIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantAppMenuIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantAppMenuIdsReplyMultiError) AllErrors() []error { return m }

// GetTenantAppMenuIdsReplyValidationError is the validation error returned by
// GetTenantAppMenuIdsReply.Validate if the designated constraints aren't met.
type GetTenantAppMenuIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantAppMenuIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantAppMenuIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantAppMenuIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantAppMenuIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantAppMenuIdsReplyValidationError) ErrorName() string {
	return "GetTenantAppMenuIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantAppMenuIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantAppMenuIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantAppMenuIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantAppMenuIdsReplyValidationError{}

// Validate checks the field values on ListTenantAppReply_App with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantAppReply_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantAppReply_App with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantAppReply_AppMultiError, or nil if none found.
func (m *ListTenantAppReply_App) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantAppReply_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListTenantAppReply_AppMultiError(errors)
	}

	return nil
}

// ListTenantAppReply_AppMultiError is an error wrapping multiple validation
// errors returned by ListTenantAppReply_App.ValidateAll() if the designated
// constraints aren't met.
type ListTenantAppReply_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantAppReply_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantAppReply_AppMultiError) AllErrors() []error { return m }

// ListTenantAppReply_AppValidationError is the validation error returned by
// ListTenantAppReply_App.Validate if the designated constraints aren't met.
type ListTenantAppReply_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantAppReply_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantAppReply_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantAppReply_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantAppReply_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantAppReply_AppValidationError) ErrorName() string {
	return "ListTenantAppReply_AppValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantAppReply_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantAppReply_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantAppReply_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantAppReply_AppValidationError{}

// Validate checks the field values on ListTenantAppReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantAppReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantAppReply_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantAppReply_DataMultiError, or nil if none found.
func (m *ListTenantAppReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantAppReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for TenantId

	// no validation rules for ExpiredAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTenantAppReply_DataValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTenantAppReply_DataValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantAppReply_DataValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTenantAppReply_DataMultiError(errors)
	}

	return nil
}

// ListTenantAppReply_DataMultiError is an error wrapping multiple validation
// errors returned by ListTenantAppReply_Data.ValidateAll() if the designated
// constraints aren't met.
type ListTenantAppReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantAppReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantAppReply_DataMultiError) AllErrors() []error { return m }

// ListTenantAppReply_DataValidationError is the validation error returned by
// ListTenantAppReply_Data.Validate if the designated constraints aren't met.
type ListTenantAppReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantAppReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantAppReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantAppReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantAppReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantAppReply_DataValidationError) ErrorName() string {
	return "ListTenantAppReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantAppReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantAppReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantAppReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantAppReply_DataValidationError{}
