// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/tenantapp/proto/tenantapp_service.proto

package tenantapp

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationTenantCreateTenantApp     = "/manager.api.tenantapp.Tenant/CreateTenantApp"
	OperationTenantDeleteTenantApp     = "/manager.api.tenantapp.Tenant/DeleteTenantApp"
	OperationTenantGetTenantAppMenuIds = "/manager.api.tenantapp.Tenant/GetTenantAppMenuIds"
	OperationTenantListTenantApp       = "/manager.api.tenantapp.Tenant/ListTenantApp"
	OperationTenantUpdateTenantApp     = "/manager.api.tenantapp.Tenant/UpdateTenantApp"
)

type TenantHTTPServer interface {
	CreateTenantApp(context.Context, *CreateTenantAppRequest) (*CreateTenantAppReply, error)
	DeleteTenantApp(context.Context, *DeleteTenantAppRequest) (*DeleteTenantAppReply, error)
	GetTenantAppMenuIds(context.Context, *GetTenantAppMenuIdsRequest) (*GetTenantAppMenuIdsReply, error)
	ListTenantApp(context.Context, *ListTenantAppRequest) (*ListTenantAppReply, error)
	UpdateTenantApp(context.Context, *UpdateTenantAppRequest) (*UpdateTenantAppReply, error)
}

func RegisterTenantHTTPServer(s *http.Server, srv TenantHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/tenant/app/menus", _Tenant_GetTenantAppMenuIds0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/tenant/apps", _Tenant_ListTenantApp0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/tenant/app", _Tenant_CreateTenantApp0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/tenant/app", _Tenant_UpdateTenantApp0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/tenant/app", _Tenant_DeleteTenantApp0_HTTP_Handler(srv))
}

func _Tenant_GetTenantAppMenuIds0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantAppMenuIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantGetTenantAppMenuIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTenantAppMenuIds(ctx, req.(*GetTenantAppMenuIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantAppMenuIdsReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_ListTenantApp0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTenantAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantListTenantApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListTenantApp(ctx, req.(*ListTenantAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTenantAppReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_CreateTenantApp0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTenantAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantCreateTenantApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateTenantApp(ctx, req.(*CreateTenantAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTenantAppReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_UpdateTenantApp0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTenantAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantUpdateTenantApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTenantApp(ctx, req.(*UpdateTenantAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTenantAppReply)
		return ctx.Result(200, reply)
	}
}

func _Tenant_DeleteTenantApp0_HTTP_Handler(srv TenantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTenantAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantDeleteTenantApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTenantApp(ctx, req.(*DeleteTenantAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantAppReply)
		return ctx.Result(200, reply)
	}
}

type TenantHTTPClient interface {
	CreateTenantApp(ctx context.Context, req *CreateTenantAppRequest, opts ...http.CallOption) (rsp *CreateTenantAppReply, err error)
	DeleteTenantApp(ctx context.Context, req *DeleteTenantAppRequest, opts ...http.CallOption) (rsp *DeleteTenantAppReply, err error)
	GetTenantAppMenuIds(ctx context.Context, req *GetTenantAppMenuIdsRequest, opts ...http.CallOption) (rsp *GetTenantAppMenuIdsReply, err error)
	ListTenantApp(ctx context.Context, req *ListTenantAppRequest, opts ...http.CallOption) (rsp *ListTenantAppReply, err error)
	UpdateTenantApp(ctx context.Context, req *UpdateTenantAppRequest, opts ...http.CallOption) (rsp *UpdateTenantAppReply, err error)
}

type TenantHTTPClientImpl struct {
	cc *http.Client
}

func NewTenantHTTPClient(client *http.Client) TenantHTTPClient {
	return &TenantHTTPClientImpl{client}
}

func (c *TenantHTTPClientImpl) CreateTenantApp(ctx context.Context, in *CreateTenantAppRequest, opts ...http.CallOption) (*CreateTenantAppReply, error) {
	var out CreateTenantAppReply
	pattern := "/manager/api/v1/tenant/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantCreateTenantApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) DeleteTenantApp(ctx context.Context, in *DeleteTenantAppRequest, opts ...http.CallOption) (*DeleteTenantAppReply, error) {
	var out DeleteTenantAppReply
	pattern := "/manager/api/v1/tenant/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantDeleteTenantApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) GetTenantAppMenuIds(ctx context.Context, in *GetTenantAppMenuIdsRequest, opts ...http.CallOption) (*GetTenantAppMenuIdsReply, error) {
	var out GetTenantAppMenuIdsReply
	pattern := "/manager/api/v1/tenant/app/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantGetTenantAppMenuIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) ListTenantApp(ctx context.Context, in *ListTenantAppRequest, opts ...http.CallOption) (*ListTenantAppReply, error) {
	var out ListTenantAppReply
	pattern := "/manager/api/v1/tenant/apps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantListTenantApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TenantHTTPClientImpl) UpdateTenantApp(ctx context.Context, in *UpdateTenantAppRequest, opts ...http.CallOption) (*UpdateTenantAppReply, error) {
	var out UpdateTenantAppReply
	pattern := "/manager/api/v1/tenant/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantUpdateTenantApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
