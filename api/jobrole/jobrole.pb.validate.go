// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/jobrole/proto/jobrole.proto

package jobrole

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateJobRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRolesRequestMultiError, or nil if none found.
func (m *CreateJobRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() < 1 {
		err := CreateJobRolesRequestValidationError{
			field:  "JobId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := CreateJobRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateJobRolesRequestMultiError(errors)
	}

	return nil
}

// CreateJobRolesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateJobRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRolesRequestMultiError) AllErrors() []error { return m }

// CreateJobRolesRequestValidationError is the validation error returned by
// CreateJobRolesRequest.Validate if the designated constraints aren't met.
type CreateJobRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRolesRequestValidationError) ErrorName() string {
	return "CreateJobRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRolesRequestValidationError{}

// Validate checks the field values on CreateJobRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRolesReplyMultiError, or nil if none found.
func (m *CreateJobRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateJobRolesReplyMultiError(errors)
	}

	return nil
}

// CreateJobRolesReplyMultiError is an error wrapping multiple validation
// errors returned by CreateJobRolesReply.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRolesReplyMultiError) AllErrors() []error { return m }

// CreateJobRolesReplyValidationError is the validation error returned by
// CreateJobRolesReply.Validate if the designated constraints aren't met.
type CreateJobRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRolesReplyValidationError) ErrorName() string {
	return "CreateJobRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRolesReplyValidationError{}

// Validate checks the field values on CreateRoleJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleJobsRequestMultiError, or nil if none found.
func (m *CreateRoleJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := CreateRoleJobsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetJobIds()) < 1 {
		err := CreateRoleJobsRequestValidationError{
			field:  "JobIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleJobsRequestMultiError(errors)
	}

	return nil
}

// CreateRoleJobsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRoleJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleJobsRequestMultiError) AllErrors() []error { return m }

// CreateRoleJobsRequestValidationError is the validation error returned by
// CreateRoleJobsRequest.Validate if the designated constraints aren't met.
type CreateRoleJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleJobsRequestValidationError) ErrorName() string {
	return "CreateRoleJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleJobsRequestValidationError{}

// Validate checks the field values on CreateRoleJobsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleJobsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleJobsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleJobsReplyMultiError, or nil if none found.
func (m *CreateRoleJobsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleJobsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleJobsReplyMultiError(errors)
	}

	return nil
}

// CreateRoleJobsReplyMultiError is an error wrapping multiple validation
// errors returned by CreateRoleJobsReply.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleJobsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleJobsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleJobsReplyMultiError) AllErrors() []error { return m }

// CreateRoleJobsReplyValidationError is the validation error returned by
// CreateRoleJobsReply.Validate if the designated constraints aren't met.
type CreateRoleJobsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleJobsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleJobsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleJobsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleJobsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleJobsReplyValidationError) ErrorName() string {
	return "CreateRoleJobsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleJobsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleJobsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleJobsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleJobsReplyValidationError{}

// Validate checks the field values on ListJobRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListJobRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListJobRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListJobRoleRequestMultiError, or nil if none found.
func (m *ListJobRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListJobRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListJobRoleRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListJobRoleRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetJobId() < 1 {
		err := ListJobRoleRequestValidationError{
			field:  "JobId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListJobRoleRequestMultiError(errors)
	}

	return nil
}

// ListJobRoleRequestMultiError is an error wrapping multiple validation errors
// returned by ListJobRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListJobRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListJobRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListJobRoleRequestMultiError) AllErrors() []error { return m }

// ListJobRoleRequestValidationError is the validation error returned by
// ListJobRoleRequest.Validate if the designated constraints aren't met.
type ListJobRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobRoleRequestValidationError) ErrorName() string {
	return "ListJobRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListJobRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobRoleRequestValidationError{}

// Validate checks the field values on ListJobRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListJobRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListJobRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListJobRoleReplyMultiError, or nil if none found.
func (m *ListJobRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListJobRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListJobRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListJobRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListJobRoleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListJobRoleReplyMultiError(errors)
	}

	return nil
}

// ListJobRoleReplyMultiError is an error wrapping multiple validation errors
// returned by ListJobRoleReply.ValidateAll() if the designated constraints
// aren't met.
type ListJobRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListJobRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListJobRoleReplyMultiError) AllErrors() []error { return m }

// ListJobRoleReplyValidationError is the validation error returned by
// ListJobRoleReply.Validate if the designated constraints aren't met.
type ListJobRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobRoleReplyValidationError) ErrorName() string { return "ListJobRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListJobRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobRoleReplyValidationError{}

// Validate checks the field values on ListRoleJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleJobRequestMultiError, or nil if none found.
func (m *ListRoleJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListRoleJobRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListRoleJobRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := ListRoleJobRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListRoleJobRequestMultiError(errors)
	}

	return nil
}

// ListRoleJobRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoleJobRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoleJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleJobRequestMultiError) AllErrors() []error { return m }

// ListRoleJobRequestValidationError is the validation error returned by
// ListRoleJobRequest.Validate if the designated constraints aren't met.
type ListRoleJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleJobRequestValidationError) ErrorName() string {
	return "ListRoleJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleJobRequestValidationError{}

// Validate checks the field values on ListRoleJobReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleJobReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleJobReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleJobReplyMultiError, or nil if none found.
func (m *ListRoleJobReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleJobReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleJobReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleJobReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleJobReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRoleJobReplyMultiError(errors)
	}

	return nil
}

// ListRoleJobReplyMultiError is an error wrapping multiple validation errors
// returned by ListRoleJobReply.ValidateAll() if the designated constraints
// aren't met.
type ListRoleJobReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleJobReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleJobReplyMultiError) AllErrors() []error { return m }

// ListRoleJobReplyValidationError is the validation error returned by
// ListRoleJobReply.Validate if the designated constraints aren't met.
type ListRoleJobReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleJobReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleJobReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleJobReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleJobReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleJobReplyValidationError) ErrorName() string { return "ListRoleJobReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleJobReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleJobReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleJobReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleJobReplyValidationError{}

// Validate checks the field values on DeleteJobRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRolesRequestMultiError, or nil if none found.
func (m *DeleteJobRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJobId() < 1 {
		err := DeleteJobRolesRequestValidationError{
			field:  "JobId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := DeleteJobRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteJobRolesRequestMultiError(errors)
	}

	return nil
}

// DeleteJobRolesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteJobRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRolesRequestMultiError) AllErrors() []error { return m }

// DeleteJobRolesRequestValidationError is the validation error returned by
// DeleteJobRolesRequest.Validate if the designated constraints aren't met.
type DeleteJobRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRolesRequestValidationError) ErrorName() string {
	return "DeleteJobRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRolesRequestValidationError{}

// Validate checks the field values on DeleteJobRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRolesReplyMultiError, or nil if none found.
func (m *DeleteJobRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobRolesReplyMultiError(errors)
	}

	return nil
}

// DeleteJobRolesReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteJobRolesReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRolesReplyMultiError) AllErrors() []error { return m }

// DeleteJobRolesReplyValidationError is the validation error returned by
// DeleteJobRolesReply.Validate if the designated constraints aren't met.
type DeleteJobRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRolesReplyValidationError) ErrorName() string {
	return "DeleteJobRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRolesReplyValidationError{}

// Validate checks the field values on DeleteRoleJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleJobsRequestMultiError, or nil if none found.
func (m *DeleteRoleJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetJobIds()) < 1 {
		err := DeleteRoleJobsRequestValidationError{
			field:  "JobIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := DeleteRoleJobsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleJobsRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleJobsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleJobsRequestMultiError) AllErrors() []error { return m }

// DeleteRoleJobsRequestValidationError is the validation error returned by
// DeleteRoleJobsRequest.Validate if the designated constraints aren't met.
type DeleteRoleJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleJobsRequestValidationError) ErrorName() string {
	return "DeleteRoleJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleJobsRequestValidationError{}

// Validate checks the field values on DeleteRoleJobsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleJobsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleJobsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleJobsReplyMultiError, or nil if none found.
func (m *DeleteRoleJobsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleJobsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleJobsReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleJobsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleJobsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleJobsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleJobsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleJobsReplyMultiError) AllErrors() []error { return m }

// DeleteRoleJobsReplyValidationError is the validation error returned by
// DeleteRoleJobsReply.Validate if the designated constraints aren't met.
type DeleteRoleJobsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleJobsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleJobsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleJobsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleJobsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleJobsReplyValidationError) ErrorName() string {
	return "DeleteRoleJobsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleJobsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleJobsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleJobsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleJobsReplyValidationError{}

// Validate checks the field values on ListJobRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListJobRoleReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListJobRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListJobRoleReply_RoleMultiError, or nil if none found.
func (m *ListJobRoleReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *ListJobRoleReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListJobRoleReply_RoleMultiError(errors)
	}

	return nil
}

// ListJobRoleReply_RoleMultiError is an error wrapping multiple validation
// errors returned by ListJobRoleReply_Role.ValidateAll() if the designated
// constraints aren't met.
type ListJobRoleReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListJobRoleReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListJobRoleReply_RoleMultiError) AllErrors() []error { return m }

// ListJobRoleReply_RoleValidationError is the validation error returned by
// ListJobRoleReply_Role.Validate if the designated constraints aren't met.
type ListJobRoleReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobRoleReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobRoleReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobRoleReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobRoleReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobRoleReply_RoleValidationError) ErrorName() string {
	return "ListJobRoleReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e ListJobRoleReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobRoleReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobRoleReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobRoleReply_RoleValidationError{}

// Validate checks the field values on ListRoleJobReply_Classify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleJobReply_Classify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleJobReply_Classify with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleJobReply_ClassifyMultiError, or nil if none found.
func (m *ListRoleJobReply_Classify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleJobReply_Classify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListRoleJobReply_ClassifyMultiError(errors)
	}

	return nil
}

// ListRoleJobReply_ClassifyMultiError is an error wrapping multiple validation
// errors returned by ListRoleJobReply_Classify.ValidateAll() if the
// designated constraints aren't met.
type ListRoleJobReply_ClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleJobReply_ClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleJobReply_ClassifyMultiError) AllErrors() []error { return m }

// ListRoleJobReply_ClassifyValidationError is the validation error returned by
// ListRoleJobReply_Classify.Validate if the designated constraints aren't met.
type ListRoleJobReply_ClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleJobReply_ClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleJobReply_ClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleJobReply_ClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleJobReply_ClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleJobReply_ClassifyValidationError) ErrorName() string {
	return "ListRoleJobReply_ClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleJobReply_ClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleJobReply_Classify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleJobReply_ClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleJobReply_ClassifyValidationError{}

// Validate checks the field values on ListRoleJobReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleJobReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleJobReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleJobReply_DataMultiError, or nil if none found.
func (m *ListRoleJobReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleJobReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetClassify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleJobReply_DataValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleJobReply_DataValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleJobReply_DataValidationError{
				field:  "Classify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRoleJobReply_DataMultiError(errors)
	}

	return nil
}

// ListRoleJobReply_DataMultiError is an error wrapping multiple validation
// errors returned by ListRoleJobReply_Data.ValidateAll() if the designated
// constraints aren't met.
type ListRoleJobReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleJobReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleJobReply_DataMultiError) AllErrors() []error { return m }

// ListRoleJobReply_DataValidationError is the validation error returned by
// ListRoleJobReply_Data.Validate if the designated constraints aren't met.
type ListRoleJobReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleJobReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleJobReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleJobReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleJobReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleJobReply_DataValidationError) ErrorName() string {
	return "ListRoleJobReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleJobReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleJobReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleJobReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleJobReply_DataValidationError{}
