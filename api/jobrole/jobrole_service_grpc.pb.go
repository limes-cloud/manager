// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/jobrole/proto/jobrole_service.proto

package jobrole

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobRole_ListJobRole_FullMethodName    = "/manager.api.jobrole.JobRole/ListJobRole"
	JobRole_CreateJobRoles_FullMethodName = "/manager.api.jobrole.JobRole/CreateJobRoles"
	JobRole_DeleteJobRoles_FullMethodName = "/manager.api.jobrole.JobRole/DeleteJobRoles"
	JobRole_ListRoleJob_FullMethodName    = "/manager.api.jobrole.JobRole/ListRoleJob"
	JobRole_CreateRoleJobs_FullMethodName = "/manager.api.jobrole.JobRole/CreateRoleJobs"
	JobRole_DeleteRoleJobs_FullMethodName = "/manager.api.jobrole.JobRole/DeleteRoleJobs"
)

// JobRoleClient is the client API for JobRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobRoleClient interface {
	ListJobRole(ctx context.Context, in *ListJobRoleRequest, opts ...grpc.CallOption) (*ListJobRoleReply, error)
	CreateJobRoles(ctx context.Context, in *CreateJobRolesRequest, opts ...grpc.CallOption) (*CreateJobRolesReply, error)
	DeleteJobRoles(ctx context.Context, in *DeleteJobRolesRequest, opts ...grpc.CallOption) (*DeleteJobRolesReply, error)
	ListRoleJob(ctx context.Context, in *ListRoleJobRequest, opts ...grpc.CallOption) (*ListRoleJobReply, error)
	CreateRoleJobs(ctx context.Context, in *CreateRoleJobsRequest, opts ...grpc.CallOption) (*CreateRoleJobsReply, error)
	DeleteRoleJobs(ctx context.Context, in *DeleteRoleJobsRequest, opts ...grpc.CallOption) (*DeleteRoleJobsReply, error)
}

type jobRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewJobRoleClient(cc grpc.ClientConnInterface) JobRoleClient {
	return &jobRoleClient{cc}
}

func (c *jobRoleClient) ListJobRole(ctx context.Context, in *ListJobRoleRequest, opts ...grpc.CallOption) (*ListJobRoleReply, error) {
	out := new(ListJobRoleReply)
	err := c.cc.Invoke(ctx, JobRole_ListJobRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRoleClient) CreateJobRoles(ctx context.Context, in *CreateJobRolesRequest, opts ...grpc.CallOption) (*CreateJobRolesReply, error) {
	out := new(CreateJobRolesReply)
	err := c.cc.Invoke(ctx, JobRole_CreateJobRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRoleClient) DeleteJobRoles(ctx context.Context, in *DeleteJobRolesRequest, opts ...grpc.CallOption) (*DeleteJobRolesReply, error) {
	out := new(DeleteJobRolesReply)
	err := c.cc.Invoke(ctx, JobRole_DeleteJobRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRoleClient) ListRoleJob(ctx context.Context, in *ListRoleJobRequest, opts ...grpc.CallOption) (*ListRoleJobReply, error) {
	out := new(ListRoleJobReply)
	err := c.cc.Invoke(ctx, JobRole_ListRoleJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRoleClient) CreateRoleJobs(ctx context.Context, in *CreateRoleJobsRequest, opts ...grpc.CallOption) (*CreateRoleJobsReply, error) {
	out := new(CreateRoleJobsReply)
	err := c.cc.Invoke(ctx, JobRole_CreateRoleJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRoleClient) DeleteRoleJobs(ctx context.Context, in *DeleteRoleJobsRequest, opts ...grpc.CallOption) (*DeleteRoleJobsReply, error) {
	out := new(DeleteRoleJobsReply)
	err := c.cc.Invoke(ctx, JobRole_DeleteRoleJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobRoleServer is the server API for JobRole service.
// All implementations must embed UnimplementedJobRoleServer
// for forward compatibility
type JobRoleServer interface {
	ListJobRole(context.Context, *ListJobRoleRequest) (*ListJobRoleReply, error)
	CreateJobRoles(context.Context, *CreateJobRolesRequest) (*CreateJobRolesReply, error)
	DeleteJobRoles(context.Context, *DeleteJobRolesRequest) (*DeleteJobRolesReply, error)
	ListRoleJob(context.Context, *ListRoleJobRequest) (*ListRoleJobReply, error)
	CreateRoleJobs(context.Context, *CreateRoleJobsRequest) (*CreateRoleJobsReply, error)
	DeleteRoleJobs(context.Context, *DeleteRoleJobsRequest) (*DeleteRoleJobsReply, error)
	mustEmbedUnimplementedJobRoleServer()
}

// UnimplementedJobRoleServer must be embedded to have forward compatible implementations.
type UnimplementedJobRoleServer struct{}

func (UnimplementedJobRoleServer) ListJobRole(context.Context, *ListJobRoleRequest) (*ListJobRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobRole not implemented")
}

func (UnimplementedJobRoleServer) CreateJobRoles(context.Context, *CreateJobRolesRequest) (*CreateJobRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobRoles not implemented")
}

func (UnimplementedJobRoleServer) DeleteJobRoles(context.Context, *DeleteJobRolesRequest) (*DeleteJobRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobRoles not implemented")
}

func (UnimplementedJobRoleServer) ListRoleJob(context.Context, *ListRoleJobRequest) (*ListRoleJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleJob not implemented")
}

func (UnimplementedJobRoleServer) CreateRoleJobs(context.Context, *CreateRoleJobsRequest) (*CreateRoleJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleJobs not implemented")
}

func (UnimplementedJobRoleServer) DeleteRoleJobs(context.Context, *DeleteRoleJobsRequest) (*DeleteRoleJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleJobs not implemented")
}
func (UnimplementedJobRoleServer) mustEmbedUnimplementedJobRoleServer() {}

// UnsafeJobRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobRoleServer will
// result in compilation errors.
type UnsafeJobRoleServer interface {
	mustEmbedUnimplementedJobRoleServer()
}

func RegisterJobRoleServer(s grpc.ServiceRegistrar, srv JobRoleServer) {
	s.RegisterService(&JobRole_ServiceDesc, srv)
}

func _JobRole_ListJobRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).ListJobRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_ListJobRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).ListJobRole(ctx, req.(*ListJobRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRole_CreateJobRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).CreateJobRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_CreateJobRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).CreateJobRoles(ctx, req.(*CreateJobRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRole_DeleteJobRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).DeleteJobRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_DeleteJobRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).DeleteJobRoles(ctx, req.(*DeleteJobRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRole_ListRoleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).ListRoleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_ListRoleJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).ListRoleJob(ctx, req.(*ListRoleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRole_CreateRoleJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).CreateRoleJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_CreateRoleJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).CreateRoleJobs(ctx, req.(*CreateRoleJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRole_DeleteRoleJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRoleServer).DeleteRoleJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobRole_DeleteRoleJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRoleServer).DeleteRoleJobs(ctx, req.(*DeleteRoleJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobRole_ServiceDesc is the grpc.ServiceDesc for JobRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.jobrole.JobRole",
	HandlerType: (*JobRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobRole",
			Handler:    _JobRole_ListJobRole_Handler,
		},
		{
			MethodName: "CreateJobRoles",
			Handler:    _JobRole_CreateJobRoles_Handler,
		},
		{
			MethodName: "DeleteJobRoles",
			Handler:    _JobRole_DeleteJobRoles_Handler,
		},
		{
			MethodName: "ListRoleJob",
			Handler:    _JobRole_ListRoleJob_Handler,
		},
		{
			MethodName: "CreateRoleJobs",
			Handler:    _JobRole_CreateRoleJobs_Handler,
		},
		{
			MethodName: "DeleteRoleJobs",
			Handler:    _JobRole_DeleteRoleJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/jobrole/proto/jobrole_service.proto",
}
