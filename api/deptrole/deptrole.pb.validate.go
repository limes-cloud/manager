// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/deptrole/proto/deptrole.proto

package deptrole

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDeptRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptRolesRequestMultiError, or nil if none found.
func (m *CreateDeptRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeptId() < 1 {
		err := CreateDeptRolesRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := CreateDeptRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDeptRolesRequestMultiError(errors)
	}

	return nil
}

// CreateDeptRolesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeptRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDeptRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptRolesRequestMultiError) AllErrors() []error { return m }

// CreateDeptRolesRequestValidationError is the validation error returned by
// CreateDeptRolesRequest.Validate if the designated constraints aren't met.
type CreateDeptRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptRolesRequestValidationError) ErrorName() string {
	return "CreateDeptRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptRolesRequestValidationError{}

// Validate checks the field values on CreateDeptRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptRolesReplyMultiError, or nil if none found.
func (m *CreateDeptRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeptRolesReplyMultiError(errors)
	}

	return nil
}

// CreateDeptRolesReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDeptRolesReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDeptRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptRolesReplyMultiError) AllErrors() []error { return m }

// CreateDeptRolesReplyValidationError is the validation error returned by
// CreateDeptRolesReply.Validate if the designated constraints aren't met.
type CreateDeptRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptRolesReplyValidationError) ErrorName() string {
	return "CreateDeptRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptRolesReplyValidationError{}

// Validate checks the field values on CreateRoleDeptsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleDeptsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleDeptsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleDeptsRequestMultiError, or nil if none found.
func (m *CreateRoleDeptsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleDeptsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := CreateRoleDeptsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDeptIds()) < 1 {
		err := CreateRoleDeptsRequestValidationError{
			field:  "DeptIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleDeptsRequestMultiError(errors)
	}

	return nil
}

// CreateRoleDeptsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRoleDeptsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleDeptsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleDeptsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleDeptsRequestMultiError) AllErrors() []error { return m }

// CreateRoleDeptsRequestValidationError is the validation error returned by
// CreateRoleDeptsRequest.Validate if the designated constraints aren't met.
type CreateRoleDeptsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleDeptsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleDeptsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleDeptsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleDeptsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleDeptsRequestValidationError) ErrorName() string {
	return "CreateRoleDeptsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleDeptsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleDeptsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleDeptsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleDeptsRequestValidationError{}

// Validate checks the field values on CreateRoleDeptsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleDeptsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleDeptsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleDeptsReplyMultiError, or nil if none found.
func (m *CreateRoleDeptsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleDeptsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleDeptsReplyMultiError(errors)
	}

	return nil
}

// CreateRoleDeptsReplyMultiError is an error wrapping multiple validation
// errors returned by CreateRoleDeptsReply.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleDeptsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleDeptsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleDeptsReplyMultiError) AllErrors() []error { return m }

// CreateRoleDeptsReplyValidationError is the validation error returned by
// CreateRoleDeptsReply.Validate if the designated constraints aren't met.
type CreateRoleDeptsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleDeptsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleDeptsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleDeptsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleDeptsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleDeptsReplyValidationError) ErrorName() string {
	return "CreateRoleDeptsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleDeptsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleDeptsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleDeptsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleDeptsReplyValidationError{}

// Validate checks the field values on ListDeptRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptRoleRequestMultiError, or nil if none found.
func (m *ListDeptRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListDeptRoleRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListDeptRoleRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeptId() < 1 {
		err := ListDeptRoleRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListDeptRoleRequestMultiError(errors)
	}

	return nil
}

// ListDeptRoleRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeptRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeptRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptRoleRequestMultiError) AllErrors() []error { return m }

// ListDeptRoleRequestValidationError is the validation error returned by
// ListDeptRoleRequest.Validate if the designated constraints aren't met.
type ListDeptRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptRoleRequestValidationError) ErrorName() string {
	return "ListDeptRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptRoleRequestValidationError{}

// Validate checks the field values on ListDeptRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeptRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptRoleReplyMultiError, or nil if none found.
func (m *ListDeptRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptRoleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDeptRoleReplyMultiError(errors)
	}

	return nil
}

// ListDeptRoleReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeptRoleReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeptRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptRoleReplyMultiError) AllErrors() []error { return m }

// ListDeptRoleReplyValidationError is the validation error returned by
// ListDeptRoleReply.Validate if the designated constraints aren't met.
type ListDeptRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptRoleReplyValidationError) ErrorName() string {
	return "ListDeptRoleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptRoleReplyValidationError{}

// Validate checks the field values on ListRoleDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptRequestMultiError, or nil if none found.
func (m *ListRoleDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListRoleDeptRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListRoleDeptRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := ListRoleDeptRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListRoleDeptRequestMultiError(errors)
	}

	return nil
}

// ListRoleDeptRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleDeptRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRoleDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptRequestMultiError) AllErrors() []error { return m }

// ListRoleDeptRequestValidationError is the validation error returned by
// ListRoleDeptRequest.Validate if the designated constraints aren't met.
type ListRoleDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptRequestValidationError) ErrorName() string {
	return "ListRoleDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptRequestValidationError{}

// Validate checks the field values on ListRoleDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptReplyMultiError, or nil if none found.
func (m *ListRoleDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleDeptReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRoleDeptReplyMultiError(errors)
	}

	return nil
}

// ListRoleDeptReplyMultiError is an error wrapping multiple validation errors
// returned by ListRoleDeptReply.ValidateAll() if the designated constraints
// aren't met.
type ListRoleDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptReplyMultiError) AllErrors() []error { return m }

// ListRoleDeptReplyValidationError is the validation error returned by
// ListRoleDeptReply.Validate if the designated constraints aren't met.
type ListRoleDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptReplyValidationError) ErrorName() string {
	return "ListRoleDeptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptReplyValidationError{}

// Validate checks the field values on DeleteDeptRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptRolesRequestMultiError, or nil if none found.
func (m *DeleteDeptRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeptId() < 1 {
		err := DeleteDeptRolesRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := DeleteDeptRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeptRolesRequestMultiError(errors)
	}

	return nil
}

// DeleteDeptRolesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeptRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeptRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptRolesRequestMultiError) AllErrors() []error { return m }

// DeleteDeptRolesRequestValidationError is the validation error returned by
// DeleteDeptRolesRequest.Validate if the designated constraints aren't met.
type DeleteDeptRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptRolesRequestValidationError) ErrorName() string {
	return "DeleteDeptRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptRolesRequestValidationError{}

// Validate checks the field values on DeleteDeptRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptRolesReplyMultiError, or nil if none found.
func (m *DeleteDeptRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeptRolesReplyMultiError(errors)
	}

	return nil
}

// DeleteDeptRolesReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDeptRolesReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeptRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptRolesReplyMultiError) AllErrors() []error { return m }

// DeleteDeptRolesReplyValidationError is the validation error returned by
// DeleteDeptRolesReply.Validate if the designated constraints aren't met.
type DeleteDeptRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptRolesReplyValidationError) ErrorName() string {
	return "DeleteDeptRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptRolesReplyValidationError{}

// Validate checks the field values on DeleteRoleDeptsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleDeptsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleDeptsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleDeptsRequestMultiError, or nil if none found.
func (m *DeleteRoleDeptsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleDeptsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDeptIds()) < 1 {
		err := DeleteRoleDeptsRequestValidationError{
			field:  "DeptIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := DeleteRoleDeptsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleDeptsRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleDeptsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleDeptsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleDeptsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleDeptsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleDeptsRequestMultiError) AllErrors() []error { return m }

// DeleteRoleDeptsRequestValidationError is the validation error returned by
// DeleteRoleDeptsRequest.Validate if the designated constraints aren't met.
type DeleteRoleDeptsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleDeptsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleDeptsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleDeptsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleDeptsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleDeptsRequestValidationError) ErrorName() string {
	return "DeleteRoleDeptsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleDeptsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleDeptsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleDeptsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleDeptsRequestValidationError{}

// Validate checks the field values on DeleteRoleDeptsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleDeptsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleDeptsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleDeptsReplyMultiError, or nil if none found.
func (m *DeleteRoleDeptsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleDeptsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleDeptsReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleDeptsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleDeptsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleDeptsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleDeptsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleDeptsReplyMultiError) AllErrors() []error { return m }

// DeleteRoleDeptsReplyValidationError is the validation error returned by
// DeleteRoleDeptsReply.Validate if the designated constraints aren't met.
type DeleteRoleDeptsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleDeptsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleDeptsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleDeptsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleDeptsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleDeptsReplyValidationError) ErrorName() string {
	return "DeleteRoleDeptsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleDeptsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleDeptsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleDeptsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleDeptsReplyValidationError{}

// Validate checks the field values on ListDeptRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptRoleReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptRoleReply_RoleMultiError, or nil if none found.
func (m *ListDeptRoleReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptRoleReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListDeptRoleReply_RoleMultiError(errors)
	}

	return nil
}

// ListDeptRoleReply_RoleMultiError is an error wrapping multiple validation
// errors returned by ListDeptRoleReply_Role.ValidateAll() if the designated
// constraints aren't met.
type ListDeptRoleReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptRoleReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptRoleReply_RoleMultiError) AllErrors() []error { return m }

// ListDeptRoleReply_RoleValidationError is the validation error returned by
// ListDeptRoleReply_Role.Validate if the designated constraints aren't met.
type ListDeptRoleReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptRoleReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptRoleReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptRoleReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptRoleReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptRoleReply_RoleValidationError) ErrorName() string {
	return "ListDeptRoleReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptRoleReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptRoleReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptRoleReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptRoleReply_RoleValidationError{}

// Validate checks the field values on ListRoleDeptReply_Classify with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptReply_Classify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptReply_Classify with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptReply_ClassifyMultiError, or nil if none found.
func (m *ListRoleDeptReply_Classify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptReply_Classify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListRoleDeptReply_ClassifyMultiError(errors)
	}

	return nil
}

// ListRoleDeptReply_ClassifyMultiError is an error wrapping multiple
// validation errors returned by ListRoleDeptReply_Classify.ValidateAll() if
// the designated constraints aren't met.
type ListRoleDeptReply_ClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptReply_ClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptReply_ClassifyMultiError) AllErrors() []error { return m }

// ListRoleDeptReply_ClassifyValidationError is the validation error returned
// by ListRoleDeptReply_Classify.Validate if the designated constraints aren't met.
type ListRoleDeptReply_ClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptReply_ClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptReply_ClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptReply_ClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptReply_ClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptReply_ClassifyValidationError) ErrorName() string {
	return "ListRoleDeptReply_ClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptReply_ClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptReply_Classify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptReply_ClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptReply_ClassifyValidationError{}

// Validate checks the field values on ListRoleDeptReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptReply_DataMultiError, or nil if none found.
func (m *ListRoleDeptReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetClassify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleDeptReply_DataValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleDeptReply_DataValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleDeptReply_DataValidationError{
				field:  "Classify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRoleDeptReply_DataMultiError(errors)
	}

	return nil
}

// ListRoleDeptReply_DataMultiError is an error wrapping multiple validation
// errors returned by ListRoleDeptReply_Data.ValidateAll() if the designated
// constraints aren't met.
type ListRoleDeptReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptReply_DataMultiError) AllErrors() []error { return m }

// ListRoleDeptReply_DataValidationError is the validation error returned by
// ListRoleDeptReply_Data.Validate if the designated constraints aren't met.
type ListRoleDeptReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptReply_DataValidationError) ErrorName() string {
	return "ListRoleDeptReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptReply_DataValidationError{}
