// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/deptrole/proto/deptrole_service.proto

package deptrole

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeptRole_ListDeptRole_FullMethodName    = "/manager.api.deptrole.DeptRole/ListDeptRole"
	DeptRole_CreateDeptRoles_FullMethodName = "/manager.api.deptrole.DeptRole/CreateDeptRoles"
	DeptRole_DeleteDeptRoles_FullMethodName = "/manager.api.deptrole.DeptRole/DeleteDeptRoles"
	DeptRole_ListRoleDept_FullMethodName    = "/manager.api.deptrole.DeptRole/ListRoleDept"
	DeptRole_CreateRoleDepts_FullMethodName = "/manager.api.deptrole.DeptRole/CreateRoleDepts"
	DeptRole_DeleteRoleDepts_FullMethodName = "/manager.api.deptrole.DeptRole/DeleteRoleDepts"
)

// DeptRoleClient is the client API for DeptRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeptRoleClient interface {
	ListDeptRole(ctx context.Context, in *ListDeptRoleRequest, opts ...grpc.CallOption) (*ListDeptRoleReply, error)
	CreateDeptRoles(ctx context.Context, in *CreateDeptRolesRequest, opts ...grpc.CallOption) (*CreateDeptRolesReply, error)
	DeleteDeptRoles(ctx context.Context, in *DeleteDeptRolesRequest, opts ...grpc.CallOption) (*DeleteDeptRolesReply, error)
	ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptReply, error)
	CreateRoleDepts(ctx context.Context, in *CreateRoleDeptsRequest, opts ...grpc.CallOption) (*CreateRoleDeptsReply, error)
	DeleteRoleDepts(ctx context.Context, in *DeleteRoleDeptsRequest, opts ...grpc.CallOption) (*DeleteRoleDeptsReply, error)
}

type deptRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewDeptRoleClient(cc grpc.ClientConnInterface) DeptRoleClient {
	return &deptRoleClient{cc}
}

func (c *deptRoleClient) ListDeptRole(ctx context.Context, in *ListDeptRoleRequest, opts ...grpc.CallOption) (*ListDeptRoleReply, error) {
	out := new(ListDeptRoleReply)
	err := c.cc.Invoke(ctx, DeptRole_ListDeptRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptRoleClient) CreateDeptRoles(ctx context.Context, in *CreateDeptRolesRequest, opts ...grpc.CallOption) (*CreateDeptRolesReply, error) {
	out := new(CreateDeptRolesReply)
	err := c.cc.Invoke(ctx, DeptRole_CreateDeptRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptRoleClient) DeleteDeptRoles(ctx context.Context, in *DeleteDeptRolesRequest, opts ...grpc.CallOption) (*DeleteDeptRolesReply, error) {
	out := new(DeleteDeptRolesReply)
	err := c.cc.Invoke(ctx, DeptRole_DeleteDeptRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptRoleClient) ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptReply, error) {
	out := new(ListRoleDeptReply)
	err := c.cc.Invoke(ctx, DeptRole_ListRoleDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptRoleClient) CreateRoleDepts(ctx context.Context, in *CreateRoleDeptsRequest, opts ...grpc.CallOption) (*CreateRoleDeptsReply, error) {
	out := new(CreateRoleDeptsReply)
	err := c.cc.Invoke(ctx, DeptRole_CreateRoleDepts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptRoleClient) DeleteRoleDepts(ctx context.Context, in *DeleteRoleDeptsRequest, opts ...grpc.CallOption) (*DeleteRoleDeptsReply, error) {
	out := new(DeleteRoleDeptsReply)
	err := c.cc.Invoke(ctx, DeptRole_DeleteRoleDepts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptRoleServer is the server API for DeptRole service.
// All implementations must embed UnimplementedDeptRoleServer
// for forward compatibility
type DeptRoleServer interface {
	ListDeptRole(context.Context, *ListDeptRoleRequest) (*ListDeptRoleReply, error)
	CreateDeptRoles(context.Context, *CreateDeptRolesRequest) (*CreateDeptRolesReply, error)
	DeleteDeptRoles(context.Context, *DeleteDeptRolesRequest) (*DeleteDeptRolesReply, error)
	ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptReply, error)
	CreateRoleDepts(context.Context, *CreateRoleDeptsRequest) (*CreateRoleDeptsReply, error)
	DeleteRoleDepts(context.Context, *DeleteRoleDeptsRequest) (*DeleteRoleDeptsReply, error)
	mustEmbedUnimplementedDeptRoleServer()
}

// UnimplementedDeptRoleServer must be embedded to have forward compatible implementations.
type UnimplementedDeptRoleServer struct{}

func (UnimplementedDeptRoleServer) ListDeptRole(context.Context, *ListDeptRoleRequest) (*ListDeptRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptRole not implemented")
}

func (UnimplementedDeptRoleServer) CreateDeptRoles(context.Context, *CreateDeptRolesRequest) (*CreateDeptRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeptRoles not implemented")
}

func (UnimplementedDeptRoleServer) DeleteDeptRoles(context.Context, *DeleteDeptRolesRequest) (*DeleteDeptRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeptRoles not implemented")
}

func (UnimplementedDeptRoleServer) ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleDept not implemented")
}

func (UnimplementedDeptRoleServer) CreateRoleDepts(context.Context, *CreateRoleDeptsRequest) (*CreateRoleDeptsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleDepts not implemented")
}

func (UnimplementedDeptRoleServer) DeleteRoleDepts(context.Context, *DeleteRoleDeptsRequest) (*DeleteRoleDeptsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleDepts not implemented")
}
func (UnimplementedDeptRoleServer) mustEmbedUnimplementedDeptRoleServer() {}

// UnsafeDeptRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeptRoleServer will
// result in compilation errors.
type UnsafeDeptRoleServer interface {
	mustEmbedUnimplementedDeptRoleServer()
}

func RegisterDeptRoleServer(s grpc.ServiceRegistrar, srv DeptRoleServer) {
	s.RegisterService(&DeptRole_ServiceDesc, srv)
}

func _DeptRole_ListDeptRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).ListDeptRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_ListDeptRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).ListDeptRole(ctx, req.(*ListDeptRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptRole_CreateDeptRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).CreateDeptRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_CreateDeptRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).CreateDeptRoles(ctx, req.(*CreateDeptRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptRole_DeleteDeptRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).DeleteDeptRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_DeleteDeptRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).DeleteDeptRoles(ctx, req.(*DeleteDeptRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptRole_ListRoleDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).ListRoleDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_ListRoleDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).ListRoleDept(ctx, req.(*ListRoleDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptRole_CreateRoleDepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleDeptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).CreateRoleDepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_CreateRoleDepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).CreateRoleDepts(ctx, req.(*CreateRoleDeptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptRole_DeleteRoleDepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleDeptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptRoleServer).DeleteRoleDepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptRole_DeleteRoleDepts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptRoleServer).DeleteRoleDepts(ctx, req.(*DeleteRoleDeptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeptRole_ServiceDesc is the grpc.ServiceDesc for DeptRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeptRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.deptrole.DeptRole",
	HandlerType: (*DeptRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeptRole",
			Handler:    _DeptRole_ListDeptRole_Handler,
		},
		{
			MethodName: "CreateDeptRoles",
			Handler:    _DeptRole_CreateDeptRoles_Handler,
		},
		{
			MethodName: "DeleteDeptRoles",
			Handler:    _DeptRole_DeleteDeptRoles_Handler,
		},
		{
			MethodName: "ListRoleDept",
			Handler:    _DeptRole_ListRoleDept_Handler,
		},
		{
			MethodName: "CreateRoleDepts",
			Handler:    _DeptRole_CreateRoleDepts_Handler,
		},
		{
			MethodName: "DeleteRoleDepts",
			Handler:    _DeptRole_DeleteRoleDepts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/deptrole/proto/deptrole_service.proto",
}
