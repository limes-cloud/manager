// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/roleentity/proto/roleentity_service.proto

package roleentity

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleEntity_ListRoleEntity_FullMethodName   = "/manager.api.roleentity.RoleEntity/ListRoleEntity"
	RoleEntity_CreateRoleEntity_FullMethodName = "/manager.api.roleentity.RoleEntity/CreateRoleEntity"
	RoleEntity_UpdateRoleEntity_FullMethodName = "/manager.api.roleentity.RoleEntity/UpdateRoleEntity"
	RoleEntity_DeleteRoleEntity_FullMethodName = "/manager.api.roleentity.RoleEntity/DeleteRoleEntity"
)

// RoleEntityClient is the client API for RoleEntity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleEntityClient interface {
	// ListRoleEntity获取角色数据列表
	ListRoleEntity(ctx context.Context, in *ListRoleEntityRequest, opts ...grpc.CallOption) (*ListRoleEntityReply, error)
	// CreateRoleEntity 创建角色数据信息
	CreateRoleEntity(ctx context.Context, in *CreateRoleEntityRequest, opts ...grpc.CallOption) (*CreateRoleEntityReply, error)
	// CreateRoleEntity 创建角色数据信息
	UpdateRoleEntity(ctx context.Context, in *UpdateRoleEntityRequest, opts ...grpc.CallOption) (*UpdateRoleEntityReply, error)
	// DeleteRoleEntity 删除角色数据信息
	DeleteRoleEntity(ctx context.Context, in *DeleteRoleEntityRequest, opts ...grpc.CallOption) (*DeleteRoleEntityReply, error)
}

type roleEntityClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleEntityClient(cc grpc.ClientConnInterface) RoleEntityClient {
	return &roleEntityClient{cc}
}

func (c *roleEntityClient) ListRoleEntity(ctx context.Context, in *ListRoleEntityRequest, opts ...grpc.CallOption) (*ListRoleEntityReply, error) {
	out := new(ListRoleEntityReply)
	err := c.cc.Invoke(ctx, RoleEntity_ListRoleEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEntityClient) CreateRoleEntity(ctx context.Context, in *CreateRoleEntityRequest, opts ...grpc.CallOption) (*CreateRoleEntityReply, error) {
	out := new(CreateRoleEntityReply)
	err := c.cc.Invoke(ctx, RoleEntity_CreateRoleEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEntityClient) UpdateRoleEntity(ctx context.Context, in *UpdateRoleEntityRequest, opts ...grpc.CallOption) (*UpdateRoleEntityReply, error) {
	out := new(UpdateRoleEntityReply)
	err := c.cc.Invoke(ctx, RoleEntity_UpdateRoleEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEntityClient) DeleteRoleEntity(ctx context.Context, in *DeleteRoleEntityRequest, opts ...grpc.CallOption) (*DeleteRoleEntityReply, error) {
	out := new(DeleteRoleEntityReply)
	err := c.cc.Invoke(ctx, RoleEntity_DeleteRoleEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleEntityServer is the server API for RoleEntity service.
// All implementations must embed UnimplementedRoleEntityServer
// for forward compatibility
type RoleEntityServer interface {
	// ListRoleEntity获取角色数据列表
	ListRoleEntity(context.Context, *ListRoleEntityRequest) (*ListRoleEntityReply, error)
	// CreateRoleEntity 创建角色数据信息
	CreateRoleEntity(context.Context, *CreateRoleEntityRequest) (*CreateRoleEntityReply, error)
	// CreateRoleEntity 创建角色数据信息
	UpdateRoleEntity(context.Context, *UpdateRoleEntityRequest) (*UpdateRoleEntityReply, error)
	// DeleteRoleEntity 删除角色数据信息
	DeleteRoleEntity(context.Context, *DeleteRoleEntityRequest) (*DeleteRoleEntityReply, error)
	mustEmbedUnimplementedRoleEntityServer()
}

// UnimplementedRoleEntityServer must be embedded to have forward compatible implementations.
type UnimplementedRoleEntityServer struct{}

func (UnimplementedRoleEntityServer) ListRoleEntity(context.Context, *ListRoleEntityRequest) (*ListRoleEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleEntity not implemented")
}

func (UnimplementedRoleEntityServer) CreateRoleEntity(context.Context, *CreateRoleEntityRequest) (*CreateRoleEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleEntity not implemented")
}

func (UnimplementedRoleEntityServer) UpdateRoleEntity(context.Context, *UpdateRoleEntityRequest) (*UpdateRoleEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleEntity not implemented")
}

func (UnimplementedRoleEntityServer) DeleteRoleEntity(context.Context, *DeleteRoleEntityRequest) (*DeleteRoleEntityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleEntity not implemented")
}
func (UnimplementedRoleEntityServer) mustEmbedUnimplementedRoleEntityServer() {}

// UnsafeRoleEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleEntityServer will
// result in compilation errors.
type UnsafeRoleEntityServer interface {
	mustEmbedUnimplementedRoleEntityServer()
}

func RegisterRoleEntityServer(s grpc.ServiceRegistrar, srv RoleEntityServer) {
	s.RegisterService(&RoleEntity_ServiceDesc, srv)
}

func _RoleEntity_ListRoleEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEntityServer).ListRoleEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleEntity_ListRoleEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEntityServer).ListRoleEntity(ctx, req.(*ListRoleEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEntity_CreateRoleEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEntityServer).CreateRoleEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleEntity_CreateRoleEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEntityServer).CreateRoleEntity(ctx, req.(*CreateRoleEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEntity_UpdateRoleEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEntityServer).UpdateRoleEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleEntity_UpdateRoleEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEntityServer).UpdateRoleEntity(ctx, req.(*UpdateRoleEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEntity_DeleteRoleEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEntityServer).DeleteRoleEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleEntity_DeleteRoleEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEntityServer).DeleteRoleEntity(ctx, req.(*DeleteRoleEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleEntity_ServiceDesc is the grpc.ServiceDesc for RoleEntity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleEntity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.roleentity.RoleEntity",
	HandlerType: (*RoleEntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoleEntity",
			Handler:    _RoleEntity_ListRoleEntity_Handler,
		},
		{
			MethodName: "CreateRoleEntity",
			Handler:    _RoleEntity_CreateRoleEntity_Handler,
		},
		{
			MethodName: "UpdateRoleEntity",
			Handler:    _RoleEntity_UpdateRoleEntity_Handler,
		},
		{
			MethodName: "DeleteRoleEntity",
			Handler:    _RoleEntity_DeleteRoleEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/roleentity/proto/roleentity_service.proto",
}
