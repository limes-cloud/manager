// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/roleentity/proto/roleentity.proto

package roleentity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoleEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleEntityRequestMultiError, or nil if none found.
func (m *CreateRoleEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := CreateRoleEntityRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEntityId() < 1 {
		err := CreateRoleEntityRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAction()) < 1 {
		err := CreateRoleEntityRequestValidationError{
			field:  "Action",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := CreateRoleEntityRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Fields != nil {
		if utf8.RuneCountInString(m.GetFields()) < 1 {
			err := CreateRoleEntityRequestValidationError{
				field:  "Fields",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Rules != nil {
		if utf8.RuneCountInString(m.GetRules()) < 1 {
			err := CreateRoleEntityRequestValidationError{
				field:  "Rules",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateRoleEntityRequestMultiError(errors)
	}

	return nil
}

// CreateRoleEntityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRoleEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleEntityRequestMultiError) AllErrors() []error { return m }

// CreateRoleEntityRequestValidationError is the validation error returned by
// CreateRoleEntityRequest.Validate if the designated constraints aren't met.
type CreateRoleEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleEntityRequestValidationError) ErrorName() string {
	return "CreateRoleEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleEntityRequestValidationError{}

// Validate checks the field values on CreateRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleEntityReplyMultiError, or nil if none found.
func (m *CreateRoleEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateRoleEntityReplyMultiError(errors)
	}

	return nil
}

// CreateRoleEntityReplyMultiError is an error wrapping multiple validation
// errors returned by CreateRoleEntityReply.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleEntityReplyMultiError) AllErrors() []error { return m }

// CreateRoleEntityReplyValidationError is the validation error returned by
// CreateRoleEntityReply.Validate if the designated constraints aren't met.
type CreateRoleEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleEntityReplyValidationError) ErrorName() string {
	return "CreateRoleEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleEntityReplyValidationError{}

// Validate checks the field values on ListRoleEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleEntityRequestMultiError, or nil if none found.
func (m *ListRoleEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListRoleEntityRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListRoleEntityRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := ListRoleEntityRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.EntityId != nil {
		if m.GetEntityId() < 1 {
			err := ListRoleEntityRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ListRoleEntityRequestMultiError(errors)
	}

	return nil
}

// ListRoleEntityRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRoleEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleEntityRequestMultiError) AllErrors() []error { return m }

// ListRoleEntityRequestValidationError is the validation error returned by
// ListRoleEntityRequest.Validate if the designated constraints aren't met.
type ListRoleEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleEntityRequestValidationError) ErrorName() string {
	return "ListRoleEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleEntityRequestValidationError{}

// Validate checks the field values on ListRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleEntityReplyMultiError, or nil if none found.
func (m *ListRoleEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleEntityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleEntityReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRoleEntityReplyMultiError(errors)
	}

	return nil
}

// ListRoleEntityReplyMultiError is an error wrapping multiple validation
// errors returned by ListRoleEntityReply.ValidateAll() if the designated
// constraints aren't met.
type ListRoleEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleEntityReplyMultiError) AllErrors() []error { return m }

// ListRoleEntityReplyValidationError is the validation error returned by
// ListRoleEntityReply.Validate if the designated constraints aren't met.
type ListRoleEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleEntityReplyValidationError) ErrorName() string {
	return "ListRoleEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleEntityReplyValidationError{}

// Validate checks the field values on UpdateRoleEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleEntityRequestMultiError, or nil if none found.
func (m *UpdateRoleEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateRoleEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.RoleId != nil {
		if m.GetRoleId() < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "RoleId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.EntityId != nil {
		if m.GetEntityId() < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Action != nil {
		if utf8.RuneCountInString(m.GetAction()) < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "Action",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Scope != nil {
		if utf8.RuneCountInString(m.GetScope()) < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "Scope",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Fields != nil {
		if utf8.RuneCountInString(m.GetFields()) < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "Fields",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Rules != nil {
		if utf8.RuneCountInString(m.GetRules()) < 1 {
			err := UpdateRoleEntityRequestValidationError{
				field:  "Rules",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateRoleEntityRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleEntityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleEntityRequestMultiError) AllErrors() []error { return m }

// UpdateRoleEntityRequestValidationError is the validation error returned by
// UpdateRoleEntityRequest.Validate if the designated constraints aren't met.
type UpdateRoleEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleEntityRequestValidationError) ErrorName() string {
	return "UpdateRoleEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleEntityRequestValidationError{}

// Validate checks the field values on UpdateRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleEntityReplyMultiError, or nil if none found.
func (m *UpdateRoleEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleEntityReplyMultiError(errors)
	}

	return nil
}

// UpdateRoleEntityReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleEntityReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleEntityReplyMultiError) AllErrors() []error { return m }

// UpdateRoleEntityReplyValidationError is the validation error returned by
// UpdateRoleEntityReply.Validate if the designated constraints aren't met.
type UpdateRoleEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleEntityReplyValidationError) ErrorName() string {
	return "UpdateRoleEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleEntityReplyValidationError{}

// Validate checks the field values on DeleteRoleEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleEntityRequestMultiError, or nil if none found.
func (m *DeleteRoleEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteRoleEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleEntityRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleEntityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleEntityRequestMultiError) AllErrors() []error { return m }

// DeleteRoleEntityRequestValidationError is the validation error returned by
// DeleteRoleEntityRequest.Validate if the designated constraints aren't met.
type DeleteRoleEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleEntityRequestValidationError) ErrorName() string {
	return "DeleteRoleEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleEntityRequestValidationError{}

// Validate checks the field values on DeleteRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleEntityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleEntityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleEntityReplyMultiError, or nil if none found.
func (m *DeleteRoleEntityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleEntityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleEntityReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleEntityReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleEntityReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleEntityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleEntityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleEntityReplyMultiError) AllErrors() []error { return m }

// DeleteRoleEntityReplyValidationError is the validation error returned by
// DeleteRoleEntityReply.Validate if the designated constraints aren't met.
type DeleteRoleEntityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleEntityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleEntityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleEntityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleEntityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleEntityReplyValidationError) ErrorName() string {
	return "DeleteRoleEntityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleEntityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleEntityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleEntityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleEntityReplyValidationError{}

// Validate checks the field values on ListRoleEntityReply_App with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleEntityReply_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleEntityReply_App with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleEntityReply_AppMultiError, or nil if none found.
func (m *ListRoleEntityReply_App) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleEntityReply_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListRoleEntityReply_AppMultiError(errors)
	}

	return nil
}

// ListRoleEntityReply_AppMultiError is an error wrapping multiple validation
// errors returned by ListRoleEntityReply_App.ValidateAll() if the designated
// constraints aren't met.
type ListRoleEntityReply_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleEntityReply_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleEntityReply_AppMultiError) AllErrors() []error { return m }

// ListRoleEntityReply_AppValidationError is the validation error returned by
// ListRoleEntityReply_App.Validate if the designated constraints aren't met.
type ListRoleEntityReply_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleEntityReply_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleEntityReply_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleEntityReply_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleEntityReply_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleEntityReply_AppValidationError) ErrorName() string {
	return "ListRoleEntityReply_AppValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleEntityReply_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleEntityReply_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleEntityReply_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleEntityReply_AppValidationError{}

// Validate checks the field values on ListRoleEntityReply_Entity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleEntityReply_Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleEntityReply_Entity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleEntityReply_EntityMultiError, or nil if none found.
func (m *ListRoleEntityReply_Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleEntityReply_Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleEntityReply_EntityValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleEntityReply_EntityValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleEntityReply_EntityValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRoleEntityReply_EntityMultiError(errors)
	}

	return nil
}

// ListRoleEntityReply_EntityMultiError is an error wrapping multiple
// validation errors returned by ListRoleEntityReply_Entity.ValidateAll() if
// the designated constraints aren't met.
type ListRoleEntityReply_EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleEntityReply_EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleEntityReply_EntityMultiError) AllErrors() []error { return m }

// ListRoleEntityReply_EntityValidationError is the validation error returned
// by ListRoleEntityReply_Entity.Validate if the designated constraints aren't met.
type ListRoleEntityReply_EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleEntityReply_EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleEntityReply_EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleEntityReply_EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleEntityReply_EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleEntityReply_EntityValidationError) ErrorName() string {
	return "ListRoleEntityReply_EntityValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleEntityReply_EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleEntityReply_Entity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleEntityReply_EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleEntityReply_EntityValidationError{}

// Validate checks the field values on ListRoleEntityReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleEntityReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleEntityReply_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleEntityReply_DataMultiError, or nil if none found.
func (m *ListRoleEntityReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleEntityReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleId

	// no validation rules for EntityId

	// no validation rules for Action

	// no validation rules for Scope

	// no validation rules for Fields

	// no validation rules for Rules

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleEntityReply_DataValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleEntityReply_DataValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleEntityReply_DataValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRoleEntityReply_DataMultiError(errors)
	}

	return nil
}

// ListRoleEntityReply_DataMultiError is an error wrapping multiple validation
// errors returned by ListRoleEntityReply_Data.ValidateAll() if the designated
// constraints aren't met.
type ListRoleEntityReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleEntityReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleEntityReply_DataMultiError) AllErrors() []error { return m }

// ListRoleEntityReply_DataValidationError is the validation error returned by
// ListRoleEntityReply_Data.Validate if the designated constraints aren't met.
type ListRoleEntityReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleEntityReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleEntityReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleEntityReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleEntityReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleEntityReply_DataValidationError) ErrorName() string {
	return "ListRoleEntityReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleEntityReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleEntityReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleEntityReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleEntityReply_DataValidationError{}
