// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/roleentity/proto/roleentity_service.proto

package roleentity

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationRoleEntityCreateRoleEntity = "/manager.api.roleentity.RoleEntity/CreateRoleEntity"
	OperationRoleEntityDeleteRoleEntity = "/manager.api.roleentity.RoleEntity/DeleteRoleEntity"
	OperationRoleEntityListRoleEntity   = "/manager.api.roleentity.RoleEntity/ListRoleEntity"
	OperationRoleEntityUpdateRoleEntity = "/manager.api.roleentity.RoleEntity/UpdateRoleEntity"
)

type RoleEntityHTTPServer interface {
	// CreateRoleEntity CreateRoleEntity 创建角色数据信息
	CreateRoleEntity(context.Context, *CreateRoleEntityRequest) (*CreateRoleEntityReply, error)
	// DeleteRoleEntity DeleteRoleEntity 删除角色数据信息
	DeleteRoleEntity(context.Context, *DeleteRoleEntityRequest) (*DeleteRoleEntityReply, error)
	// ListRoleEntity ListRoleEntity获取角色数据列表
	ListRoleEntity(context.Context, *ListRoleEntityRequest) (*ListRoleEntityReply, error)
	// UpdateRoleEntity CreateRoleEntity 创建角色数据信息
	UpdateRoleEntity(context.Context, *UpdateRoleEntityRequest) (*UpdateRoleEntityReply, error)
}

func RegisterRoleEntityHTTPServer(s *http.Server, srv RoleEntityHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/role/entities", _RoleEntity_ListRoleEntity0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/role/entity", _RoleEntity_CreateRoleEntity0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/role/entity", _RoleEntity_UpdateRoleEntity0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/role/entity", _RoleEntity_DeleteRoleEntity0_HTTP_Handler(srv))
}

func _RoleEntity_ListRoleEntity0_HTTP_Handler(srv RoleEntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleEntityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleEntityListRoleEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListRoleEntity(ctx, req.(*ListRoleEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleEntityReply)
		return ctx.Result(200, reply)
	}
}

func _RoleEntity_CreateRoleEntity0_HTTP_Handler(srv RoleEntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleEntityCreateRoleEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateRoleEntity(ctx, req.(*CreateRoleEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleEntityReply)
		return ctx.Result(200, reply)
	}
}

func _RoleEntity_UpdateRoleEntity0_HTTP_Handler(srv RoleEntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleEntityUpdateRoleEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRoleEntity(ctx, req.(*UpdateRoleEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleEntityReply)
		return ctx.Result(200, reply)
	}
}

func _RoleEntity_DeleteRoleEntity0_HTTP_Handler(srv RoleEntityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleEntityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleEntityDeleteRoleEntity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteRoleEntity(ctx, req.(*DeleteRoleEntityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleEntityReply)
		return ctx.Result(200, reply)
	}
}

type RoleEntityHTTPClient interface {
	CreateRoleEntity(ctx context.Context, req *CreateRoleEntityRequest, opts ...http.CallOption) (rsp *CreateRoleEntityReply, err error)
	DeleteRoleEntity(ctx context.Context, req *DeleteRoleEntityRequest, opts ...http.CallOption) (rsp *DeleteRoleEntityReply, err error)
	ListRoleEntity(ctx context.Context, req *ListRoleEntityRequest, opts ...http.CallOption) (rsp *ListRoleEntityReply, err error)
	UpdateRoleEntity(ctx context.Context, req *UpdateRoleEntityRequest, opts ...http.CallOption) (rsp *UpdateRoleEntityReply, err error)
}

type RoleEntityHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleEntityHTTPClient(client *http.Client) RoleEntityHTTPClient {
	return &RoleEntityHTTPClientImpl{client}
}

func (c *RoleEntityHTTPClientImpl) CreateRoleEntity(ctx context.Context, in *CreateRoleEntityRequest, opts ...http.CallOption) (*CreateRoleEntityReply, error) {
	var out CreateRoleEntityReply
	pattern := "/manager/api/v1/role/entity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleEntityCreateRoleEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleEntityHTTPClientImpl) DeleteRoleEntity(ctx context.Context, in *DeleteRoleEntityRequest, opts ...http.CallOption) (*DeleteRoleEntityReply, error) {
	var out DeleteRoleEntityReply
	pattern := "/manager/api/v1/role/entity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleEntityDeleteRoleEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleEntityHTTPClientImpl) ListRoleEntity(ctx context.Context, in *ListRoleEntityRequest, opts ...http.CallOption) (*ListRoleEntityReply, error) {
	var out ListRoleEntityReply
	pattern := "/manager/api/v1/role/entities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleEntityListRoleEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleEntityHTTPClientImpl) UpdateRoleEntity(ctx context.Context, in *UpdateRoleEntityRequest, opts ...http.CallOption) (*UpdateRoleEntityReply, error) {
	var out UpdateRoleEntityReply
	pattern := "/manager/api/v1/role/entity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleEntityUpdateRoleEntity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
