// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/oauth/proto/oauth_service.proto

package oauth

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationOAuthCreateOAuthChannel   = "/manager.api.oauth.OAuth/CreateOAuthChannel"
	OperationOAuthDeleteOAuthChannel   = "/manager.api.oauth.OAuth/DeleteOAuthChannel"
	OperationOAuthListOAuthChannel     = "/manager.api.oauth.OAuth/ListOAuthChannel"
	OperationOAuthListOAuthChannelType = "/manager.api.oauth.OAuth/ListOAuthChannelType"
	OperationOAuthUpdateOAuthChannel   = "/manager.api.oauth.OAuth/UpdateOAuthChannel"
)

type OAuthHTTPServer interface {
	// CreateOAuthChannel CreateOAuthChannel 创建登陆渠道
	CreateOAuthChannel(context.Context, *CreateOAuthChannelRequest) (*CreateOAuthChannelReply, error)
	// DeleteOAuthChannel DeleteOAuthChannel 删除登陆渠道
	DeleteOAuthChannel(context.Context, *DeleteOAuthChannelRequest) (*DeleteOAuthChannelReply, error)
	// ListOAuthChannel ListOAuthChannel 获取登陆渠道列表
	ListOAuthChannel(context.Context, *ListOAuthChannelRequest) (*ListOAuthChannelReply, error)
	// ListOAuthChannelType ListOAuthChannelType 获取登陆渠道可用列表
	ListOAuthChannelType(context.Context, *ListOAuthChannelTypeRequest) (*ListOAuthChannelTypeReply, error)
	// UpdateOAuthChannel UpdateOAuthChannel 更新登陆渠道
	UpdateOAuthChannel(context.Context, *UpdateOAuthChannelRequest) (*UpdateOAuthChannelReply, error)
}

func RegisterOAuthHTTPServer(s *http.Server, srv OAuthHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/oauth/channel/types", _OAuth_ListOAuthChannelType0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/oauth/channels", _OAuth_ListOAuthChannel0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/oauth/channel", _OAuth_CreateOAuthChannel0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/oauth/channel", _OAuth_UpdateOAuthChannel0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/oauth/channel", _OAuth_DeleteOAuthChannel0_HTTP_Handler(srv))
}

func _OAuth_ListOAuthChannelType0_HTTP_Handler(srv OAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOAuthChannelTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOAuthListOAuthChannelType)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListOAuthChannelType(ctx, req.(*ListOAuthChannelTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOAuthChannelTypeReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth_ListOAuthChannel0_HTTP_Handler(srv OAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOAuthChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOAuthListOAuthChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListOAuthChannel(ctx, req.(*ListOAuthChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOAuthChannelReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth_CreateOAuthChannel0_HTTP_Handler(srv OAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOAuthChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOAuthCreateOAuthChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateOAuthChannel(ctx, req.(*CreateOAuthChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOAuthChannelReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth_UpdateOAuthChannel0_HTTP_Handler(srv OAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOAuthChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOAuthUpdateOAuthChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateOAuthChannel(ctx, req.(*UpdateOAuthChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOAuthChannelReply)
		return ctx.Result(200, reply)
	}
}

func _OAuth_DeleteOAuthChannel0_HTTP_Handler(srv OAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOAuthChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOAuthDeleteOAuthChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteOAuthChannel(ctx, req.(*DeleteOAuthChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOAuthChannelReply)
		return ctx.Result(200, reply)
	}
}

type OAuthHTTPClient interface {
	CreateOAuthChannel(ctx context.Context, req *CreateOAuthChannelRequest, opts ...http.CallOption) (rsp *CreateOAuthChannelReply, err error)
	DeleteOAuthChannel(ctx context.Context, req *DeleteOAuthChannelRequest, opts ...http.CallOption) (rsp *DeleteOAuthChannelReply, err error)
	ListOAuthChannel(ctx context.Context, req *ListOAuthChannelRequest, opts ...http.CallOption) (rsp *ListOAuthChannelReply, err error)
	ListOAuthChannelType(ctx context.Context, req *ListOAuthChannelTypeRequest, opts ...http.CallOption) (rsp *ListOAuthChannelTypeReply, err error)
	UpdateOAuthChannel(ctx context.Context, req *UpdateOAuthChannelRequest, opts ...http.CallOption) (rsp *UpdateOAuthChannelReply, err error)
}

type OAuthHTTPClientImpl struct {
	cc *http.Client
}

func NewOAuthHTTPClient(client *http.Client) OAuthHTTPClient {
	return &OAuthHTTPClientImpl{client}
}

func (c *OAuthHTTPClientImpl) CreateOAuthChannel(ctx context.Context, in *CreateOAuthChannelRequest, opts ...http.CallOption) (*CreateOAuthChannelReply, error) {
	var out CreateOAuthChannelReply
	pattern := "/manager/api/v1/oauth/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOAuthCreateOAuthChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuthHTTPClientImpl) DeleteOAuthChannel(ctx context.Context, in *DeleteOAuthChannelRequest, opts ...http.CallOption) (*DeleteOAuthChannelReply, error) {
	var out DeleteOAuthChannelReply
	pattern := "/manager/api/v1/oauth/channel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOAuthDeleteOAuthChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuthHTTPClientImpl) ListOAuthChannel(ctx context.Context, in *ListOAuthChannelRequest, opts ...http.CallOption) (*ListOAuthChannelReply, error) {
	var out ListOAuthChannelReply
	pattern := "/manager/api/v1/oauth/channels"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOAuthListOAuthChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuthHTTPClientImpl) ListOAuthChannelType(ctx context.Context, in *ListOAuthChannelTypeRequest, opts ...http.CallOption) (*ListOAuthChannelTypeReply, error) {
	var out ListOAuthChannelTypeReply
	pattern := "/manager/api/v1/oauth/channel/types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOAuthListOAuthChannelType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OAuthHTTPClientImpl) UpdateOAuthChannel(ctx context.Context, in *UpdateOAuthChannelRequest, opts ...http.CallOption) (*UpdateOAuthChannelReply, error) {
	var out UpdateOAuthChannelReply
	pattern := "/manager/api/v1/oauth/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOAuthUpdateOAuthChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
