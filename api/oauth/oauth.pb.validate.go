// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/oauth/proto/oauth.proto

package oauth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOAuthChannelTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthChannelTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthChannelTypeRequestMultiError, or nil if none found.
func (m *ListOAuthChannelTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOAuthChannelTypeRequestMultiError(errors)
	}

	return nil
}

// ListOAuthChannelTypeRequestMultiError is an error wrapping multiple
// validation errors returned by ListOAuthChannelTypeRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOAuthChannelTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelTypeRequestMultiError) AllErrors() []error { return m }

// ListOAuthChannelTypeRequestValidationError is the validation error returned
// by ListOAuthChannelTypeRequest.Validate if the designated constraints
// aren't met.
type ListOAuthChannelTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelTypeRequestValidationError) ErrorName() string {
	return "ListOAuthChannelTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelTypeRequestValidationError{}

// Validate checks the field values on ListOAuthChannelTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthChannelTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelTypeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthChannelTypeReplyMultiError, or nil if none found.
func (m *ListOAuthChannelTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOAuthChannelTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOAuthChannelTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOAuthChannelTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOAuthChannelTypeReplyMultiError(errors)
	}

	return nil
}

// ListOAuthChannelTypeReplyMultiError is an error wrapping multiple validation
// errors returned by ListOAuthChannelTypeReply.ValidateAll() if the
// designated constraints aren't met.
type ListOAuthChannelTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelTypeReplyMultiError) AllErrors() []error { return m }

// ListOAuthChannelTypeReplyValidationError is the validation error returned by
// ListOAuthChannelTypeReply.Validate if the designated constraints aren't met.
type ListOAuthChannelTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelTypeReplyValidationError) ErrorName() string {
	return "ListOAuthChannelTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelTypeReplyValidationError{}

// Validate checks the field values on ListOAuthChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthChannelRequestMultiError, or nil if none found.
func (m *ListOAuthChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListOAuthChannelRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListOAuthChannelRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		if _, ok := _ListOAuthChannelRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListOAuthChannelRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.OrderBy != nil {
		if _, ok := _ListOAuthChannelRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListOAuthChannelRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListOAuthChannelRequestMultiError(errors)
	}

	return nil
}

// ListOAuthChannelRequestMultiError is an error wrapping multiple validation
// errors returned by ListOAuthChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOAuthChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelRequestMultiError) AllErrors() []error { return m }

// ListOAuthChannelRequestValidationError is the validation error returned by
// ListOAuthChannelRequest.Validate if the designated constraints aren't met.
type ListOAuthChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelRequestValidationError) ErrorName() string {
	return "ListOAuthChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelRequestValidationError{}

var _ListOAuthChannelRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListOAuthChannelRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListOAuthChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthChannelReplyMultiError, or nil if none found.
func (m *ListOAuthChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOAuthChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOAuthChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOAuthChannelReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOAuthChannelReplyMultiError(errors)
	}

	return nil
}

// ListOAuthChannelReplyMultiError is an error wrapping multiple validation
// errors returned by ListOAuthChannelReply.ValidateAll() if the designated
// constraints aren't met.
type ListOAuthChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelReplyMultiError) AllErrors() []error { return m }

// ListOAuthChannelReplyValidationError is the validation error returned by
// ListOAuthChannelReply.Validate if the designated constraints aren't met.
type ListOAuthChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelReplyValidationError) ErrorName() string {
	return "ListOAuthChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelReplyValidationError{}

// Validate checks the field values on CreateOAuthChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuthChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuthChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuthChannelRequestMultiError, or nil if none found.
func (m *CreateOAuthChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuthChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAk()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Ak",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSk()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Sk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extra

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateOAuthChannelRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOAuthChannelRequestMultiError(errors)
	}

	return nil
}

// CreateOAuthChannelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOAuthChannelRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOAuthChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuthChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuthChannelRequestMultiError) AllErrors() []error { return m }

// CreateOAuthChannelRequestValidationError is the validation error returned by
// CreateOAuthChannelRequest.Validate if the designated constraints aren't met.
type CreateOAuthChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuthChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuthChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuthChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuthChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuthChannelRequestValidationError) ErrorName() string {
	return "CreateOAuthChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuthChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuthChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuthChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuthChannelRequestValidationError{}

// Validate checks the field values on CreateOAuthChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuthChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuthChannelReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuthChannelReplyMultiError, or nil if none found.
func (m *CreateOAuthChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuthChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateOAuthChannelReplyMultiError(errors)
	}

	return nil
}

// CreateOAuthChannelReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOAuthChannelReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOAuthChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuthChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuthChannelReplyMultiError) AllErrors() []error { return m }

// CreateOAuthChannelReplyValidationError is the validation error returned by
// CreateOAuthChannelReply.Validate if the designated constraints aren't met.
type CreateOAuthChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuthChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuthChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuthChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuthChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuthChannelReplyValidationError) ErrorName() string {
	return "CreateOAuthChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuthChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuthChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuthChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuthChannelReplyValidationError{}

// Validate checks the field values on UpdateOAuthChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuthChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuthChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOAuthChannelRequestMultiError, or nil if none found.
func (m *UpdateOAuthChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuthChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateOAuthChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Ak != nil {
		// no validation rules for Ak
	}

	if m.Sk != nil {
		// no validation rules for Sk
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateOAuthChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateOAuthChannelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOAuthChannelRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOAuthChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuthChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuthChannelRequestMultiError) AllErrors() []error { return m }

// UpdateOAuthChannelRequestValidationError is the validation error returned by
// UpdateOAuthChannelRequest.Validate if the designated constraints aren't met.
type UpdateOAuthChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuthChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuthChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuthChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuthChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuthChannelRequestValidationError) ErrorName() string {
	return "UpdateOAuthChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuthChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuthChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuthChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuthChannelRequestValidationError{}

// Validate checks the field values on UpdateOAuthChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOAuthChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOAuthChannelReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOAuthChannelReplyMultiError, or nil if none found.
func (m *UpdateOAuthChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOAuthChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOAuthChannelReplyMultiError(errors)
	}

	return nil
}

// UpdateOAuthChannelReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateOAuthChannelReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateOAuthChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOAuthChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOAuthChannelReplyMultiError) AllErrors() []error { return m }

// UpdateOAuthChannelReplyValidationError is the validation error returned by
// UpdateOAuthChannelReply.Validate if the designated constraints aren't met.
type UpdateOAuthChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOAuthChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOAuthChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOAuthChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOAuthChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOAuthChannelReplyValidationError) ErrorName() string {
	return "UpdateOAuthChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOAuthChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOAuthChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOAuthChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOAuthChannelReplyValidationError{}

// Validate checks the field values on DeleteOAuthChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthChannelRequestMultiError, or nil if none found.
func (m *DeleteOAuthChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteOAuthChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOAuthChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteOAuthChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOAuthChannelRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOAuthChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthChannelRequestMultiError) AllErrors() []error { return m }

// DeleteOAuthChannelRequestValidationError is the validation error returned by
// DeleteOAuthChannelRequest.Validate if the designated constraints aren't met.
type DeleteOAuthChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthChannelRequestValidationError) ErrorName() string {
	return "DeleteOAuthChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuthChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthChannelRequestValidationError{}

// Validate checks the field values on DeleteOAuthChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthChannelReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthChannelReplyMultiError, or nil if none found.
func (m *DeleteOAuthChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOAuthChannelReplyMultiError(errors)
	}

	return nil
}

// DeleteOAuthChannelReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteOAuthChannelReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteOAuthChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthChannelReplyMultiError) AllErrors() []error { return m }

// DeleteOAuthChannelReplyValidationError is the validation error returned by
// DeleteOAuthChannelReply.Validate if the designated constraints aren't met.
type DeleteOAuthChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthChannelReplyValidationError) ErrorName() string {
	return "DeleteOAuthChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuthChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthChannelReplyValidationError{}

// Validate checks the field values on ListOAuthChannelTypeReply_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthChannelTypeReply_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelTypeReply_Type with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOAuthChannelTypeReply_TypeMultiError, or nil if none found.
func (m *ListOAuthChannelTypeReply_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelTypeReply_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListOAuthChannelTypeReply_TypeMultiError(errors)
	}

	return nil
}

// ListOAuthChannelTypeReply_TypeMultiError is an error wrapping multiple
// validation errors returned by ListOAuthChannelTypeReply_Type.ValidateAll()
// if the designated constraints aren't met.
type ListOAuthChannelTypeReply_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelTypeReply_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelTypeReply_TypeMultiError) AllErrors() []error { return m }

// ListOAuthChannelTypeReply_TypeValidationError is the validation error
// returned by ListOAuthChannelTypeReply_Type.Validate if the designated
// constraints aren't met.
type ListOAuthChannelTypeReply_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelTypeReply_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelTypeReply_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelTypeReply_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelTypeReply_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelTypeReply_TypeValidationError) ErrorName() string {
	return "ListOAuthChannelTypeReply_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelTypeReply_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelTypeReply_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelTypeReply_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelTypeReply_TypeValidationError{}

// Validate checks the field values on ListOAuthChannelReply_OAuthChannel with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOAuthChannelReply_OAuthChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthChannelReply_OAuthChannel
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOAuthChannelReply_OAuthChannelMultiError, or nil if none found.
func (m *ListOAuthChannelReply_OAuthChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthChannelReply_OAuthChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Ak

	// no validation rules for Sk

	// no validation rules for Extra

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListOAuthChannelReply_OAuthChannelMultiError(errors)
	}

	return nil
}

// ListOAuthChannelReply_OAuthChannelMultiError is an error wrapping multiple
// validation errors returned by
// ListOAuthChannelReply_OAuthChannel.ValidateAll() if the designated
// constraints aren't met.
type ListOAuthChannelReply_OAuthChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthChannelReply_OAuthChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthChannelReply_OAuthChannelMultiError) AllErrors() []error { return m }

// ListOAuthChannelReply_OAuthChannelValidationError is the validation error
// returned by ListOAuthChannelReply_OAuthChannel.Validate if the designated
// constraints aren't met.
type ListOAuthChannelReply_OAuthChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthChannelReply_OAuthChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthChannelReply_OAuthChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthChannelReply_OAuthChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthChannelReply_OAuthChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthChannelReply_OAuthChannelValidationError) ErrorName() string {
	return "ListOAuthChannelReply_OAuthChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthChannelReply_OAuthChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthChannelReply_OAuthChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthChannelReply_OAuthChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthChannelReply_OAuthChannelValidationError{}
