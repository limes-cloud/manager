// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/oauth/proto/oauth_service.proto

package oauth

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OAuth_ListOAuthChannelType_FullMethodName = "/manager.api.oauth.OAuth/ListOAuthChannelType"
	OAuth_ListOAuthChannel_FullMethodName     = "/manager.api.oauth.OAuth/ListOAuthChannel"
	OAuth_CreateOAuthChannel_FullMethodName   = "/manager.api.oauth.OAuth/CreateOAuthChannel"
	OAuth_UpdateOAuthChannel_FullMethodName   = "/manager.api.oauth.OAuth/UpdateOAuthChannel"
	OAuth_DeleteOAuthChannel_FullMethodName   = "/manager.api.oauth.OAuth/DeleteOAuthChannel"
)

// OAuthClient is the client API for OAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthClient interface {
	// ListOAuthChannelType 获取登陆渠道可用列表
	ListOAuthChannelType(ctx context.Context, in *ListOAuthChannelTypeRequest, opts ...grpc.CallOption) (*ListOAuthChannelTypeReply, error)
	// ListOAuthChannel 获取登陆渠道列表
	ListOAuthChannel(ctx context.Context, in *ListOAuthChannelRequest, opts ...grpc.CallOption) (*ListOAuthChannelReply, error)
	// CreateOAuthChannel 创建登陆渠道
	CreateOAuthChannel(ctx context.Context, in *CreateOAuthChannelRequest, opts ...grpc.CallOption) (*CreateOAuthChannelReply, error)
	// UpdateOAuthChannel 更新登陆渠道
	UpdateOAuthChannel(ctx context.Context, in *UpdateOAuthChannelRequest, opts ...grpc.CallOption) (*UpdateOAuthChannelReply, error)
	// DeleteOAuthChannel 删除登陆渠道
	DeleteOAuthChannel(ctx context.Context, in *DeleteOAuthChannelRequest, opts ...grpc.CallOption) (*DeleteOAuthChannelReply, error)
}

type oAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthClient(cc grpc.ClientConnInterface) OAuthClient {
	return &oAuthClient{cc}
}

func (c *oAuthClient) ListOAuthChannelType(ctx context.Context, in *ListOAuthChannelTypeRequest, opts ...grpc.CallOption) (*ListOAuthChannelTypeReply, error) {
	out := new(ListOAuthChannelTypeReply)
	err := c.cc.Invoke(ctx, OAuth_ListOAuthChannelType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClient) ListOAuthChannel(ctx context.Context, in *ListOAuthChannelRequest, opts ...grpc.CallOption) (*ListOAuthChannelReply, error) {
	out := new(ListOAuthChannelReply)
	err := c.cc.Invoke(ctx, OAuth_ListOAuthChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClient) CreateOAuthChannel(ctx context.Context, in *CreateOAuthChannelRequest, opts ...grpc.CallOption) (*CreateOAuthChannelReply, error) {
	out := new(CreateOAuthChannelReply)
	err := c.cc.Invoke(ctx, OAuth_CreateOAuthChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClient) UpdateOAuthChannel(ctx context.Context, in *UpdateOAuthChannelRequest, opts ...grpc.CallOption) (*UpdateOAuthChannelReply, error) {
	out := new(UpdateOAuthChannelReply)
	err := c.cc.Invoke(ctx, OAuth_UpdateOAuthChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClient) DeleteOAuthChannel(ctx context.Context, in *DeleteOAuthChannelRequest, opts ...grpc.CallOption) (*DeleteOAuthChannelReply, error) {
	out := new(DeleteOAuthChannelReply)
	err := c.cc.Invoke(ctx, OAuth_DeleteOAuthChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServer is the server API for OAuth service.
// All implementations must embed UnimplementedOAuthServer
// for forward compatibility
type OAuthServer interface {
	// ListOAuthChannelType 获取登陆渠道可用列表
	ListOAuthChannelType(context.Context, *ListOAuthChannelTypeRequest) (*ListOAuthChannelTypeReply, error)
	// ListOAuthChannel 获取登陆渠道列表
	ListOAuthChannel(context.Context, *ListOAuthChannelRequest) (*ListOAuthChannelReply, error)
	// CreateOAuthChannel 创建登陆渠道
	CreateOAuthChannel(context.Context, *CreateOAuthChannelRequest) (*CreateOAuthChannelReply, error)
	// UpdateOAuthChannel 更新登陆渠道
	UpdateOAuthChannel(context.Context, *UpdateOAuthChannelRequest) (*UpdateOAuthChannelReply, error)
	// DeleteOAuthChannel 删除登陆渠道
	DeleteOAuthChannel(context.Context, *DeleteOAuthChannelRequest) (*DeleteOAuthChannelReply, error)
	mustEmbedUnimplementedOAuthServer()
}

// UnimplementedOAuthServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthServer struct{}

func (UnimplementedOAuthServer) ListOAuthChannelType(context.Context, *ListOAuthChannelTypeRequest) (*ListOAuthChannelTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuthChannelType not implemented")
}

func (UnimplementedOAuthServer) ListOAuthChannel(context.Context, *ListOAuthChannelRequest) (*ListOAuthChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuthChannel not implemented")
}

func (UnimplementedOAuthServer) CreateOAuthChannel(context.Context, *CreateOAuthChannelRequest) (*CreateOAuthChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuthChannel not implemented")
}

func (UnimplementedOAuthServer) UpdateOAuthChannel(context.Context, *UpdateOAuthChannelRequest) (*UpdateOAuthChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuthChannel not implemented")
}

func (UnimplementedOAuthServer) DeleteOAuthChannel(context.Context, *DeleteOAuthChannelRequest) (*DeleteOAuthChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuthChannel not implemented")
}
func (UnimplementedOAuthServer) mustEmbedUnimplementedOAuthServer() {}

// UnsafeOAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServer will
// result in compilation errors.
type UnsafeOAuthServer interface {
	mustEmbedUnimplementedOAuthServer()
}

func RegisterOAuthServer(s grpc.ServiceRegistrar, srv OAuthServer) {
	s.RegisterService(&OAuth_ServiceDesc, srv)
}

func _OAuth_ListOAuthChannelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthChannelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).ListOAuthChannelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth_ListOAuthChannelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).ListOAuthChannelType(ctx, req.(*ListOAuthChannelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth_ListOAuthChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).ListOAuthChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth_ListOAuthChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).ListOAuthChannel(ctx, req.(*ListOAuthChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth_CreateOAuthChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuthChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).CreateOAuthChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth_CreateOAuthChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).CreateOAuthChannel(ctx, req.(*CreateOAuthChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth_UpdateOAuthChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuthChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).UpdateOAuthChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth_UpdateOAuthChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).UpdateOAuthChannel(ctx, req.(*UpdateOAuthChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth_DeleteOAuthChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuthChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).DeleteOAuthChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth_DeleteOAuthChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).DeleteOAuthChannel(ctx, req.(*DeleteOAuthChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuth_ServiceDesc is the grpc.ServiceDesc for OAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.oauth.OAuth",
	HandlerType: (*OAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOAuthChannelType",
			Handler:    _OAuth_ListOAuthChannelType_Handler,
		},
		{
			MethodName: "ListOAuthChannel",
			Handler:    _OAuth_ListOAuthChannel_Handler,
		},
		{
			MethodName: "CreateOAuthChannel",
			Handler:    _OAuth_CreateOAuthChannel_Handler,
		},
		{
			MethodName: "UpdateOAuthChannel",
			Handler:    _OAuth_UpdateOAuthChannel_Handler,
		},
		{
			MethodName: "DeleteOAuthChannel",
			Handler:    _OAuth_DeleteOAuthChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oauth/proto/oauth_service.proto",
}
