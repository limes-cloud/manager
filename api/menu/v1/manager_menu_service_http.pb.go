// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: manager_menu_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddMenu = "/manager_menu.Service/AddMenu"
const OperationServiceDeleteMenu = "/manager_menu.Service/DeleteMenu"
const OperationServiceGetMenuTree = "/manager_menu.Service/GetMenuTree"
const OperationServiceGetMenuTreeFromRole = "/manager_menu.Service/GetMenuTreeFromRole"
const OperationServiceUpdateMenu = "/manager_menu.Service/UpdateMenu"

type ServiceHTTPServer interface {
	// AddMenu AddMenu 添加菜单
	AddMenu(context.Context, *AddMenuRequest) (*AddMenuReply, error)
	// DeleteMenu DeleteMenu 删除菜单
	DeleteMenu(context.Context, *DeleteMenuRequest) (*emptypb.Empty, error)
	// GetMenuTree GetMenuTree 获取菜单树
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error)
	// GetMenuTreeFromRole AllMenuFromRole 获取角色的全部菜单树
	GetMenuTreeFromRole(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error)
	// UpdateMenu UpdateMenu 更新菜单
	UpdateMenu(context.Context, *UpdateMenuRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/v1/menu/tree", _Service_GetMenuTree0_HTTP_Handler(srv))
	r.GET("/manager/v1/menu/tree/from/role", _Service_GetMenuTreeFromRole0_HTTP_Handler(srv))
	r.POST("/manager/v1/menu", _Service_AddMenu0_HTTP_Handler(srv))
	r.PUT("/manager/v1/menu", _Service_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/menu", _Service_DeleteMenu0_HTTP_Handler(srv))
}

func _Service_GetMenuTree0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetMenuTree(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetMenuTreeFromRole0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetMenuTreeFromRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetMenuTreeFromRole(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddMenu0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMenuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddMenu)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddMenu(ctx, req.(*AddMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateMenu0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteMenu0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddMenu(ctx context.Context, req *AddMenuRequest, opts ...http.CallOption) (rsp *AddMenuReply, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetMenuTree(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeReply, err error)
	GetMenuTreeFromRole(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeReply, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddMenu(ctx context.Context, in *AddMenuRequest, opts ...http.CallOption) (*AddMenuReply, error) {
	var out AddMenuReply
	pattern := "/manager/v1/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/menu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeReply, error) {
	var out GetMenuTreeReply
	pattern := "/manager/v1/menu/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetMenuTreeFromRole(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeReply, error) {
	var out GetMenuTreeReply
	pattern := "/manager/v1/menu/tree/from/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetMenuTreeFromRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
