// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: manager_object_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddObject = "/manager_object.Service/AddObject"
const OperationServiceDeleteObject = "/manager_object.Service/DeleteObject"
const OperationServiceGetObject = "/manager_object.Service/GetObject"
const OperationServicePageObject = "/manager_object.Service/PageObject"
const OperationServiceUpdateObject = "/manager_object.Service/UpdateObject"

type ServiceHTTPServer interface {
	// AddObject AddObject 删除资源对象信息
	AddObject(context.Context, *AddObjectRequest) (*AddObjectReply, error)
	// DeleteObject DeleteObject 删除资源对象信息
	DeleteObject(context.Context, *DeleteObjectRequest) (*emptypb.Empty, error)
	// GetObject GetObject 获取指定资源对象信息
	GetObject(context.Context, *GetObjectRequest) (*Object, error)
	// PageObject PageObject 分页获取资源对象信息
	PageObject(context.Context, *PageObjectRequest) (*PageObjectReply, error)
	// UpdateObject UpdateObject 更新资源对象信息
	UpdateObject(context.Context, *UpdateObjectRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/v1/object", _Service_GetObject0_HTTP_Handler(srv))
	r.GET("/manager/v1/objects", _Service_PageObject0_HTTP_Handler(srv))
	r.POST("/manager/v1/object", _Service_AddObject0_HTTP_Handler(srv))
	r.PUT("/manager/v1/object", _Service_UpdateObject0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/object", _Service_DeleteObject0_HTTP_Handler(srv))
}

func _Service_GetObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetObjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetObject(ctx, req.(*GetObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Object)
		return ctx.Result(200, reply)
	}
}

func _Service_PageObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageObjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageObject(ctx, req.(*PageObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageObjectReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddObject(ctx, req.(*AddObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddObjectReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateObject(ctx, req.(*UpdateObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteObject0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteObjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteObject)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteObject(ctx, req.(*DeleteObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddObject(ctx context.Context, req *AddObjectRequest, opts ...http.CallOption) (rsp *AddObjectReply, err error)
	DeleteObject(ctx context.Context, req *DeleteObjectRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetObject(ctx context.Context, req *GetObjectRequest, opts ...http.CallOption) (rsp *Object, err error)
	PageObject(ctx context.Context, req *PageObjectRequest, opts ...http.CallOption) (rsp *PageObjectReply, err error)
	UpdateObject(ctx context.Context, req *UpdateObjectRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddObject(ctx context.Context, in *AddObjectRequest, opts ...http.CallOption) (*AddObjectReply, error) {
	var out AddObjectReply
	pattern := "/manager/v1/object"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/object"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetObject(ctx context.Context, in *GetObjectRequest, opts ...http.CallOption) (*Object, error) {
	var out Object
	pattern := "/manager/v1/object"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageObject(ctx context.Context, in *PageObjectRequest, opts ...http.CallOption) (*PageObjectReply, error) {
	var out PageObjectReply
	pattern := "/manager/v1/objects"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/object"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
