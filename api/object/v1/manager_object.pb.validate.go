// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager_object.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Api

	// no validation rules for Method

	// no validation rules for Params

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Description

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on GetObjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetObjectRequestMultiError, or nil if none found.
func (m *GetObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetObjectRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetObjectRequestMultiError(errors)
	}

	return nil
}

// GetObjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetObjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetObjectRequestMultiError) AllErrors() []error { return m }

// GetObjectRequestValidationError is the validation error returned by
// GetObjectRequest.Validate if the designated constraints aren't met.
type GetObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectRequestValidationError) ErrorName() string { return "GetObjectRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectRequestValidationError{}

// Validate checks the field values on PageObjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageObjectRequestMultiError, or nil if none found.
func (m *PageObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageObjectRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageObjectRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return PageObjectRequestMultiError(errors)
	}

	return nil
}

// PageObjectRequestMultiError is an error wrapping multiple validation errors
// returned by PageObjectRequest.ValidateAll() if the designated constraints
// aren't met.
type PageObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageObjectRequestMultiError) AllErrors() []error { return m }

// PageObjectRequestValidationError is the validation error returned by
// PageObjectRequest.Validate if the designated constraints aren't met.
type PageObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageObjectRequestValidationError) ErrorName() string {
	return "PageObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageObjectRequestValidationError{}

// Validate checks the field values on PageObjectReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageObjectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageObjectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageObjectReplyMultiError, or nil if none found.
func (m *PageObjectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageObjectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageObjectReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageObjectReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageObjectReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageObjectReplyMultiError(errors)
	}

	return nil
}

// PageObjectReplyMultiError is an error wrapping multiple validation errors
// returned by PageObjectReply.ValidateAll() if the designated constraints
// aren't met.
type PageObjectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageObjectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageObjectReplyMultiError) AllErrors() []error { return m }

// PageObjectReplyValidationError is the validation error returned by
// PageObjectReply.Validate if the designated constraints aren't met.
type PageObjectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageObjectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageObjectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageObjectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageObjectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageObjectReplyValidationError) ErrorName() string { return "PageObjectReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageObjectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageObjectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageObjectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageObjectReplyValidationError{}

// Validate checks the field values on AddObjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddObjectRequestMultiError, or nil if none found.
func (m *AddObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApi()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Api",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddObjectRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Params != nil {
		// no validation rules for Params
	}

	if len(errors) > 0 {
		return AddObjectRequestMultiError(errors)
	}

	return nil
}

// AddObjectRequestMultiError is an error wrapping multiple validation errors
// returned by AddObjectRequest.ValidateAll() if the designated constraints
// aren't met.
type AddObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddObjectRequestMultiError) AllErrors() []error { return m }

// AddObjectRequestValidationError is the validation error returned by
// AddObjectRequest.Validate if the designated constraints aren't met.
type AddObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddObjectRequestValidationError) ErrorName() string { return "AddObjectRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddObjectRequestValidationError{}

// Validate checks the field values on AddObjectReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddObjectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddObjectReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddObjectReplyMultiError,
// or nil if none found.
func (m *AddObjectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddObjectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddObjectReplyMultiError(errors)
	}

	return nil
}

// AddObjectReplyMultiError is an error wrapping multiple validation errors
// returned by AddObjectReply.ValidateAll() if the designated constraints
// aren't met.
type AddObjectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddObjectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddObjectReplyMultiError) AllErrors() []error { return m }

// AddObjectReplyValidationError is the validation error returned by
// AddObjectReply.Validate if the designated constraints aren't met.
type AddObjectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddObjectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddObjectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddObjectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddObjectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddObjectReplyValidationError) ErrorName() string { return "AddObjectReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddObjectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddObjectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddObjectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddObjectReplyValidationError{}

// Validate checks the field values on UpdateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateObjectRequestMultiError, or nil if none found.
func (m *UpdateObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateObjectRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApi()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Api",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateObjectRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Params != nil {
		// no validation rules for Params
	}

	if len(errors) > 0 {
		return UpdateObjectRequestMultiError(errors)
	}

	return nil
}

// UpdateObjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateObjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateObjectRequestMultiError) AllErrors() []error { return m }

// UpdateObjectRequestValidationError is the validation error returned by
// UpdateObjectRequest.Validate if the designated constraints aren't met.
type UpdateObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectRequestValidationError) ErrorName() string {
	return "UpdateObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectRequestValidationError{}

// Validate checks the field values on DeleteObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteObjectRequestMultiError, or nil if none found.
func (m *DeleteObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteObjectRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteObjectRequestMultiError(errors)
	}

	return nil
}

// DeleteObjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteObjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteObjectRequestMultiError) AllErrors() []error { return m }

// DeleteObjectRequestValidationError is the validation error returned by
// DeleteObjectRequest.Validate if the designated constraints aren't met.
type DeleteObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectRequestValidationError) ErrorName() string {
	return "DeleteObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectRequestValidationError{}
