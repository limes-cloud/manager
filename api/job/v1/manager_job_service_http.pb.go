// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: manager_job_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddJob = "/manager_job.Service/AddJob"
const OperationServiceDeleteJob = "/manager_job.Service/DeleteJob"
const OperationServicePageJob = "/manager_job.Service/PageJob"
const OperationServiceUpdateJob = "/manager_job.Service/UpdateJob"

type ServiceHTTPServer interface {
	// AddJob AddJob 修改职位信息
	AddJob(context.Context, *AddJobRequest) (*AddJobReply, error)
	// DeleteJob DeleteJob 删除职位信息
	DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error)
	// PageJob PageJob 分页获取职位信息
	PageJob(context.Context, *PageJobRequest) (*PageJobReply, error)
	// UpdateJob UpdateJob 更新职位信息
	UpdateJob(context.Context, *UpdateJobRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/v1/jobs", _Service_PageJob0_HTTP_Handler(srv))
	r.POST("/manager/v1/job", _Service_AddJob0_HTTP_Handler(srv))
	r.PUT("/manager/v1/job", _Service_UpdateJob0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/job", _Service_DeleteJob0_HTTP_Handler(srv))
}

func _Service_PageJob0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageJob(ctx, req.(*PageJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageJobReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddJob0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddJob(ctx, req.(*AddJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddJobReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateJob0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateJob(ctx, req.(*UpdateJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteJob0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteJob(ctx, req.(*DeleteJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddJob(ctx context.Context, req *AddJobRequest, opts ...http.CallOption) (rsp *AddJobReply, err error)
	DeleteJob(ctx context.Context, req *DeleteJobRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PageJob(ctx context.Context, req *PageJobRequest, opts ...http.CallOption) (rsp *PageJobReply, err error)
	UpdateJob(ctx context.Context, req *UpdateJobRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddJob(ctx context.Context, in *AddJobRequest, opts ...http.CallOption) (*AddJobReply, error) {
	var out AddJobReply
	pattern := "/manager/v1/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageJob(ctx context.Context, in *PageJobRequest, opts ...http.CallOption) (*PageJobReply, error) {
	var out PageJobReply
	pattern := "/manager/v1/jobs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
