// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/userdept/proto/userdept.proto

package userdept

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserDeptRequestMultiError, or nil if none found.
func (m *CreateUserDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := CreateUserDeptRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeptId() < 1 {
		err := CreateUserDeptRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetJobId() < 1 {
		err := CreateUserDeptRequestValidationError{
			field:  "JobId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserDeptRequestMultiError(errors)
	}

	return nil
}

// CreateUserDeptRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserDeptRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDeptRequestMultiError) AllErrors() []error { return m }

// CreateUserDeptRequestValidationError is the validation error returned by
// CreateUserDeptRequest.Validate if the designated constraints aren't met.
type CreateUserDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDeptRequestValidationError) ErrorName() string {
	return "CreateUserDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDeptRequestValidationError{}

// Validate checks the field values on CreateUserDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserDeptReplyMultiError, or nil if none found.
func (m *CreateUserDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserDeptReplyMultiError(errors)
	}

	return nil
}

// CreateUserDeptReplyMultiError is an error wrapping multiple validation
// errors returned by CreateUserDeptReply.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDeptReplyMultiError) AllErrors() []error { return m }

// CreateUserDeptReplyValidationError is the validation error returned by
// CreateUserDeptReply.Validate if the designated constraints aren't met.
type CreateUserDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDeptReplyValidationError) ErrorName() string {
	return "CreateUserDeptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDeptReplyValidationError{}

// Validate checks the field values on ListUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDeptRequestMultiError, or nil if none found.
func (m *ListUserDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListUserDeptRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListUserDeptRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := ListUserDeptRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListUserDeptRequestMultiError(errors)
	}

	return nil
}

// ListUserDeptRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserDeptRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDeptRequestMultiError) AllErrors() []error { return m }

// ListUserDeptRequestValidationError is the validation error returned by
// ListUserDeptRequest.Validate if the designated constraints aren't met.
type ListUserDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDeptRequestValidationError) ErrorName() string {
	return "ListUserDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDeptRequestValidationError{}

// Validate checks the field values on ListUserDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDeptReplyMultiError, or nil if none found.
func (m *ListUserDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDeptReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserDeptReplyMultiError(errors)
	}

	return nil
}

// ListUserDeptReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserDeptReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDeptReplyMultiError) AllErrors() []error { return m }

// ListUserDeptReplyValidationError is the validation error returned by
// ListUserDeptReply.Validate if the designated constraints aren't met.
type ListUserDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDeptReplyValidationError) ErrorName() string {
	return "ListUserDeptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDeptReplyValidationError{}

// Validate checks the field values on ListDeptUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptUserRequestMultiError, or nil if none found.
func (m *ListDeptUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListDeptUserRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListDeptUserRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeptId() < 1 {
		err := ListDeptUserRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListDeptUserRequestMultiError(errors)
	}

	return nil
}

// ListDeptUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeptUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeptUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptUserRequestMultiError) AllErrors() []error { return m }

// ListDeptUserRequestValidationError is the validation error returned by
// ListDeptUserRequest.Validate if the designated constraints aren't met.
type ListDeptUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptUserRequestValidationError) ErrorName() string {
	return "ListDeptUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptUserRequestValidationError{}

// Validate checks the field values on ListDeptUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeptUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptUserReplyMultiError, or nil if none found.
func (m *ListDeptUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDeptUserReplyMultiError(errors)
	}

	return nil
}

// ListDeptUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeptUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeptUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptUserReplyMultiError) AllErrors() []error { return m }

// ListDeptUserReplyValidationError is the validation error returned by
// ListDeptUserReply.Validate if the designated constraints aren't met.
type ListDeptUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptUserReplyValidationError) ErrorName() string {
	return "ListDeptUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptUserReplyValidationError{}

// Validate checks the field values on DeleteUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserDeptRequestMultiError, or nil if none found.
func (m *DeleteUserDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := DeleteUserDeptRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeptId() < 1 {
		err := DeleteUserDeptRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserDeptRequestMultiError(errors)
	}

	return nil
}

// DeleteUserDeptRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserDeptRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDeptRequestMultiError) AllErrors() []error { return m }

// DeleteUserDeptRequestValidationError is the validation error returned by
// DeleteUserDeptRequest.Validate if the designated constraints aren't met.
type DeleteUserDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDeptRequestValidationError) ErrorName() string {
	return "DeleteUserDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDeptRequestValidationError{}

// Validate checks the field values on DeleteUserDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserDeptReplyMultiError, or nil if none found.
func (m *DeleteUserDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserDeptReplyMultiError(errors)
	}

	return nil
}

// DeleteUserDeptReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteUserDeptReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDeptReplyMultiError) AllErrors() []error { return m }

// DeleteUserDeptReplyValidationError is the validation error returned by
// DeleteUserDeptReply.Validate if the designated constraints aren't met.
type DeleteUserDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDeptReplyValidationError) ErrorName() string {
	return "DeleteUserDeptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDeptReplyValidationError{}

// Validate checks the field values on ListUserDeptReply_Dept with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDeptReply_Dept) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDeptReply_Dept with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDeptReply_DeptMultiError, or nil if none found.
func (m *ListUserDeptReply_Dept) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDeptReply_Dept) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListUserDeptReply_DeptMultiError(errors)
	}

	return nil
}

// ListUserDeptReply_DeptMultiError is an error wrapping multiple validation
// errors returned by ListUserDeptReply_Dept.ValidateAll() if the designated
// constraints aren't met.
type ListUserDeptReply_DeptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDeptReply_DeptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDeptReply_DeptMultiError) AllErrors() []error { return m }

// ListUserDeptReply_DeptValidationError is the validation error returned by
// ListUserDeptReply_Dept.Validate if the designated constraints aren't met.
type ListUserDeptReply_DeptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDeptReply_DeptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDeptReply_DeptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDeptReply_DeptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDeptReply_DeptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDeptReply_DeptValidationError) ErrorName() string {
	return "ListUserDeptReply_DeptValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDeptReply_DeptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDeptReply_Dept.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDeptReply_DeptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDeptReply_DeptValidationError{}

// Validate checks the field values on ListDeptUserReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptUserReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptUserReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptUserReply_DataMultiError, or nil if none found.
func (m *ListDeptUserReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptUserReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	if len(errors) > 0 {
		return ListDeptUserReply_DataMultiError(errors)
	}

	return nil
}

// ListDeptUserReply_DataMultiError is an error wrapping multiple validation
// errors returned by ListDeptUserReply_Data.ValidateAll() if the designated
// constraints aren't met.
type ListDeptUserReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptUserReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptUserReply_DataMultiError) AllErrors() []error { return m }

// ListDeptUserReply_DataValidationError is the validation error returned by
// ListDeptUserReply_Data.Validate if the designated constraints aren't met.
type ListDeptUserReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptUserReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptUserReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptUserReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptUserReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptUserReply_DataValidationError) ErrorName() string {
	return "ListDeptUserReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptUserReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptUserReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptUserReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptUserReply_DataValidationError{}
