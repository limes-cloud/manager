// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/userdept/proto/userdept_service.proto

package userdept

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserDept_ListUserDept_FullMethodName   = "/manager.api.userdept.UserDept/ListUserDept"
	UserDept_CreateUserDept_FullMethodName = "/manager.api.userdept.UserDept/CreateUserDept"
	UserDept_DeleteUserDept_FullMethodName = "/manager.api.userdept.UserDept/DeleteUserDept"
	UserDept_ListDeptUser_FullMethodName   = "/manager.api.userdept.UserDept/ListDeptUser"
)

// UserDeptClient is the client API for UserDept service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeptClient interface {
	ListUserDept(ctx context.Context, in *ListUserDeptRequest, opts ...grpc.CallOption) (*ListUserDeptReply, error)
	CreateUserDept(ctx context.Context, in *CreateUserDeptRequest, opts ...grpc.CallOption) (*CreateUserDeptReply, error)
	DeleteUserDept(ctx context.Context, in *DeleteUserDeptRequest, opts ...grpc.CallOption) (*DeleteUserDeptReply, error)
	ListDeptUser(ctx context.Context, in *ListDeptUserRequest, opts ...grpc.CallOption) (*ListDeptUserReply, error)
}

type userDeptClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeptClient(cc grpc.ClientConnInterface) UserDeptClient {
	return &userDeptClient{cc}
}

func (c *userDeptClient) ListUserDept(ctx context.Context, in *ListUserDeptRequest, opts ...grpc.CallOption) (*ListUserDeptReply, error) {
	out := new(ListUserDeptReply)
	err := c.cc.Invoke(ctx, UserDept_ListUserDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptClient) CreateUserDept(ctx context.Context, in *CreateUserDeptRequest, opts ...grpc.CallOption) (*CreateUserDeptReply, error) {
	out := new(CreateUserDeptReply)
	err := c.cc.Invoke(ctx, UserDept_CreateUserDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptClient) DeleteUserDept(ctx context.Context, in *DeleteUserDeptRequest, opts ...grpc.CallOption) (*DeleteUserDeptReply, error) {
	out := new(DeleteUserDeptReply)
	err := c.cc.Invoke(ctx, UserDept_DeleteUserDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptClient) ListDeptUser(ctx context.Context, in *ListDeptUserRequest, opts ...grpc.CallOption) (*ListDeptUserReply, error) {
	out := new(ListDeptUserReply)
	err := c.cc.Invoke(ctx, UserDept_ListDeptUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeptServer is the server API for UserDept service.
// All implementations must embed UnimplementedUserDeptServer
// for forward compatibility
type UserDeptServer interface {
	ListUserDept(context.Context, *ListUserDeptRequest) (*ListUserDeptReply, error)
	CreateUserDept(context.Context, *CreateUserDeptRequest) (*CreateUserDeptReply, error)
	DeleteUserDept(context.Context, *DeleteUserDeptRequest) (*DeleteUserDeptReply, error)
	ListDeptUser(context.Context, *ListDeptUserRequest) (*ListDeptUserReply, error)
	mustEmbedUnimplementedUserDeptServer()
}

// UnimplementedUserDeptServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeptServer struct {
}

func (UnimplementedUserDeptServer) ListUserDept(context.Context, *ListUserDeptRequest) (*ListUserDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDept not implemented")
}
func (UnimplementedUserDeptServer) CreateUserDept(context.Context, *CreateUserDeptRequest) (*CreateUserDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDept not implemented")
}
func (UnimplementedUserDeptServer) DeleteUserDept(context.Context, *DeleteUserDeptRequest) (*DeleteUserDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDept not implemented")
}
func (UnimplementedUserDeptServer) ListDeptUser(context.Context, *ListDeptUserRequest) (*ListDeptUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptUser not implemented")
}
func (UnimplementedUserDeptServer) mustEmbedUnimplementedUserDeptServer() {}

// UnsafeUserDeptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeptServer will
// result in compilation errors.
type UnsafeUserDeptServer interface {
	mustEmbedUnimplementedUserDeptServer()
}

func RegisterUserDeptServer(s grpc.ServiceRegistrar, srv UserDeptServer) {
	s.RegisterService(&UserDept_ServiceDesc, srv)
}

func _UserDept_ListUserDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).ListUserDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_ListUserDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).ListUserDept(ctx, req.(*ListUserDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDept_CreateUserDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).CreateUserDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_CreateUserDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).CreateUserDept(ctx, req.(*CreateUserDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDept_DeleteUserDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).DeleteUserDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_DeleteUserDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).DeleteUserDept(ctx, req.(*DeleteUserDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDept_ListDeptUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).ListDeptUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_ListDeptUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).ListDeptUser(ctx, req.(*ListDeptUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDept_ServiceDesc is the grpc.ServiceDesc for UserDept service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDept_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.userdept.UserDept",
	HandlerType: (*UserDeptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserDept",
			Handler:    _UserDept_ListUserDept_Handler,
		},
		{
			MethodName: "CreateUserDept",
			Handler:    _UserDept_CreateUserDept_Handler,
		},
		{
			MethodName: "DeleteUserDept",
			Handler:    _UserDept_DeleteUserDept_Handler,
		},
		{
			MethodName: "ListDeptUser",
			Handler:    _UserDept_ListDeptUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/userdept/proto/userdept_service.proto",
}
