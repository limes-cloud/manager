// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/dept/proto/dept_service.proto

package dept

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dept_ListDeptClassify_FullMethodName   = "/manager.api.dept.Dept/ListDeptClassify"
	Dept_CreateDeptClassify_FullMethodName = "/manager.api.dept.Dept/CreateDeptClassify"
	Dept_UpdateDeptClassify_FullMethodName = "/manager.api.dept.Dept/UpdateDeptClassify"
	Dept_DeleteDeptClassify_FullMethodName = "/manager.api.dept.Dept/DeleteDeptClassify"
	Dept_ListCurrentDept_FullMethodName    = "/manager.api.dept.Dept/ListCurrentDept"
	Dept_ListDept_FullMethodName           = "/manager.api.dept.Dept/ListDept"
	Dept_CreateDept_FullMethodName         = "/manager.api.dept.Dept/CreateDept"
	Dept_UpdateDept_FullMethodName         = "/manager.api.dept.Dept/UpdateDept"
	Dept_DeleteDept_FullMethodName         = "/manager.api.dept.Dept/DeleteDept"
	Dept_GetDept_FullMethodName            = "/manager.api.dept.Dept/GetDept"
)

// DeptClient is the client API for Dept service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeptClient interface {
	// ListDeptClassify 获取部门分类列表
	ListDeptClassify(ctx context.Context, in *ListDeptClassifyRequest, opts ...grpc.CallOption) (*ListDeptClassifyReply, error)
	// CreateDeptClassify 创建部门分类
	CreateDeptClassify(ctx context.Context, in *CreateDeptClassifyRequest, opts ...grpc.CallOption) (*CreateDeptClassifyReply, error)
	// UpdateDeptClassify 更新部门分类
	UpdateDeptClassify(ctx context.Context, in *UpdateDeptClassifyRequest, opts ...grpc.CallOption) (*UpdateDeptClassifyReply, error)
	// DeleteDeptClassify 删除部门分类
	DeleteDeptClassify(ctx context.Context, in *DeleteDeptClassifyRequest, opts ...grpc.CallOption) (*DeleteDeptClassifyReply, error)
	// ListCurrentDept 获取当前的部门信息列表
	ListCurrentDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error)
	// ListDept 获取部门信息列表
	ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error)
	// CreateDept 创建部门信息
	CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptReply, error)
	// UpdateDept 更新部门信息
	UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptReply, error)
	// DeleteDept 删除部门信息
	DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptReply, error)
	// GetDept 获取指定的部门信息
	GetDept(ctx context.Context, in *GetDeptRequest, opts ...grpc.CallOption) (*GetDeptReply, error)
}

type deptClient struct {
	cc grpc.ClientConnInterface
}

func NewDeptClient(cc grpc.ClientConnInterface) DeptClient {
	return &deptClient{cc}
}

func (c *deptClient) ListDeptClassify(ctx context.Context, in *ListDeptClassifyRequest, opts ...grpc.CallOption) (*ListDeptClassifyReply, error) {
	out := new(ListDeptClassifyReply)
	err := c.cc.Invoke(ctx, Dept_ListDeptClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) CreateDeptClassify(ctx context.Context, in *CreateDeptClassifyRequest, opts ...grpc.CallOption) (*CreateDeptClassifyReply, error) {
	out := new(CreateDeptClassifyReply)
	err := c.cc.Invoke(ctx, Dept_CreateDeptClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) UpdateDeptClassify(ctx context.Context, in *UpdateDeptClassifyRequest, opts ...grpc.CallOption) (*UpdateDeptClassifyReply, error) {
	out := new(UpdateDeptClassifyReply)
	err := c.cc.Invoke(ctx, Dept_UpdateDeptClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) DeleteDeptClassify(ctx context.Context, in *DeleteDeptClassifyRequest, opts ...grpc.CallOption) (*DeleteDeptClassifyReply, error) {
	out := new(DeleteDeptClassifyReply)
	err := c.cc.Invoke(ctx, Dept_DeleteDeptClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) ListCurrentDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error) {
	out := new(ListDeptReply)
	err := c.cc.Invoke(ctx, Dept_ListCurrentDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error) {
	out := new(ListDeptReply)
	err := c.cc.Invoke(ctx, Dept_ListDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptReply, error) {
	out := new(CreateDeptReply)
	err := c.cc.Invoke(ctx, Dept_CreateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptReply, error) {
	out := new(UpdateDeptReply)
	err := c.cc.Invoke(ctx, Dept_UpdateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptReply, error) {
	out := new(DeleteDeptReply)
	err := c.cc.Invoke(ctx, Dept_DeleteDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) GetDept(ctx context.Context, in *GetDeptRequest, opts ...grpc.CallOption) (*GetDeptReply, error) {
	out := new(GetDeptReply)
	err := c.cc.Invoke(ctx, Dept_GetDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptServer is the server API for Dept service.
// All implementations must embed UnimplementedDeptServer
// for forward compatibility
type DeptServer interface {
	// ListDeptClassify 获取部门分类列表
	ListDeptClassify(context.Context, *ListDeptClassifyRequest) (*ListDeptClassifyReply, error)
	// CreateDeptClassify 创建部门分类
	CreateDeptClassify(context.Context, *CreateDeptClassifyRequest) (*CreateDeptClassifyReply, error)
	// UpdateDeptClassify 更新部门分类
	UpdateDeptClassify(context.Context, *UpdateDeptClassifyRequest) (*UpdateDeptClassifyReply, error)
	// DeleteDeptClassify 删除部门分类
	DeleteDeptClassify(context.Context, *DeleteDeptClassifyRequest) (*DeleteDeptClassifyReply, error)
	// ListCurrentDept 获取当前的部门信息列表
	ListCurrentDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// ListDept 获取部门信息列表
	ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// CreateDept 创建部门信息
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error)
	// UpdateDept 更新部门信息
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error)
	// DeleteDept 删除部门信息
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error)
	// GetDept 获取指定的部门信息
	GetDept(context.Context, *GetDeptRequest) (*GetDeptReply, error)
	mustEmbedUnimplementedDeptServer()
}

// UnimplementedDeptServer must be embedded to have forward compatible implementations.
type UnimplementedDeptServer struct{}

func (UnimplementedDeptServer) ListDeptClassify(context.Context, *ListDeptClassifyRequest) (*ListDeptClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptClassify not implemented")
}

func (UnimplementedDeptServer) CreateDeptClassify(context.Context, *CreateDeptClassifyRequest) (*CreateDeptClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeptClassify not implemented")
}

func (UnimplementedDeptServer) UpdateDeptClassify(context.Context, *UpdateDeptClassifyRequest) (*UpdateDeptClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeptClassify not implemented")
}

func (UnimplementedDeptServer) DeleteDeptClassify(context.Context, *DeleteDeptClassifyRequest) (*DeleteDeptClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeptClassify not implemented")
}

func (UnimplementedDeptServer) ListCurrentDept(context.Context, *ListDeptRequest) (*ListDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentDept not implemented")
}

func (UnimplementedDeptServer) ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDept not implemented")
}

func (UnimplementedDeptServer) CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDept not implemented")
}

func (UnimplementedDeptServer) UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}

func (UnimplementedDeptServer) DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}

func (UnimplementedDeptServer) GetDept(context.Context, *GetDeptRequest) (*GetDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDept not implemented")
}
func (UnimplementedDeptServer) mustEmbedUnimplementedDeptServer() {}

// UnsafeDeptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeptServer will
// result in compilation errors.
type UnsafeDeptServer interface {
	mustEmbedUnimplementedDeptServer()
}

func RegisterDeptServer(s grpc.ServiceRegistrar, srv DeptServer) {
	s.RegisterService(&Dept_ServiceDesc, srv)
}

func _Dept_ListDeptClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).ListDeptClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_ListDeptClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).ListDeptClassify(ctx, req.(*ListDeptClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_CreateDeptClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).CreateDeptClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_CreateDeptClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).CreateDeptClassify(ctx, req.(*CreateDeptClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_UpdateDeptClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).UpdateDeptClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_UpdateDeptClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).UpdateDeptClassify(ctx, req.(*UpdateDeptClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_DeleteDeptClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).DeleteDeptClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_DeleteDeptClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).DeleteDeptClassify(ctx, req.(*DeleteDeptClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_ListCurrentDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).ListCurrentDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_ListCurrentDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).ListCurrentDept(ctx, req.(*ListDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_ListDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).ListDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_ListDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).ListDept(ctx, req.(*ListDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_CreateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).CreateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_CreateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).CreateDept(ctx, req.(*CreateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).UpdateDept(ctx, req.(*UpdateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_DeleteDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).DeleteDept(ctx, req.(*DeleteDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_GetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).GetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_GetDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).GetDept(ctx, req.(*GetDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dept_ServiceDesc is the grpc.ServiceDesc for Dept service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dept_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.dept.Dept",
	HandlerType: (*DeptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeptClassify",
			Handler:    _Dept_ListDeptClassify_Handler,
		},
		{
			MethodName: "CreateDeptClassify",
			Handler:    _Dept_CreateDeptClassify_Handler,
		},
		{
			MethodName: "UpdateDeptClassify",
			Handler:    _Dept_UpdateDeptClassify_Handler,
		},
		{
			MethodName: "DeleteDeptClassify",
			Handler:    _Dept_DeleteDeptClassify_Handler,
		},
		{
			MethodName: "ListCurrentDept",
			Handler:    _Dept_ListCurrentDept_Handler,
		},
		{
			MethodName: "ListDept",
			Handler:    _Dept_ListDept_Handler,
		},
		{
			MethodName: "CreateDept",
			Handler:    _Dept_CreateDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _Dept_UpdateDept_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _Dept_DeleteDept_Handler,
		},
		{
			MethodName: "GetDept",
			Handler:    _Dept_GetDept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dept/proto/dept_service.proto",
}
