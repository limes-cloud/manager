// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/dept/proto/dept_service.proto

package dept

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationDeptCreateDept         = "/manager.api.dept.Dept/CreateDept"
	OperationDeptCreateDeptClassify = "/manager.api.dept.Dept/CreateDeptClassify"
	OperationDeptDeleteDept         = "/manager.api.dept.Dept/DeleteDept"
	OperationDeptDeleteDeptClassify = "/manager.api.dept.Dept/DeleteDeptClassify"
	OperationDeptGetDept            = "/manager.api.dept.Dept/GetDept"
	OperationDeptListCurrentDept    = "/manager.api.dept.Dept/ListCurrentDept"
	OperationDeptListDept           = "/manager.api.dept.Dept/ListDept"
	OperationDeptListDeptClassify   = "/manager.api.dept.Dept/ListDeptClassify"
	OperationDeptUpdateDept         = "/manager.api.dept.Dept/UpdateDept"
	OperationDeptUpdateDeptClassify = "/manager.api.dept.Dept/UpdateDeptClassify"
)

type DeptHTTPServer interface {
	// CreateDept CreateDept 创建部门信息
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error)
	// CreateDeptClassify CreateDeptClassify 创建部门分类
	CreateDeptClassify(context.Context, *CreateDeptClassifyRequest) (*CreateDeptClassifyReply, error)
	// DeleteDept DeleteDept 删除部门信息
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error)
	// DeleteDeptClassify DeleteDeptClassify 删除部门分类
	DeleteDeptClassify(context.Context, *DeleteDeptClassifyRequest) (*DeleteDeptClassifyReply, error)
	// GetDept GetDept 获取指定的部门信息
	GetDept(context.Context, *GetDeptRequest) (*GetDeptReply, error)
	// ListCurrentDept ListCurrentDept 获取当前的部门信息列表
	ListCurrentDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// ListDept ListDept 获取部门信息列表
	ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// ListDeptClassify ListDeptClassify 获取部门分类列表
	ListDeptClassify(context.Context, *ListDeptClassifyRequest) (*ListDeptClassifyReply, error)
	// UpdateDept UpdateDept 更新部门信息
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error)
	// UpdateDeptClassify UpdateDeptClassify 更新部门分类
	UpdateDeptClassify(context.Context, *UpdateDeptClassifyRequest) (*UpdateDeptClassifyReply, error)
}

func RegisterDeptHTTPServer(s *http.Server, srv DeptHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/dept/classifies", _Dept_ListDeptClassify0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/dept/classify", _Dept_CreateDeptClassify0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/dept/classify", _Dept_UpdateDeptClassify0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/dept/classify", _Dept_DeleteDeptClassify0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/current/depts", _Dept_ListCurrentDept0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/depts", _Dept_ListDept0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/dept", _Dept_CreateDept0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/dept", _Dept_UpdateDept0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/dept", _Dept_DeleteDept0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/dept", _Dept_GetDept0_HTTP_Handler(srv))
}

func _Dept_ListDeptClassify0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptListDeptClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListDeptClassify(ctx, req.(*ListDeptClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_CreateDeptClassify0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeptClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptCreateDeptClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateDeptClassify(ctx, req.(*CreateDeptClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDeptClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_UpdateDeptClassify0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptUpdateDeptClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDeptClassify(ctx, req.(*UpdateDeptClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_DeleteDeptClassify0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeptClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptDeleteDeptClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDeptClassify(ctx, req.(*DeleteDeptClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeptClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_ListCurrentDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptListCurrentDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListCurrentDept(ctx, req.(*ListDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_ListDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptListDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListDept(ctx, req.(*ListDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_CreateDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptCreateDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateDept(ctx, req.(*CreateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_UpdateDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDept(ctx, req.(*UpdateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_DeleteDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptDeleteDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDept(ctx, req.(*DeleteDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_GetDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptGetDept)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDept(ctx, req.(*GetDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeptReply)
		return ctx.Result(200, reply)
	}
}

type DeptHTTPClient interface {
	CreateDept(ctx context.Context, req *CreateDeptRequest, opts ...http.CallOption) (rsp *CreateDeptReply, err error)
	CreateDeptClassify(ctx context.Context, req *CreateDeptClassifyRequest, opts ...http.CallOption) (rsp *CreateDeptClassifyReply, err error)
	DeleteDept(ctx context.Context, req *DeleteDeptRequest, opts ...http.CallOption) (rsp *DeleteDeptReply, err error)
	DeleteDeptClassify(ctx context.Context, req *DeleteDeptClassifyRequest, opts ...http.CallOption) (rsp *DeleteDeptClassifyReply, err error)
	GetDept(ctx context.Context, req *GetDeptRequest, opts ...http.CallOption) (rsp *GetDeptReply, err error)
	ListCurrentDept(ctx context.Context, req *ListDeptRequest, opts ...http.CallOption) (rsp *ListDeptReply, err error)
	ListDept(ctx context.Context, req *ListDeptRequest, opts ...http.CallOption) (rsp *ListDeptReply, err error)
	ListDeptClassify(ctx context.Context, req *ListDeptClassifyRequest, opts ...http.CallOption) (rsp *ListDeptClassifyReply, err error)
	UpdateDept(ctx context.Context, req *UpdateDeptRequest, opts ...http.CallOption) (rsp *UpdateDeptReply, err error)
	UpdateDeptClassify(ctx context.Context, req *UpdateDeptClassifyRequest, opts ...http.CallOption) (rsp *UpdateDeptClassifyReply, err error)
}

type DeptHTTPClientImpl struct {
	cc *http.Client
}

func NewDeptHTTPClient(client *http.Client) DeptHTTPClient {
	return &DeptHTTPClientImpl{client}
}

func (c *DeptHTTPClientImpl) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...http.CallOption) (*CreateDeptReply, error) {
	var out CreateDeptReply
	pattern := "/manager/api/v1/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptCreateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) CreateDeptClassify(ctx context.Context, in *CreateDeptClassifyRequest, opts ...http.CallOption) (*CreateDeptClassifyReply, error) {
	var out CreateDeptClassifyReply
	pattern := "/manager/api/v1/dept/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptCreateDeptClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...http.CallOption) (*DeleteDeptReply, error) {
	var out DeleteDeptReply
	pattern := "/manager/api/v1/dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptDeleteDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) DeleteDeptClassify(ctx context.Context, in *DeleteDeptClassifyRequest, opts ...http.CallOption) (*DeleteDeptClassifyReply, error) {
	var out DeleteDeptClassifyReply
	pattern := "/manager/api/v1/dept/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptDeleteDeptClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) GetDept(ctx context.Context, in *GetDeptRequest, opts ...http.CallOption) (*GetDeptReply, error) {
	var out GetDeptReply
	pattern := "/manager/api/v1/dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptGetDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) ListCurrentDept(ctx context.Context, in *ListDeptRequest, opts ...http.CallOption) (*ListDeptReply, error) {
	var out ListDeptReply
	pattern := "/manager/api/v1/current/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptListCurrentDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) ListDept(ctx context.Context, in *ListDeptRequest, opts ...http.CallOption) (*ListDeptReply, error) {
	var out ListDeptReply
	pattern := "/manager/api/v1/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptListDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) ListDeptClassify(ctx context.Context, in *ListDeptClassifyRequest, opts ...http.CallOption) (*ListDeptClassifyReply, error) {
	var out ListDeptClassifyReply
	pattern := "/manager/api/v1/dept/classifies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptListDeptClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...http.CallOption) (*UpdateDeptReply, error) {
	var out UpdateDeptReply
	pattern := "/manager/api/v1/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) UpdateDeptClassify(ctx context.Context, in *UpdateDeptClassifyRequest, opts ...http.CallOption) (*UpdateDeptClassifyReply, error) {
	var out UpdateDeptClassifyReply
	pattern := "/manager/api/v1/dept/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptUpdateDeptClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
