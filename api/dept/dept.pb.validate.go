// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/dept/proto/dept.proto

package dept

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeptClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptClassify with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptClassifyMultiError, or
// nil if none found.
func (m *DeptClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return DeptClassifyMultiError(errors)
	}

	return nil
}

// DeptClassifyMultiError is an error wrapping multiple validation errors
// returned by DeptClassify.ValidateAll() if the designated constraints aren't met.
type DeptClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptClassifyMultiError) AllErrors() []error { return m }

// DeptClassifyValidationError is the validation error returned by
// DeptClassify.Validate if the designated constraints aren't met.
type DeptClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptClassifyValidationError) ErrorName() string { return "DeptClassifyValidationError" }

// Error satisfies the builtin error interface
func (e DeptClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptClassifyValidationError{}

// Validate checks the field values on ListDeptClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptClassifyRequestMultiError, or nil if none found.
func (m *ListDeptClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListDeptClassifyRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListDeptClassifyRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		if _, ok := _ListDeptClassifyRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListDeptClassifyRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.OrderBy != nil {
		if _, ok := _ListDeptClassifyRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListDeptClassifyRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListDeptClassifyRequestMultiError(errors)
	}

	return nil
}

// ListDeptClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeptClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeptClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptClassifyRequestMultiError) AllErrors() []error { return m }

// ListDeptClassifyRequestValidationError is the validation error returned by
// ListDeptClassifyRequest.Validate if the designated constraints aren't met.
type ListDeptClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptClassifyRequestValidationError) ErrorName() string {
	return "ListDeptClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptClassifyRequestValidationError{}

var _ListDeptClassifyRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListDeptClassifyRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListDeptClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptClassifyReplyMultiError, or nil if none found.
func (m *ListDeptClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeptClassifyReplyMultiError(errors)
	}

	return nil
}

// ListDeptClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by ListDeptClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type ListDeptClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptClassifyReplyMultiError) AllErrors() []error { return m }

// ListDeptClassifyReplyValidationError is the validation error returned by
// ListDeptClassifyReply.Validate if the designated constraints aren't met.
type ListDeptClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptClassifyReplyValidationError) ErrorName() string {
	return "ListDeptClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptClassifyReplyValidationError{}

// Validate checks the field values on CreateDeptClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptClassifyRequestMultiError, or nil if none found.
func (m *CreateDeptClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDeptClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDeptClassifyRequestMultiError(errors)
	}

	return nil
}

// CreateDeptClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeptClassifyRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDeptClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptClassifyRequestMultiError) AllErrors() []error { return m }

// CreateDeptClassifyRequestValidationError is the validation error returned by
// CreateDeptClassifyRequest.Validate if the designated constraints aren't met.
type CreateDeptClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptClassifyRequestValidationError) ErrorName() string {
	return "CreateDeptClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptClassifyRequestValidationError{}

// Validate checks the field values on CreateDeptClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptClassifyReplyMultiError, or nil if none found.
func (m *CreateDeptClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDeptClassifyReplyMultiError(errors)
	}

	return nil
}

// CreateDeptClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDeptClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDeptClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptClassifyReplyMultiError) AllErrors() []error { return m }

// CreateDeptClassifyReplyValidationError is the validation error returned by
// CreateDeptClassifyReply.Validate if the designated constraints aren't met.
type CreateDeptClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptClassifyReplyValidationError) ErrorName() string {
	return "CreateDeptClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptClassifyReplyValidationError{}

// Validate checks the field values on UpdateDeptClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptClassifyRequestMultiError, or nil if none found.
func (m *UpdateDeptClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDeptClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		if utf8.RuneCountInString(m.GetName()) > 128 {
			err := UpdateDeptClassifyRequestValidationError{
				field:  "Name",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if len(errors) > 0 {
		return UpdateDeptClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateDeptClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeptClassifyRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateDeptClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateDeptClassifyRequestValidationError is the validation error returned by
// UpdateDeptClassifyRequest.Validate if the designated constraints aren't met.
type UpdateDeptClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptClassifyRequestValidationError) ErrorName() string {
	return "UpdateDeptClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeptClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptClassifyRequestValidationError{}

// Validate checks the field values on UpdateDeptClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptClassifyReplyMultiError, or nil if none found.
func (m *UpdateDeptClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeptClassifyReplyMultiError(errors)
	}

	return nil
}

// UpdateDeptClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDeptClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeptClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptClassifyReplyMultiError) AllErrors() []error { return m }

// UpdateDeptClassifyReplyValidationError is the validation error returned by
// UpdateDeptClassifyReply.Validate if the designated constraints aren't met.
type UpdateDeptClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptClassifyReplyValidationError) ErrorName() string {
	return "UpdateDeptClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeptClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptClassifyReplyValidationError{}

// Validate checks the field values on DeleteDeptClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptClassifyRequestMultiError, or nil if none found.
func (m *DeleteDeptClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteDeptClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeptClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteDeptClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeptClassifyRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteDeptClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteDeptClassifyRequestValidationError is the validation error returned by
// DeleteDeptClassifyRequest.Validate if the designated constraints aren't met.
type DeleteDeptClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptClassifyRequestValidationError) ErrorName() string {
	return "DeleteDeptClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptClassifyRequestValidationError{}

// Validate checks the field values on DeleteDeptClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptClassifyReplyMultiError, or nil if none found.
func (m *DeleteDeptClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeptClassifyReplyMultiError(errors)
	}

	return nil
}

// DeleteDeptClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDeptClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeptClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptClassifyReplyMultiError) AllErrors() []error { return m }

// DeleteDeptClassifyReplyValidationError is the validation error returned by
// DeleteDeptClassifyReply.Validate if the designated constraints aren't met.
type DeleteDeptClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptClassifyReplyValidationError) ErrorName() string {
	return "DeleteDeptClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptClassifyReplyValidationError{}

// Validate checks the field values on GetDeptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeptRequestMultiError,
// or nil if none found.
func (m *GetDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetDeptRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeptRequestMultiError(errors)
	}

	return nil
}

// GetDeptRequestMultiError is an error wrapping multiple validation errors
// returned by GetDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeptRequestMultiError) AllErrors() []error { return m }

// GetDeptRequestValidationError is the validation error returned by
// GetDeptRequest.Validate if the designated constraints aren't met.
type GetDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeptRequestValidationError) ErrorName() string { return "GetDeptRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeptRequestValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on GetDeptReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeptReplyMultiError, or
// nil if none found.
func (m *GetDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for ClassifyId

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeptReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeptReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeptReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Classify != nil {
		if all {
			switch v := interface{}(m.GetClassify()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeptReplyValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeptReplyValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeptReplyValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if len(errors) > 0 {
		return GetDeptReplyMultiError(errors)
	}

	return nil
}

// GetDeptReplyMultiError is an error wrapping multiple validation errors
// returned by GetDeptReply.ValidateAll() if the designated constraints aren't met.
type GetDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeptReplyMultiError) AllErrors() []error { return m }

// GetDeptReplyValidationError is the validation error returned by
// GetDeptReply.Validate if the designated constraints aren't met.
type GetDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeptReplyValidationError) ErrorName() string { return "GetDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeptReplyValidationError{}

// Validate checks the field values on ListDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptRequestMultiError, or nil if none found.
func (m *ListDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.RootId != nil {
		// no validation rules for RootId
	}

	if m.ClassifyId != nil {
		// no validation rules for ClassifyId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListDeptRequestMultiError(errors)
	}

	return nil
}

// ListDeptRequestMultiError is an error wrapping multiple validation errors
// returned by ListDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptRequestMultiError) AllErrors() []error { return m }

// ListDeptRequestValidationError is the validation error returned by
// ListDeptRequest.Validate if the designated constraints aren't met.
type ListDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptRequestValidationError) ErrorName() string { return "ListDeptRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptRequestValidationError{}

// Validate checks the field values on ListDeptReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDeptReplyMultiError, or
// nil if none found.
func (m *ListDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeptReplyMultiError(errors)
	}

	return nil
}

// ListDeptReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeptReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptReplyMultiError) AllErrors() []error { return m }

// ListDeptReplyValidationError is the validation error returned by
// ListDeptReply.Validate if the designated constraints aren't met.
type ListDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptReplyValidationError) ErrorName() string { return "ListDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptReplyValidationError{}

// Validate checks the field values on CreateDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptRequestMultiError, or nil if none found.
func (m *CreateDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() < 0 {
		err := CreateDeptRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() < 1 {
		err := CreateDeptRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 128 {
		err := CreateDeptRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDeptRequestMultiError(errors)
	}

	return nil
}

// CreateDeptRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptRequestMultiError) AllErrors() []error { return m }

// CreateDeptRequestValidationError is the validation error returned by
// CreateDeptRequest.Validate if the designated constraints aren't met.
type CreateDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptRequestValidationError) ErrorName() string {
	return "CreateDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptRequestValidationError{}

// Validate checks the field values on CreateDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeptReplyMultiError, or nil if none found.
func (m *CreateDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDeptReplyMultiError(errors)
	}

	return nil
}

// CreateDeptReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDeptReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeptReplyMultiError) AllErrors() []error { return m }

// CreateDeptReplyValidationError is the validation error returned by
// CreateDeptReply.Validate if the designated constraints aren't met.
type CreateDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeptReplyValidationError) ErrorName() string { return "CreateDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeptReplyValidationError{}

// Validate checks the field values on UpdateDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptRequestMultiError, or nil if none found.
func (m *UpdateDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateDeptRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ParentId != nil {
		if m.GetParentId() < 0 {
			err := UpdateDeptRequestValidationError{
				field:  "ParentId",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.ClassifyId != nil {
		if m.GetClassifyId() < 1 {
			err := UpdateDeptRequestValidationError{
				field:  "ClassifyId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 128 {
			err := UpdateDeptRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 128 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Description != nil {
		if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 256 {
			err := UpdateDeptRequestValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateDeptRequestMultiError(errors)
	}

	return nil
}

// UpdateDeptRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptRequestMultiError) AllErrors() []error { return m }

// UpdateDeptRequestValidationError is the validation error returned by
// UpdateDeptRequest.Validate if the designated constraints aren't met.
type UpdateDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptRequestValidationError) ErrorName() string {
	return "UpdateDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptRequestValidationError{}

// Validate checks the field values on UpdateDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeptReplyMultiError, or nil if none found.
func (m *UpdateDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeptReplyMultiError(errors)
	}

	return nil
}

// UpdateDeptReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDeptReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeptReplyMultiError) AllErrors() []error { return m }

// UpdateDeptReplyValidationError is the validation error returned by
// UpdateDeptReply.Validate if the designated constraints aren't met.
type UpdateDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeptReplyValidationError) ErrorName() string { return "UpdateDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeptReplyValidationError{}

// Validate checks the field values on DeleteDeptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptRequestMultiError, or nil if none found.
func (m *DeleteDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteDeptRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeptRequestMultiError(errors)
	}

	return nil
}

// DeleteDeptRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDeptRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptRequestMultiError) AllErrors() []error { return m }

// DeleteDeptRequestValidationError is the validation error returned by
// DeleteDeptRequest.Validate if the designated constraints aren't met.
type DeleteDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptRequestValidationError) ErrorName() string {
	return "DeleteDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptRequestValidationError{}

// Validate checks the field values on DeleteDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeptReplyMultiError, or nil if none found.
func (m *DeleteDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeptReplyMultiError(errors)
	}

	return nil
}

// DeleteDeptReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDeptReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeptReplyMultiError) AllErrors() []error { return m }

// DeleteDeptReplyValidationError is the validation error returned by
// DeleteDeptReply.Validate if the designated constraints aren't met.
type DeleteDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeptReplyValidationError) ErrorName() string { return "DeleteDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeptReplyValidationError{}

// Validate checks the field values on ListDeptClassifyReply_DeptClassify with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDeptClassifyReply_DeptClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptClassifyReply_DeptClassify
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDeptClassifyReply_DeptClassifyMultiError, or nil if none found.
func (m *ListDeptClassifyReply_DeptClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptClassifyReply_DeptClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Weight

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListDeptClassifyReply_DeptClassifyMultiError(errors)
	}

	return nil
}

// ListDeptClassifyReply_DeptClassifyMultiError is an error wrapping multiple
// validation errors returned by
// ListDeptClassifyReply_DeptClassify.ValidateAll() if the designated
// constraints aren't met.
type ListDeptClassifyReply_DeptClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptClassifyReply_DeptClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptClassifyReply_DeptClassifyMultiError) AllErrors() []error { return m }

// ListDeptClassifyReply_DeptClassifyValidationError is the validation error
// returned by ListDeptClassifyReply_DeptClassify.Validate if the designated
// constraints aren't met.
type ListDeptClassifyReply_DeptClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptClassifyReply_DeptClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptClassifyReply_DeptClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptClassifyReply_DeptClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptClassifyReply_DeptClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptClassifyReply_DeptClassifyValidationError) ErrorName() string {
	return "ListDeptClassifyReply_DeptClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptClassifyReply_DeptClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptClassifyReply_DeptClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptClassifyReply_DeptClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptClassifyReply_DeptClassifyValidationError{}

// Validate checks the field values on ListDeptReply_Dept with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeptReply_Dept) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeptReply_Dept with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeptReply_DeptMultiError, or nil if none found.
func (m *ListDeptReply_Dept) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeptReply_Dept) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for ClassifyId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptReply_DeptValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptReply_DeptValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Classify != nil {
		if all {
			switch v := interface{}(m.GetClassify()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeptReply_DeptValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeptReply_DeptValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if len(errors) > 0 {
		return ListDeptReply_DeptMultiError(errors)
	}

	return nil
}

// ListDeptReply_DeptMultiError is an error wrapping multiple validation errors
// returned by ListDeptReply_Dept.ValidateAll() if the designated constraints
// aren't met.
type ListDeptReply_DeptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeptReply_DeptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeptReply_DeptMultiError) AllErrors() []error { return m }

// ListDeptReply_DeptValidationError is the validation error returned by
// ListDeptReply_Dept.Validate if the designated constraints aren't met.
type ListDeptReply_DeptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeptReply_DeptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeptReply_DeptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeptReply_DeptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeptReply_DeptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeptReply_DeptValidationError) ErrorName() string {
	return "ListDeptReply_DeptValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeptReply_DeptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeptReply_Dept.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeptReply_DeptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeptReply_DeptValidationError{}
