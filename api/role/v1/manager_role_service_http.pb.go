// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: manager_role_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddRole = "/manager_role.Service/AddRole"
const OperationServiceDeleteRole = "/manager_role.Service/DeleteRole"
const OperationServiceGetRoleMenuIds = "/manager_role.Service/GetRoleMenuIds"
const OperationServiceGetRoleTree = "/manager_role.Service/GetRoleTree"
const OperationServiceUpdateRole = "/manager_role.Service/UpdateRole"
const OperationServiceUpdateRoleMenus = "/manager_role.Service/UpdateRoleMenus"

type ServiceHTTPServer interface {
	// AddRole AddRole 新增角色
	AddRole(context.Context, *AddRoleRequest) (*AddRoleReply, error)
	// DeleteRole DeleteRole 删除角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	// GetRoleMenuIds CurrentRoleMenus 获取当前用户的角色列表
	GetRoleMenuIds(context.Context, *GetRoleMenuIdsRequest) (*GetRoleMenuIdsReply, error)
	// GetRoleTree GetRoleTree 获取能管理的角色树
	GetRoleTree(context.Context, *emptypb.Empty) (*Role, error)
	// UpdateRole UpdateRole 更新角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*emptypb.Empty, error)
	// UpdateRoleMenus AddRoleMenus 更新角色菜单
	UpdateRoleMenus(context.Context, *UpdateRoleMenuRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/v1/role/menu/ids", _Service_GetRoleMenuIds0_HTTP_Handler(srv))
	r.PUT("/manager/v1/role/menu", _Service_UpdateRoleMenus0_HTTP_Handler(srv))
	r.GET("/manager/v1/role/tree", _Service_GetRoleTree0_HTTP_Handler(srv))
	r.POST("/manager/v1/role", _Service_AddRole0_HTTP_Handler(srv))
	r.PUT("/manager/v1/role", _Service_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/manager/v1/role", _Service_DeleteRole0_HTTP_Handler(srv))
}

func _Service_GetRoleMenuIds0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetRoleMenuIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetRoleMenuIds(ctx, req.(*GetRoleMenuIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleMenuIdsReply)
		return ctx.Result(200, reply.List)
	}
}

func _Service_UpdateRoleMenus0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleMenuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateRoleMenus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRoleMenus(ctx, req.(*UpdateRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_GetRoleTree0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetRoleTree)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetRoleTree(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _Service_AddRole0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddRole(ctx, req.(*AddRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateRole0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteRole0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddRole(ctx context.Context, req *AddRoleRequest, opts ...http.CallOption) (rsp *AddRoleReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetRoleMenuIds(ctx context.Context, req *GetRoleMenuIdsRequest, opts ...http.CallOption) (rsp *GetRoleMenuIdsReply, err error)
	GetRoleTree(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Role, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateRoleMenus(ctx context.Context, req *UpdateRoleMenuRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddRole(ctx context.Context, in *AddRoleRequest, opts ...http.CallOption) (*AddRoleReply, error) {
	var out AddRoleReply
	pattern := "/manager/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetRoleMenuIds(ctx context.Context, in *GetRoleMenuIdsRequest, opts ...http.CallOption) (*GetRoleMenuIdsReply, error) {
	var out GetRoleMenuIdsReply
	pattern := "/manager/v1/role/menu/ids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetRoleMenuIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.List, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetRoleTree(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/manager/v1/role/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetRoleTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenuRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/v1/role/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateRoleMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
