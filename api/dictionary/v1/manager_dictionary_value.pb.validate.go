// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager_dictionary_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DictionaryValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DictionaryValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictionaryValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DictionaryValueMultiError, or nil if none found.
func (m *DictionaryValue) ValidateAll() error {
	return m.validate(true)
}

func (m *DictionaryValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DictionaryId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for Extra

	// no validation rules for Description

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return DictionaryValueMultiError(errors)
	}

	return nil
}

// DictionaryValueMultiError is an error wrapping multiple validation errors
// returned by DictionaryValue.ValidateAll() if the designated constraints
// aren't met.
type DictionaryValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictionaryValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictionaryValueMultiError) AllErrors() []error { return m }

// DictionaryValueValidationError is the validation error returned by
// DictionaryValue.Validate if the designated constraints aren't met.
type DictionaryValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryValueValidationError) ErrorName() string { return "DictionaryValueValidationError" }

// Error satisfies the builtin error interface
func (e DictionaryValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryValueValidationError{}

// Validate checks the field values on GetDictionaryValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryValueRequestMultiError, or nil if none found.
func (m *GetDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetDictionaryValueRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// GetDictionaryValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetDictionaryValueRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValueRequestMultiError) AllErrors() []error { return m }

// GetDictionaryValueRequestValidationError is the validation error returned by
// GetDictionaryValueRequest.Validate if the designated constraints aren't met.
type GetDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValueRequestValidationError) ErrorName() string {
	return "GetDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValueRequestValidationError{}

// Validate checks the field values on GetDictionaryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryValueReplyMultiError, or nil if none found.
func (m *GetDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDictionaryValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Dict

	if len(errors) > 0 {
		return GetDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// GetDictionaryValueReplyMultiError is an error wrapping multiple validation
// errors returned by GetDictionaryValueReply.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValueReplyMultiError) AllErrors() []error { return m }

// GetDictionaryValueReplyValidationError is the validation error returned by
// GetDictionaryValueReply.Validate if the designated constraints aren't met.
type GetDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValueReplyValidationError) ErrorName() string {
	return "GetDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValueReplyValidationError{}

// Validate checks the field values on PageDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageDictionaryValueRequestMultiError, or nil if none found.
func (m *PageDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageDictionaryValueRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageDictionaryValueRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDictionaryId() <= 0 {
		err := PageDictionaryValueRequestValidationError{
			field:  "DictionaryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if len(errors) > 0 {
		return PageDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// PageDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by PageDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type PageDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageDictionaryValueRequestMultiError) AllErrors() []error { return m }

// PageDictionaryValueRequestValidationError is the validation error returned
// by PageDictionaryValueRequest.Validate if the designated constraints aren't met.
type PageDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageDictionaryValueRequestValidationError) ErrorName() string {
	return "PageDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageDictionaryValueRequestValidationError{}

// Validate checks the field values on PageDictionaryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageDictionaryValueReplyMultiError, or nil if none found.
func (m *PageDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageDictionaryValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// PageDictionaryValueReplyMultiError is an error wrapping multiple validation
// errors returned by PageDictionaryValueReply.ValidateAll() if the designated
// constraints aren't met.
type PageDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageDictionaryValueReplyMultiError) AllErrors() []error { return m }

// PageDictionaryValueReplyValidationError is the validation error returned by
// PageDictionaryValueReply.Validate if the designated constraints aren't met.
type PageDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageDictionaryValueReplyValidationError) ErrorName() string {
	return "PageDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageDictionaryValueReplyValidationError{}

// Validate checks the field values on AddDictionaryValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDictionaryValueRequestMultiError, or nil if none found.
func (m *AddDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDictId() <= 0 {
		err := AddDictionaryValueRequestValidationError{
			field:  "DictId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := AddDictionaryValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := AddDictionaryValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return AddDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// AddDictionaryValueRequestMultiError is an error wrapping multiple validation
// errors returned by AddDictionaryValueRequest.ValidateAll() if the
// designated constraints aren't met.
type AddDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDictionaryValueRequestMultiError) AllErrors() []error { return m }

// AddDictionaryValueRequestValidationError is the validation error returned by
// AddDictionaryValueRequest.Validate if the designated constraints aren't met.
type AddDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDictionaryValueRequestValidationError) ErrorName() string {
	return "AddDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDictionaryValueRequestValidationError{}

// Validate checks the field values on AddDictionaryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDictionaryValueReplyMultiError, or nil if none found.
func (m *AddDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// AddDictionaryValueReplyMultiError is an error wrapping multiple validation
// errors returned by AddDictionaryValueReply.ValidateAll() if the designated
// constraints aren't met.
type AddDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDictionaryValueReplyMultiError) AllErrors() []error { return m }

// AddDictionaryValueReplyValidationError is the validation error returned by
// AddDictionaryValueReply.Validate if the designated constraints aren't met.
type AddDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDictionaryValueReplyValidationError) ErrorName() string {
	return "AddDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDictionaryValueReplyValidationError{}

// Validate checks the field values on UpdateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictionaryValueRequestMultiError, or nil if none found.
func (m *UpdateDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDictId() <= 0 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "DictId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// UpdateDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryValueRequestMultiError) AllErrors() []error { return m }

// UpdateDictionaryValueRequestValidationError is the validation error returned
// by UpdateDictionaryValueRequest.Validate if the designated constraints
// aren't met.
type UpdateDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryValueRequestValidationError) ErrorName() string {
	return "UpdateDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryValueRequestValidationError{}

// Validate checks the field values on DeleteDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictionaryValueRequestMultiError, or nil if none found.
func (m *DeleteDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictionaryValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// DeleteDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictionaryValueRequestMultiError) AllErrors() []error { return m }

// DeleteDictionaryValueRequestValidationError is the validation error returned
// by DeleteDictionaryValueRequest.Validate if the designated constraints
// aren't met.
type DeleteDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryValueRequestValidationError) ErrorName() string {
	return "DeleteDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryValueRequestValidationError{}
