// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/feedback/proto/feedback.proto

package feedback

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListFeedbackCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedbackCategoryRequestMultiError, or nil if none found.
func (m *ListFeedbackCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFeedbackCategoryRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListFeedbackCategoryRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		if _, ok := _ListFeedbackCategoryRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListFeedbackCategoryRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.OrderBy != nil {
		if _, ok := _ListFeedbackCategoryRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListFeedbackCategoryRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListFeedbackCategoryRequestMultiError(errors)
	}

	return nil
}

// ListFeedbackCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListFeedbackCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListFeedbackCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackCategoryRequestMultiError) AllErrors() []error { return m }

// ListFeedbackCategoryRequestValidationError is the validation error returned
// by ListFeedbackCategoryRequest.Validate if the designated constraints
// aren't met.
type ListFeedbackCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackCategoryRequestValidationError) ErrorName() string {
	return "ListFeedbackCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackCategoryRequestValidationError{}

var _ListFeedbackCategoryRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListFeedbackCategoryRequest_OrderBy_InLookup = map[string]struct{}{
	"id": {},
}

// Validate checks the field values on ListFeedbackCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedbackCategoryReplyMultiError, or nil if none found.
func (m *ListFeedbackCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedbackCategoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedbackCategoryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedbackCategoryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFeedbackCategoryReplyMultiError(errors)
	}

	return nil
}

// ListFeedbackCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ListFeedbackCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type ListFeedbackCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackCategoryReplyMultiError) AllErrors() []error { return m }

// ListFeedbackCategoryReplyValidationError is the validation error returned by
// ListFeedbackCategoryReply.Validate if the designated constraints aren't met.
type ListFeedbackCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackCategoryReplyValidationError) ErrorName() string {
	return "ListFeedbackCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackCategoryReplyValidationError{}

// Validate checks the field values on CreateFeedbackCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedbackCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedbackCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateFeedbackCategoryRequestMultiError, or nil if none found.
func (m *CreateFeedbackCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedbackCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateFeedbackCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateFeedbackCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateFeedbackCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateFeedbackCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateFeedbackCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedbackCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedbackCategoryRequestMultiError) AllErrors() []error { return m }

// CreateFeedbackCategoryRequestValidationError is the validation error
// returned by CreateFeedbackCategoryRequest.Validate if the designated
// constraints aren't met.
type CreateFeedbackCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackCategoryRequestValidationError) ErrorName() string {
	return "CreateFeedbackCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackCategoryRequestValidationError{}

// Validate checks the field values on CreateFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedbackCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeedbackCategoryReplyMultiError, or nil if none found.
func (m *CreateFeedbackCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedbackCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFeedbackCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateFeedbackCategoryReplyMultiError is an error wrapping multiple
// validation errors returned by CreateFeedbackCategoryReply.ValidateAll() if
// the designated constraints aren't met.
type CreateFeedbackCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedbackCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedbackCategoryReplyMultiError) AllErrors() []error { return m }

// CreateFeedbackCategoryReplyValidationError is the validation error returned
// by CreateFeedbackCategoryReply.Validate if the designated constraints
// aren't met.
type CreateFeedbackCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackCategoryReplyValidationError) ErrorName() string {
	return "CreateFeedbackCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackCategoryReplyValidationError{}

// Validate checks the field values on UpdateFeedbackCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedbackCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedbackCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateFeedbackCategoryRequestMultiError, or nil if none found.
func (m *UpdateFeedbackCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedbackCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateFeedbackCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateFeedbackCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateFeedbackCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateFeedbackCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateFeedbackCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateFeedbackCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedbackCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedbackCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateFeedbackCategoryRequestValidationError is the validation error
// returned by UpdateFeedbackCategoryRequest.Validate if the designated
// constraints aren't met.
type UpdateFeedbackCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedbackCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedbackCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedbackCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedbackCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedbackCategoryRequestValidationError) ErrorName() string {
	return "UpdateFeedbackCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedbackCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedbackCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedbackCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedbackCategoryRequestValidationError{}

// Validate checks the field values on UpdateFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedbackCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeedbackCategoryReplyMultiError, or nil if none found.
func (m *UpdateFeedbackCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedbackCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFeedbackCategoryReplyMultiError(errors)
	}

	return nil
}

// UpdateFeedbackCategoryReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateFeedbackCategoryReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateFeedbackCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedbackCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedbackCategoryReplyMultiError) AllErrors() []error { return m }

// UpdateFeedbackCategoryReplyValidationError is the validation error returned
// by UpdateFeedbackCategoryReply.Validate if the designated constraints
// aren't met.
type UpdateFeedbackCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedbackCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedbackCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedbackCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedbackCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedbackCategoryReplyValidationError) ErrorName() string {
	return "UpdateFeedbackCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedbackCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedbackCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedbackCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedbackCategoryReplyValidationError{}

// Validate checks the field values on DeleteFeedbackCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedbackCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedbackCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteFeedbackCategoryRequestMultiError, or nil if none found.
func (m *DeleteFeedbackCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedbackCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteFeedbackCategoryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFeedbackCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteFeedbackCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteFeedbackCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteFeedbackCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedbackCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedbackCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteFeedbackCategoryRequestValidationError is the validation error
// returned by DeleteFeedbackCategoryRequest.Validate if the designated
// constraints aren't met.
type DeleteFeedbackCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedbackCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedbackCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedbackCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedbackCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedbackCategoryRequestValidationError) ErrorName() string {
	return "DeleteFeedbackCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedbackCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedbackCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedbackCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedbackCategoryRequestValidationError{}

// Validate checks the field values on DeleteFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedbackCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedbackCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedbackCategoryReplyMultiError, or nil if none found.
func (m *DeleteFeedbackCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedbackCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFeedbackCategoryReplyMultiError(errors)
	}

	return nil
}

// DeleteFeedbackCategoryReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteFeedbackCategoryReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteFeedbackCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedbackCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedbackCategoryReplyMultiError) AllErrors() []error { return m }

// DeleteFeedbackCategoryReplyValidationError is the validation error returned
// by DeleteFeedbackCategoryReply.Validate if the designated constraints
// aren't met.
type DeleteFeedbackCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedbackCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedbackCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedbackCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedbackCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedbackCategoryReplyValidationError) ErrorName() string {
	return "DeleteFeedbackCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedbackCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedbackCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedbackCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedbackCategoryReplyValidationError{}

// Validate checks the field values on ListFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedbackRequestMultiError, or nil if none found.
func (m *ListFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFeedbackRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListFeedbackRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {
		if _, ok := _ListFeedbackRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListFeedbackRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.OrderBy != nil {
		if _, ok := _ListFeedbackRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListFeedbackRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if m.AppId != nil {
		// no validation rules for AppId
	}

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Platform != nil {
		// no validation rules for Platform
	}

	if len(errors) > 0 {
		return ListFeedbackRequestMultiError(errors)
	}

	return nil
}

// ListFeedbackRequestMultiError is an error wrapping multiple validation
// errors returned by ListFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackRequestMultiError) AllErrors() []error { return m }

// ListFeedbackRequestValidationError is the validation error returned by
// ListFeedbackRequest.Validate if the designated constraints aren't met.
type ListFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackRequestValidationError) ErrorName() string {
	return "ListFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackRequestValidationError{}

var _ListFeedbackRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListFeedbackRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListFeedbackReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedbackReplyMultiError, or nil if none found.
func (m *ListFeedbackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedbackReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedbackReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedbackReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFeedbackReplyMultiError(errors)
	}

	return nil
}

// ListFeedbackReplyMultiError is an error wrapping multiple validation errors
// returned by ListFeedbackReply.ValidateAll() if the designated constraints
// aren't met.
type ListFeedbackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackReplyMultiError) AllErrors() []error { return m }

// ListFeedbackReplyValidationError is the validation error returned by
// ListFeedbackReply.Validate if the designated constraints aren't met.
type ListFeedbackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackReplyValidationError) ErrorName() string {
	return "ListFeedbackReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackReplyValidationError{}

// Validate checks the field values on CreateFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeedbackRequestMultiError, or nil if none found.
func (m *CreateFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCategoryId() < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "CategoryId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDevice()) < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "Device",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := CreateFeedbackRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Images != nil {
		// no validation rules for Images
	}

	if m.Contact != nil {
		// no validation rules for Contact
	}

	if len(errors) > 0 {
		return CreateFeedbackRequestMultiError(errors)
	}

	return nil
}

// CreateFeedbackRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedbackRequestMultiError) AllErrors() []error { return m }

// CreateFeedbackRequestValidationError is the validation error returned by
// CreateFeedbackRequest.Validate if the designated constraints aren't met.
type CreateFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackRequestValidationError) ErrorName() string {
	return "CreateFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackRequestValidationError{}

// Validate checks the field values on CreateFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedbackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeedbackReplyMultiError, or nil if none found.
func (m *CreateFeedbackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedbackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFeedbackReplyMultiError(errors)
	}

	return nil
}

// CreateFeedbackReplyMultiError is an error wrapping multiple validation
// errors returned by CreateFeedbackReply.ValidateAll() if the designated
// constraints aren't met.
type CreateFeedbackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedbackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedbackReplyMultiError) AllErrors() []error { return m }

// CreateFeedbackReplyValidationError is the validation error returned by
// CreateFeedbackReply.Validate if the designated constraints aren't met.
type CreateFeedbackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackReplyValidationError) ErrorName() string {
	return "CreateFeedbackReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedbackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedbackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackReplyValidationError{}

// Validate checks the field values on DeleteFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedbackRequestMultiError, or nil if none found.
func (m *DeleteFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteFeedbackRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFeedbackRequestMultiError(errors)
	}

	return nil
}

// DeleteFeedbackRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedbackRequestMultiError) AllErrors() []error { return m }

// DeleteFeedbackRequestValidationError is the validation error returned by
// DeleteFeedbackRequest.Validate if the designated constraints aren't met.
type DeleteFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedbackRequestValidationError) ErrorName() string {
	return "DeleteFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedbackRequestValidationError{}

// Validate checks the field values on DeleteFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedbackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedbackReplyMultiError, or nil if none found.
func (m *DeleteFeedbackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedbackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFeedbackReplyMultiError(errors)
	}

	return nil
}

// DeleteFeedbackReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteFeedbackReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteFeedbackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedbackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedbackReplyMultiError) AllErrors() []error { return m }

// DeleteFeedbackReplyValidationError is the validation error returned by
// DeleteFeedbackReply.Validate if the designated constraints aren't met.
type DeleteFeedbackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedbackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedbackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedbackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedbackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedbackReplyValidationError) ErrorName() string {
	return "DeleteFeedbackReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedbackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedbackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedbackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedbackReplyValidationError{}

// Validate checks the field values on UpdateFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeedbackRequestMultiError, or nil if none found.
func (m *UpdateFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateFeedbackRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := UpdateFeedbackRequestValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ProcessedResult != nil {
		// no validation rules for ProcessedResult
	}

	if len(errors) > 0 {
		return UpdateFeedbackRequestMultiError(errors)
	}

	return nil
}

// UpdateFeedbackRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedbackRequestMultiError) AllErrors() []error { return m }

// UpdateFeedbackRequestValidationError is the validation error returned by
// UpdateFeedbackRequest.Validate if the designated constraints aren't met.
type UpdateFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedbackRequestValidationError) ErrorName() string {
	return "UpdateFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedbackRequestValidationError{}

// Validate checks the field values on UpdateFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedbackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedbackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeedbackReplyMultiError, or nil if none found.
func (m *UpdateFeedbackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedbackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFeedbackReplyMultiError(errors)
	}

	return nil
}

// UpdateFeedbackReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateFeedbackReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateFeedbackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedbackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedbackReplyMultiError) AllErrors() []error { return m }

// UpdateFeedbackReplyValidationError is the validation error returned by
// UpdateFeedbackReply.Validate if the designated constraints aren't met.
type UpdateFeedbackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedbackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedbackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedbackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedbackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedbackReplyValidationError) ErrorName() string {
	return "UpdateFeedbackReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedbackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedbackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedbackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedbackReplyValidationError{}

// Validate checks the field values on
// ListFeedbackCategoryReply_FeedbackCategory with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackCategoryReply_FeedbackCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListFeedbackCategoryReply_FeedbackCategory with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListFeedbackCategoryReply_FeedbackCategoryMultiError, or nil if none found.
func (m *ListFeedbackCategoryReply_FeedbackCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackCategoryReply_FeedbackCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ListFeedbackCategoryReply_FeedbackCategoryMultiError(errors)
	}

	return nil
}

// ListFeedbackCategoryReply_FeedbackCategoryMultiError is an error wrapping
// multiple validation errors returned by
// ListFeedbackCategoryReply_FeedbackCategory.ValidateAll() if the designated
// constraints aren't met.
type ListFeedbackCategoryReply_FeedbackCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackCategoryReply_FeedbackCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackCategoryReply_FeedbackCategoryMultiError) AllErrors() []error { return m }

// ListFeedbackCategoryReply_FeedbackCategoryValidationError is the validation
// error returned by ListFeedbackCategoryReply_FeedbackCategory.Validate if
// the designated constraints aren't met.
type ListFeedbackCategoryReply_FeedbackCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) ErrorName() string {
	return "ListFeedbackCategoryReply_FeedbackCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackCategoryReply_FeedbackCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackCategoryReply_FeedbackCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackCategoryReply_FeedbackCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackCategoryReply_FeedbackCategoryValidationError{}

// Validate checks the field values on ListFeedbackReply_Feedback with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackReply_Feedback) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackReply_Feedback with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedbackReply_FeedbackMultiError, or nil if none found.
func (m *ListFeedbackReply_Feedback) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackReply_Feedback) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for UserId

	// no validation rules for CategoryId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for Device

	// no validation rules for Platform

	// no validation rules for Version

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Images != nil {
		// no validation rules for Images
	}

	if m.Contact != nil {
		// no validation rules for Contact
	}

	if m.ProcessedBy != nil {
		// no validation rules for ProcessedBy
	}

	if m.ProcessedResult != nil {
		// no validation rules for ProcessedResult
	}

	if m.App != nil {
		if all {
			switch v := interface{}(m.GetApp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedbackReply_FeedbackValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if m.User != nil {
		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedbackReply_FeedbackValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if m.Category != nil {
		if all {
			switch v := interface{}(m.GetCategory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedbackReply_FeedbackValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedbackReply_FeedbackValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if len(errors) > 0 {
		return ListFeedbackReply_FeedbackMultiError(errors)
	}

	return nil
}

// ListFeedbackReply_FeedbackMultiError is an error wrapping multiple
// validation errors returned by ListFeedbackReply_Feedback.ValidateAll() if
// the designated constraints aren't met.
type ListFeedbackReply_FeedbackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackReply_FeedbackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackReply_FeedbackMultiError) AllErrors() []error { return m }

// ListFeedbackReply_FeedbackValidationError is the validation error returned
// by ListFeedbackReply_Feedback.Validate if the designated constraints aren't met.
type ListFeedbackReply_FeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackReply_FeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackReply_FeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackReply_FeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackReply_FeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackReply_FeedbackValidationError) ErrorName() string {
	return "ListFeedbackReply_FeedbackValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackReply_FeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackReply_Feedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackReply_FeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackReply_FeedbackValidationError{}

// Validate checks the field values on ListFeedbackReply_Feedback_App with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackReply_Feedback_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackReply_Feedback_App with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListFeedbackReply_Feedback_AppMultiError, or nil if none found.
func (m *ListFeedbackReply_Feedback_App) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackReply_Feedback_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListFeedbackReply_Feedback_AppMultiError(errors)
	}

	return nil
}

// ListFeedbackReply_Feedback_AppMultiError is an error wrapping multiple
// validation errors returned by ListFeedbackReply_Feedback_App.ValidateAll()
// if the designated constraints aren't met.
type ListFeedbackReply_Feedback_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackReply_Feedback_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackReply_Feedback_AppMultiError) AllErrors() []error { return m }

// ListFeedbackReply_Feedback_AppValidationError is the validation error
// returned by ListFeedbackReply_Feedback_App.Validate if the designated
// constraints aren't met.
type ListFeedbackReply_Feedback_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackReply_Feedback_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackReply_Feedback_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackReply_Feedback_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackReply_Feedback_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackReply_Feedback_AppValidationError) ErrorName() string {
	return "ListFeedbackReply_Feedback_AppValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackReply_Feedback_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackReply_Feedback_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackReply_Feedback_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackReply_Feedback_AppValidationError{}

// Validate checks the field values on ListFeedbackReply_Feedback_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedbackReply_Feedback_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackReply_Feedback_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListFeedbackReply_Feedback_UserMultiError, or nil if none found.
func (m *ListFeedbackReply_Feedback_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackReply_Feedback_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RealName

	// no validation rules for NickName

	if len(errors) > 0 {
		return ListFeedbackReply_Feedback_UserMultiError(errors)
	}

	return nil
}

// ListFeedbackReply_Feedback_UserMultiError is an error wrapping multiple
// validation errors returned by ListFeedbackReply_Feedback_User.ValidateAll()
// if the designated constraints aren't met.
type ListFeedbackReply_Feedback_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackReply_Feedback_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackReply_Feedback_UserMultiError) AllErrors() []error { return m }

// ListFeedbackReply_Feedback_UserValidationError is the validation error
// returned by ListFeedbackReply_Feedback_User.Validate if the designated
// constraints aren't met.
type ListFeedbackReply_Feedback_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackReply_Feedback_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackReply_Feedback_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackReply_Feedback_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackReply_Feedback_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackReply_Feedback_UserValidationError) ErrorName() string {
	return "ListFeedbackReply_Feedback_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackReply_Feedback_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackReply_Feedback_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackReply_Feedback_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackReply_Feedback_UserValidationError{}

// Validate checks the field values on ListFeedbackReply_Feedback_Category with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListFeedbackReply_Feedback_Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedbackReply_Feedback_Category
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListFeedbackReply_Feedback_CategoryMultiError, or nil if none found.
func (m *ListFeedbackReply_Feedback_Category) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedbackReply_Feedback_Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListFeedbackReply_Feedback_CategoryMultiError(errors)
	}

	return nil
}

// ListFeedbackReply_Feedback_CategoryMultiError is an error wrapping multiple
// validation errors returned by
// ListFeedbackReply_Feedback_Category.ValidateAll() if the designated
// constraints aren't met.
type ListFeedbackReply_Feedback_CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedbackReply_Feedback_CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedbackReply_Feedback_CategoryMultiError) AllErrors() []error { return m }

// ListFeedbackReply_Feedback_CategoryValidationError is the validation error
// returned by ListFeedbackReply_Feedback_Category.Validate if the designated
// constraints aren't met.
type ListFeedbackReply_Feedback_CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedbackReply_Feedback_CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedbackReply_Feedback_CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedbackReply_Feedback_CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedbackReply_Feedback_CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedbackReply_Feedback_CategoryValidationError) ErrorName() string {
	return "ListFeedbackReply_Feedback_CategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedbackReply_Feedback_CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedbackReply_Feedback_Category.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedbackReply_Feedback_CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedbackReply_Feedback_CategoryValidationError{}
