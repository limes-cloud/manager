// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/dictionary/manager_dictionary_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDictionaryValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryValuesRequestMultiError, or nil if none found.
func (m *GetDictionaryValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetKeywords()) < 1 {
		err := GetDictionaryValuesRequestValidationError{
			field:  "Keywords",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_GetDictionaryValuesRequest_Keywords_Unique := make(map[string]struct{}, len(m.GetKeywords()))

	for idx, item := range m.GetKeywords() {
		_, _ = idx, item

		if _, exists := _GetDictionaryValuesRequest_Keywords_Unique[item]; exists {
			err := GetDictionaryValuesRequestValidationError{
				field:  fmt.Sprintf("Keywords[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_GetDictionaryValuesRequest_Keywords_Unique[item] = struct{}{}
		}

		// no validation rules for Keywords[idx]
	}

	if len(errors) > 0 {
		return GetDictionaryValuesRequestMultiError(errors)
	}

	return nil
}

// GetDictionaryValuesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDictionaryValuesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDictionaryValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValuesRequestMultiError) AllErrors() []error { return m }

// GetDictionaryValuesRequestValidationError is the validation error returned
// by GetDictionaryValuesRequest.Validate if the designated constraints aren't met.
type GetDictionaryValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValuesRequestValidationError) ErrorName() string {
	return "GetDictionaryValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValuesRequestValidationError{}

// Validate checks the field values on GetDictionaryValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryValuesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValuesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryValuesReplyMultiError, or nil if none found.
func (m *GetDictionaryValuesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValuesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetDict()))
		i := 0
		for key := range m.GetDict() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDict()[key]
			_ = val

			// no validation rules for Dict[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetDictionaryValuesReplyValidationError{
							field:  fmt.Sprintf("Dict[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetDictionaryValuesReplyValidationError{
							field:  fmt.Sprintf("Dict[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetDictionaryValuesReplyValidationError{
						field:  fmt.Sprintf("Dict[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetDictionaryValuesReplyMultiError(errors)
	}

	return nil
}

// GetDictionaryValuesReplyMultiError is an error wrapping multiple validation
// errors returned by GetDictionaryValuesReply.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryValuesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValuesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValuesReplyMultiError) AllErrors() []error { return m }

// GetDictionaryValuesReplyValidationError is the validation error returned by
// GetDictionaryValuesReply.Validate if the designated constraints aren't met.
type GetDictionaryValuesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValuesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValuesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValuesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValuesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValuesReplyValidationError) ErrorName() string {
	return "GetDictionaryValuesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValuesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValuesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValuesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValuesReplyValidationError{}

// Validate checks the field values on ListDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictionaryValueRequestMultiError, or nil if none found.
func (m *ListDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListDictionaryValueRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListDictionaryValueRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DictionaryId

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// ListDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by ListDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryValueRequestMultiError) AllErrors() []error { return m }

// ListDictionaryValueRequestValidationError is the validation error returned
// by ListDictionaryValueRequest.Validate if the designated constraints aren't met.
type ListDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryValueRequestValidationError) ErrorName() string {
	return "ListDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryValueRequestValidationError{}

// Validate checks the field values on ListDictionaryValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictionaryValueReplyMultiError, or nil if none found.
func (m *ListDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictionaryValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictionaryValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// ListDictionaryValueReplyMultiError is an error wrapping multiple validation
// errors returned by ListDictionaryValueReply.ValidateAll() if the designated
// constraints aren't met.
type ListDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryValueReplyMultiError) AllErrors() []error { return m }

// ListDictionaryValueReplyValidationError is the validation error returned by
// ListDictionaryValueReply.Validate if the designated constraints aren't met.
type ListDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryValueReplyValidationError) ErrorName() string {
	return "ListDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryValueReplyValidationError{}

// Validate checks the field values on CreateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictionaryValueRequestMultiError, or nil if none found.
func (m *CreateDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDictionaryId() < 1 {
		err := CreateDictionaryValueRequestValidationError{
			field:  "DictionaryId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := CreateDictionaryValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := CreateDictionaryValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// CreateDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictionaryValueRequestMultiError) AllErrors() []error { return m }

// CreateDictionaryValueRequestValidationError is the validation error returned
// by CreateDictionaryValueRequest.Validate if the designated constraints
// aren't met.
type CreateDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictionaryValueRequestValidationError) ErrorName() string {
	return "CreateDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictionaryValueRequestValidationError{}

// Validate checks the field values on CreateDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictionaryValueReplyMultiError, or nil if none found.
func (m *CreateDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// CreateDictionaryValueReplyMultiError is an error wrapping multiple
// validation errors returned by CreateDictionaryValueReply.ValidateAll() if
// the designated constraints aren't met.
type CreateDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictionaryValueReplyMultiError) AllErrors() []error { return m }

// CreateDictionaryValueReplyValidationError is the validation error returned
// by CreateDictionaryValueReply.Validate if the designated constraints aren't met.
type CreateDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictionaryValueReplyValidationError) ErrorName() string {
	return "CreateDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictionaryValueReplyValidationError{}

// Validate checks the field values on UpdateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictionaryValueRequestMultiError, or nil if none found.
func (m *UpdateDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDictionaryId() < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "DictionaryId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateDictionaryValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// UpdateDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryValueRequestMultiError) AllErrors() []error { return m }

// UpdateDictionaryValueRequestValidationError is the validation error returned
// by UpdateDictionaryValueRequest.Validate if the designated constraints
// aren't met.
type UpdateDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryValueRequestValidationError) ErrorName() string {
	return "UpdateDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryValueRequestValidationError{}

// Validate checks the field values on UpdateDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictionaryValueReplyMultiError, or nil if none found.
func (m *UpdateDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// UpdateDictionaryValueReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateDictionaryValueReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryValueReplyMultiError) AllErrors() []error { return m }

// UpdateDictionaryValueReplyValidationError is the validation error returned
// by UpdateDictionaryValueReply.Validate if the designated constraints aren't met.
type UpdateDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryValueReplyValidationError) ErrorName() string {
	return "UpdateDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryValueReplyValidationError{}

// Validate checks the field values on UpdateDictionaryValueStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDictionaryValueStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryValueStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDictionaryValueStatusRequestMultiError, or nil if none found.
func (m *UpdateDictionaryValueStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryValueStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateDictionaryValueStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateDictionaryValueStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateDictionaryValueStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDictionaryValueStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictionaryValueStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryValueStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryValueStatusRequestMultiError) AllErrors() []error { return m }

// UpdateDictionaryValueStatusRequestValidationError is the validation error
// returned by UpdateDictionaryValueStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateDictionaryValueStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryValueStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryValueStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryValueStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryValueStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryValueStatusRequestValidationError) ErrorName() string {
	return "UpdateDictionaryValueStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryValueStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryValueStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryValueStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryValueStatusRequestValidationError{}

// Validate checks the field values on UpdateDictionaryValueStatusReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDictionaryValueStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryValueStatusReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDictionaryValueStatusReplyMultiError, or nil if none found.
func (m *UpdateDictionaryValueStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryValueStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDictionaryValueStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateDictionaryValueStatusReplyMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDictionaryValueStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictionaryValueStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryValueStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryValueStatusReplyMultiError) AllErrors() []error { return m }

// UpdateDictionaryValueStatusReplyValidationError is the validation error
// returned by UpdateDictionaryValueStatusReply.Validate if the designated
// constraints aren't met.
type UpdateDictionaryValueStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryValueStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryValueStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryValueStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryValueStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryValueStatusReplyValidationError) ErrorName() string {
	return "UpdateDictionaryValueStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryValueStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryValueStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryValueStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryValueStatusReplyValidationError{}

// Validate checks the field values on DeleteDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictionaryValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictionaryValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictionaryValueRequestMultiError, or nil if none found.
func (m *DeleteDictionaryValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictionaryValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteDictionaryValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictionaryValueRequestMultiError(errors)
	}

	return nil
}

// DeleteDictionaryValueRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDictionaryValueRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDictionaryValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictionaryValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictionaryValueRequestMultiError) AllErrors() []error { return m }

// DeleteDictionaryValueRequestValidationError is the validation error returned
// by DeleteDictionaryValueRequest.Validate if the designated constraints
// aren't met.
type DeleteDictionaryValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryValueRequestValidationError) ErrorName() string {
	return "DeleteDictionaryValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryValueRequestValidationError{}

// Validate checks the field values on DeleteDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictionaryValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictionaryValueReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictionaryValueReplyMultiError, or nil if none found.
func (m *DeleteDictionaryValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictionaryValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDictionaryValueReplyMultiError(errors)
	}

	return nil
}

// DeleteDictionaryValueReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteDictionaryValueReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteDictionaryValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictionaryValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictionaryValueReplyMultiError) AllErrors() []error { return m }

// DeleteDictionaryValueReplyValidationError is the validation error returned
// by DeleteDictionaryValueReply.Validate if the designated constraints aren't met.
type DeleteDictionaryValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryValueReplyValidationError) ErrorName() string {
	return "DeleteDictionaryValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryValueReplyValidationError{}

// Validate checks the field values on GetDictionaryValuesReply_Value with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryValuesReply_Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValuesReply_Value with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDictionaryValuesReply_ValueMultiError, or nil if none found.
func (m *GetDictionaryValuesReply_Value) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValuesReply_Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDictionaryValuesReply_ValueValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDictionaryValuesReply_ValueValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDictionaryValuesReply_ValueValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDictionaryValuesReply_ValueMultiError(errors)
	}

	return nil
}

// GetDictionaryValuesReply_ValueMultiError is an error wrapping multiple
// validation errors returned by GetDictionaryValuesReply_Value.ValidateAll()
// if the designated constraints aren't met.
type GetDictionaryValuesReply_ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValuesReply_ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValuesReply_ValueMultiError) AllErrors() []error { return m }

// GetDictionaryValuesReply_ValueValidationError is the validation error
// returned by GetDictionaryValuesReply_Value.Validate if the designated
// constraints aren't met.
type GetDictionaryValuesReply_ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValuesReply_ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValuesReply_ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValuesReply_ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValuesReply_ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValuesReply_ValueValidationError) ErrorName() string {
	return "GetDictionaryValuesReply_ValueValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValuesReply_ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValuesReply_Value.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValuesReply_ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValuesReply_ValueValidationError{}

// Validate checks the field values on GetDictionaryValuesReply_Value_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDictionaryValuesReply_Value_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryValuesReply_Value_Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDictionaryValuesReply_Value_ItemMultiError, or nil if none found.
func (m *GetDictionaryValuesReply_Value_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryValuesReply_Value_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Value

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDictionaryValuesReply_Value_ItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDictionaryValuesReply_Value_ItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDictionaryValuesReply_Value_ItemValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetDictionaryValuesReply_Value_ItemMultiError(errors)
	}

	return nil
}

// GetDictionaryValuesReply_Value_ItemMultiError is an error wrapping multiple
// validation errors returned by
// GetDictionaryValuesReply_Value_Item.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryValuesReply_Value_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryValuesReply_Value_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryValuesReply_Value_ItemMultiError) AllErrors() []error { return m }

// GetDictionaryValuesReply_Value_ItemValidationError is the validation error
// returned by GetDictionaryValuesReply_Value_Item.Validate if the designated
// constraints aren't met.
type GetDictionaryValuesReply_Value_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryValuesReply_Value_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryValuesReply_Value_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryValuesReply_Value_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryValuesReply_Value_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryValuesReply_Value_ItemValidationError) ErrorName() string {
	return "GetDictionaryValuesReply_Value_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryValuesReply_Value_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryValuesReply_Value_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryValuesReply_Value_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryValuesReply_Value_ItemValidationError{}

// Validate checks the field values on ListDictionaryValueReply_DictionaryValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListDictionaryValueReply_DictionaryValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDictionaryValueReply_DictionaryValue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListDictionaryValueReply_DictionaryValueMultiError, or nil if none found.
func (m *ListDictionaryValueReply_DictionaryValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryValueReply_DictionaryValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DictionaryId

	// no validation rules for ParentId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictionaryValueReply_DictionaryValueValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictionaryValueReply_DictionaryValueValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictionaryValueReply_DictionaryValueValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListDictionaryValueReply_DictionaryValueMultiError(errors)
	}

	return nil
}

// ListDictionaryValueReply_DictionaryValueMultiError is an error wrapping
// multiple validation errors returned by
// ListDictionaryValueReply_DictionaryValue.ValidateAll() if the designated
// constraints aren't met.
type ListDictionaryValueReply_DictionaryValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryValueReply_DictionaryValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryValueReply_DictionaryValueMultiError) AllErrors() []error { return m }

// ListDictionaryValueReply_DictionaryValueValidationError is the validation
// error returned by ListDictionaryValueReply_DictionaryValue.Validate if the
// designated constraints aren't met.
type ListDictionaryValueReply_DictionaryValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryValueReply_DictionaryValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryValueReply_DictionaryValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryValueReply_DictionaryValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryValueReply_DictionaryValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryValueReply_DictionaryValueValidationError) ErrorName() string {
	return "ListDictionaryValueReply_DictionaryValueValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryValueReply_DictionaryValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryValueReply_DictionaryValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryValueReply_DictionaryValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryValueReply_DictionaryValueValidationError{}
