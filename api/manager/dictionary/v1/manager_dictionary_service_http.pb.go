// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/dictionary/manager_dictionary_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictionaryCreateDictionary = "/manager.api.manager.dictionary.v1.Dictionary/CreateDictionary"
const OperationDictionaryCreateDictionaryValue = "/manager.api.manager.dictionary.v1.Dictionary/CreateDictionaryValue"
const OperationDictionaryDeleteDictionary = "/manager.api.manager.dictionary.v1.Dictionary/DeleteDictionary"
const OperationDictionaryDeleteDictionaryValue = "/manager.api.manager.dictionary.v1.Dictionary/DeleteDictionaryValue"
const OperationDictionaryGetDictionary = "/manager.api.manager.dictionary.v1.Dictionary/GetDictionary"
const OperationDictionaryGetDictionaryValues = "/manager.api.manager.dictionary.v1.Dictionary/GetDictionaryValues"
const OperationDictionaryListDictionary = "/manager.api.manager.dictionary.v1.Dictionary/ListDictionary"
const OperationDictionaryListDictionaryValue = "/manager.api.manager.dictionary.v1.Dictionary/ListDictionaryValue"
const OperationDictionaryUpdateDictionary = "/manager.api.manager.dictionary.v1.Dictionary/UpdateDictionary"
const OperationDictionaryUpdateDictionaryValue = "/manager.api.manager.dictionary.v1.Dictionary/UpdateDictionaryValue"
const OperationDictionaryUpdateDictionaryValueStatus = "/manager.api.manager.dictionary.v1.Dictionary/UpdateDictionaryValueStatus"

type DictionaryHTTPServer interface {
	// CreateDictionary CreateDictionary 创建字典目录
	CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryReply, error)
	// CreateDictionaryValue CreateDictionaryValue 创建字典值目录
	CreateDictionaryValue(context.Context, *CreateDictionaryValueRequest) (*CreateDictionaryValueReply, error)
	// DeleteDictionary DeleteDictionary 删除字典目录
	DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DeleteDictionaryReply, error)
	// DeleteDictionaryValue DeleteDictionaryValue 删除字典值目录
	DeleteDictionaryValue(context.Context, *DeleteDictionaryValueRequest) (*DeleteDictionaryValueReply, error)
	// GetDictionary GetDictionary 获取指定的字典目录
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryReply, error)
	// GetDictionaryValues GetDictionaryValues 获取指定keys的所有值
	GetDictionaryValues(context.Context, *GetDictionaryValuesRequest) (*GetDictionaryValuesReply, error)
	// ListDictionary ListDictionary 获取字典目录列表
	ListDictionary(context.Context, *ListDictionaryRequest) (*ListDictionaryReply, error)
	// ListDictionaryValue ListDictionaryValue 获取字典值目录列表
	ListDictionaryValue(context.Context, *ListDictionaryValueRequest) (*ListDictionaryValueReply, error)
	// UpdateDictionary UpdateDictionary 更新字典目录
	UpdateDictionary(context.Context, *UpdateDictionaryRequest) (*UpdateDictionaryReply, error)
	// UpdateDictionaryValue UpdateDictionaryValue 更新字典值目录
	UpdateDictionaryValue(context.Context, *UpdateDictionaryValueRequest) (*UpdateDictionaryValueReply, error)
	// UpdateDictionaryValueStatus UpdateDictionaryValueStatus 更新字典值目录状态
	UpdateDictionaryValueStatus(context.Context, *UpdateDictionaryValueStatusRequest) (*UpdateDictionaryValueStatusReply, error)
}

func RegisterDictionaryHTTPServer(s *http.Server, srv DictionaryHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/dictionaries", _Dictionary_ListDictionary0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/dictionary", _Dictionary_CreateDictionary0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/dictionary", _Dictionary_UpdateDictionary0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/dictionary", _Dictionary_DeleteDictionary0_HTTP_Handler(srv))
	r.POST("/manager/client/v1/dictionary/values", _Dictionary_GetDictionaryValues0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/dictionary/values", _Dictionary_GetDictionaryValues1_HTTP_Handler(srv))
	r.GET("/manager/api/v1/dictionary_values", _Dictionary_ListDictionaryValue0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/dictionary_value", _Dictionary_CreateDictionaryValue0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/dictionary_value", _Dictionary_UpdateDictionaryValue0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/dictionary_value/status", _Dictionary_UpdateDictionaryValueStatus0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/dictionary_value", _Dictionary_DeleteDictionaryValue0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/dictionary", _Dictionary_GetDictionary0_HTTP_Handler(srv))
}

func _Dictionary_ListDictionary0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictionaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryListDictionary)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListDictionary(ctx, req.(*ListDictionaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictionaryReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_CreateDictionary0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictionaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryCreateDictionary)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateDictionary(ctx, req.(*CreateDictionaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictionaryReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_UpdateDictionary0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictionaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryUpdateDictionary)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDictionary(ctx, req.(*UpdateDictionaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictionaryReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_DeleteDictionary0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictionaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryDeleteDictionary)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDictionary(ctx, req.(*DeleteDictionaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictionaryReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_GetDictionaryValues0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictionaryValuesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryGetDictionaryValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDictionaryValues(ctx, req.(*GetDictionaryValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictionaryValuesReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_GetDictionaryValues1_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictionaryValuesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryGetDictionaryValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDictionaryValues(ctx, req.(*GetDictionaryValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictionaryValuesReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_ListDictionaryValue0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictionaryValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryListDictionaryValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListDictionaryValue(ctx, req.(*ListDictionaryValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictionaryValueReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_CreateDictionaryValue0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictionaryValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryCreateDictionaryValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateDictionaryValue(ctx, req.(*CreateDictionaryValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictionaryValueReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_UpdateDictionaryValue0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictionaryValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryUpdateDictionaryValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDictionaryValue(ctx, req.(*UpdateDictionaryValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictionaryValueReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_UpdateDictionaryValueStatus0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictionaryValueStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryUpdateDictionaryValueStatus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateDictionaryValueStatus(ctx, req.(*UpdateDictionaryValueStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictionaryValueStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_DeleteDictionaryValue0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictionaryValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryDeleteDictionaryValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteDictionaryValue(ctx, req.(*DeleteDictionaryValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictionaryValueReply)
		return ctx.Result(200, reply)
	}
}

func _Dictionary_GetDictionary0_HTTP_Handler(srv DictionaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictionaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictionaryGetDictionary)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetDictionary(ctx, req.(*GetDictionaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictionaryReply)
		return ctx.Result(200, reply)
	}
}

type DictionaryHTTPClient interface {
	CreateDictionary(ctx context.Context, req *CreateDictionaryRequest, opts ...http.CallOption) (rsp *CreateDictionaryReply, err error)
	CreateDictionaryValue(ctx context.Context, req *CreateDictionaryValueRequest, opts ...http.CallOption) (rsp *CreateDictionaryValueReply, err error)
	DeleteDictionary(ctx context.Context, req *DeleteDictionaryRequest, opts ...http.CallOption) (rsp *DeleteDictionaryReply, err error)
	DeleteDictionaryValue(ctx context.Context, req *DeleteDictionaryValueRequest, opts ...http.CallOption) (rsp *DeleteDictionaryValueReply, err error)
	GetDictionary(ctx context.Context, req *GetDictionaryRequest, opts ...http.CallOption) (rsp *GetDictionaryReply, err error)
	GetDictionaryValues(ctx context.Context, req *GetDictionaryValuesRequest, opts ...http.CallOption) (rsp *GetDictionaryValuesReply, err error)
	ListDictionary(ctx context.Context, req *ListDictionaryRequest, opts ...http.CallOption) (rsp *ListDictionaryReply, err error)
	ListDictionaryValue(ctx context.Context, req *ListDictionaryValueRequest, opts ...http.CallOption) (rsp *ListDictionaryValueReply, err error)
	UpdateDictionary(ctx context.Context, req *UpdateDictionaryRequest, opts ...http.CallOption) (rsp *UpdateDictionaryReply, err error)
	UpdateDictionaryValue(ctx context.Context, req *UpdateDictionaryValueRequest, opts ...http.CallOption) (rsp *UpdateDictionaryValueReply, err error)
	UpdateDictionaryValueStatus(ctx context.Context, req *UpdateDictionaryValueStatusRequest, opts ...http.CallOption) (rsp *UpdateDictionaryValueStatusReply, err error)
}

type DictionaryHTTPClientImpl struct {
	cc *http.Client
}

func NewDictionaryHTTPClient(client *http.Client) DictionaryHTTPClient {
	return &DictionaryHTTPClientImpl{client}
}

func (c *DictionaryHTTPClientImpl) CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...http.CallOption) (*CreateDictionaryReply, error) {
	var out CreateDictionaryReply
	pattern := "/manager/api/v1/dictionary"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryCreateDictionary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) CreateDictionaryValue(ctx context.Context, in *CreateDictionaryValueRequest, opts ...http.CallOption) (*CreateDictionaryValueReply, error) {
	var out CreateDictionaryValueReply
	pattern := "/manager/api/v1/dictionary_value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryCreateDictionaryValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...http.CallOption) (*DeleteDictionaryReply, error) {
	var out DeleteDictionaryReply
	pattern := "/manager/api/v1/dictionary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictionaryDeleteDictionary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) DeleteDictionaryValue(ctx context.Context, in *DeleteDictionaryValueRequest, opts ...http.CallOption) (*DeleteDictionaryValueReply, error) {
	var out DeleteDictionaryValueReply
	pattern := "/manager/api/v1/dictionary_value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictionaryDeleteDictionaryValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...http.CallOption) (*GetDictionaryReply, error) {
	var out GetDictionaryReply
	pattern := "/manager/api/v1/dictionary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictionaryGetDictionary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) GetDictionaryValues(ctx context.Context, in *GetDictionaryValuesRequest, opts ...http.CallOption) (*GetDictionaryValuesReply, error) {
	var out GetDictionaryValuesReply
	pattern := "/manager/api/v1/dictionary/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryGetDictionaryValues))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) ListDictionary(ctx context.Context, in *ListDictionaryRequest, opts ...http.CallOption) (*ListDictionaryReply, error) {
	var out ListDictionaryReply
	pattern := "/manager/api/v1/dictionaries"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictionaryListDictionary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) ListDictionaryValue(ctx context.Context, in *ListDictionaryValueRequest, opts ...http.CallOption) (*ListDictionaryValueReply, error) {
	var out ListDictionaryValueReply
	pattern := "/manager/api/v1/dictionary_values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictionaryListDictionaryValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) UpdateDictionary(ctx context.Context, in *UpdateDictionaryRequest, opts ...http.CallOption) (*UpdateDictionaryReply, error) {
	var out UpdateDictionaryReply
	pattern := "/manager/api/v1/dictionary"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryUpdateDictionary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) UpdateDictionaryValue(ctx context.Context, in *UpdateDictionaryValueRequest, opts ...http.CallOption) (*UpdateDictionaryValueReply, error) {
	var out UpdateDictionaryValueReply
	pattern := "/manager/api/v1/dictionary_value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryUpdateDictionaryValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DictionaryHTTPClientImpl) UpdateDictionaryValueStatus(ctx context.Context, in *UpdateDictionaryValueStatusRequest, opts ...http.CallOption) (*UpdateDictionaryValueStatusReply, error) {
	var out UpdateDictionaryValueStatusReply
	pattern := "/manager/api/v1/dictionary_value/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictionaryUpdateDictionaryValueStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
