// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/role/manager_role_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleCreateRole = "/manager.api.manager.role.v1.Role/CreateRole"
const OperationRoleDeleteRole = "/manager.api.manager.role.v1.Role/DeleteRole"
const OperationRoleGetRole = "/manager.api.manager.role.v1.Role/GetRole"
const OperationRoleGetRoleMenuIds = "/manager.api.manager.role.v1.Role/GetRoleMenuIds"
const OperationRoleListRole = "/manager.api.manager.role.v1.Role/ListRole"
const OperationRoleUpdateRole = "/manager.api.manager.role.v1.Role/UpdateRole"
const OperationRoleUpdateRoleMenu = "/manager.api.manager.role.v1.Role/UpdateRoleMenu"
const OperationRoleUpdateRoleStatus = "/manager.api.manager.role.v1.Role/UpdateRoleStatus"

type RoleHTTPServer interface {
	// CreateRole CreateRole 创建角色信息
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error)
	// DeleteRole DeleteRole 删除角色信息
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error)
	// GetRole GetRole 获取指定的角色信息
	GetRole(context.Context, *GetRoleRequest) (*GetRoleReply, error)
	// GetRoleMenuIds GetRoleMenuIds 获取指定角色的菜单id列表
	GetRoleMenuIds(context.Context, *GetRoleMenuIdsRequest) (*GetRoleMenuIdsReply, error)
	// ListRole ListRole 获取角色信息列表
	ListRole(context.Context, *ListRoleRequest) (*ListRoleReply, error)
	// UpdateRole UpdateRole 更新角色信息
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleReply, error)
	// UpdateRoleMenu UpdateRole 更新角色信息
	UpdateRoleMenu(context.Context, *UpdateRoleMenuRequest) (*UpdateRoleMenuReply, error)
	// UpdateRoleStatus UpdateRoleStatus 更新角色信息状态
	UpdateRoleStatus(context.Context, *UpdateRoleStatusRequest) (*UpdateRoleStatusReply, error)
}

func RegisterRoleHTTPServer(s *http.Server, srv RoleHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/role/menu_ids", _Role_GetRoleMenuIds0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/roles", _Role_ListRole0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/role", _Role_CreateRole0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/role", _Role_UpdateRole0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/role/menu", _Role_UpdateRoleMenu0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/role/status", _Role_UpdateRoleStatus0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/role", _Role_DeleteRole0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/role", _Role_GetRole0_HTTP_Handler(srv))
}

func _Role_GetRoleMenuIds0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleGetRoleMenuIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetRoleMenuIds(ctx, req.(*GetRoleMenuIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleMenuIdsReply)
		return ctx.Result(200, reply)
	}
}

func _Role_ListRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleListRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListRole(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_CreateRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_UpdateRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_UpdateRoleMenu0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleMenuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleUpdateRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRoleMenu(ctx, req.(*UpdateRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Role_UpdateRoleStatus0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleUpdateRoleStatus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateRoleStatus(ctx, req.(*UpdateRoleStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Role_DeleteRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_GetRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleGetRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleReply)
		return ctx.Result(200, reply)
	}
}

type RoleHTTPClient interface {
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleReply, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *GetRoleReply, err error)
	GetRoleMenuIds(ctx context.Context, req *GetRoleMenuIdsRequest, opts ...http.CallOption) (rsp *GetRoleMenuIdsReply, err error)
	ListRole(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRoleReply, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleReply, err error)
	UpdateRoleMenu(ctx context.Context, req *UpdateRoleMenuRequest, opts ...http.CallOption) (rsp *UpdateRoleMenuReply, err error)
	UpdateRoleStatus(ctx context.Context, req *UpdateRoleStatusRequest, opts ...http.CallOption) (rsp *UpdateRoleStatusReply, err error)
}

type RoleHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleHTTPClient(client *http.Client) RoleHTTPClient {
	return &RoleHTTPClientImpl{client}
}

func (c *RoleHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleReply, error) {
	var out CreateRoleReply
	pattern := "/manager/api/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleReply, error) {
	var out DeleteRoleReply
	pattern := "/manager/api/v1/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*GetRoleReply, error) {
	var out GetRoleReply
	pattern := "/manager/api/v1/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) GetRoleMenuIds(ctx context.Context, in *GetRoleMenuIdsRequest, opts ...http.CallOption) (*GetRoleMenuIdsReply, error) {
	var out GetRoleMenuIdsReply
	pattern := "/manager/api/v1/role/menu_ids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleGetRoleMenuIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRoleReply, error) {
	var out ListRoleReply
	pattern := "/manager/api/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleReply, error) {
	var out UpdateRoleReply
	pattern := "/manager/api/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) UpdateRoleMenu(ctx context.Context, in *UpdateRoleMenuRequest, opts ...http.CallOption) (*UpdateRoleMenuReply, error) {
	var out UpdateRoleMenuReply
	pattern := "/manager/api/v1/role/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleUpdateRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusRequest, opts ...http.CallOption) (*UpdateRoleStatusReply, error) {
	var out UpdateRoleStatusReply
	pattern := "/manager/api/v1/role/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleUpdateRoleStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
