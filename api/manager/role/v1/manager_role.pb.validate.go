// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/role/manager_role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRequestMultiError,
// or nil if none found.
func (m *GetRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *GetRoleRequest_Id:
		if v == nil {
			err := GetRoleRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() < 1 {
			err := GetRoleRequestValidationError{
				field:  "Id",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetRoleRequest_Keyword:
		if v == nil {
			err := GetRoleRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := GetRoleRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetRoleRequestMultiError(errors)
	}

	return nil
}

// GetRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRequestMultiError) AllErrors() []error { return m }

// GetRoleRequestValidationError is the validation error returned by
// GetRoleRequest.Validate if the designated constraints aren't met.
type GetRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRequestValidationError) ErrorName() string { return "GetRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRequestValidationError{}

// Validate checks the field values on GetRoleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleReplyMultiError, or
// nil if none found.
func (m *GetRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for DataScope

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DepartmentIds != nil {
		// no validation rules for DepartmentIds
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetRoleReplyMultiError(errors)
	}

	return nil
}

// GetRoleReplyMultiError is an error wrapping multiple validation errors
// returned by GetRoleReply.ValidateAll() if the designated constraints aren't met.
type GetRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleReplyMultiError) AllErrors() []error { return m }

// GetRoleReplyValidationError is the validation error returned by
// GetRoleReply.Validate if the designated constraints aren't met.
type GetRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReplyValidationError) ErrorName() string { return "GetRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReplyValidationError{}

// Validate checks the field values on GetRoleMenuIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdsRequestMultiError, or nil if none found.
func (m *GetRoleMenuIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := GetRoleMenuIdsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleMenuIdsRequestMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdsRequestMultiError) AllErrors() []error { return m }

// GetRoleMenuIdsRequestValidationError is the validation error returned by
// GetRoleMenuIdsRequest.Validate if the designated constraints aren't met.
type GetRoleMenuIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdsRequestValidationError) ErrorName() string {
	return "GetRoleMenuIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdsRequestValidationError{}

// Validate checks the field values on GetRoleMenuIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdsReplyMultiError, or nil if none found.
func (m *GetRoleMenuIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoleMenuIdsReplyMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdsReplyMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdsReply.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdsReplyMultiError) AllErrors() []error { return m }

// GetRoleMenuIdsReplyValidationError is the validation error returned by
// GetRoleMenuIdsReply.Validate if the designated constraints aren't met.
type GetRoleMenuIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdsReplyValidationError) ErrorName() string {
	return "GetRoleMenuIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdsReplyValidationError{}

// Validate checks the field values on ListRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleRequestMultiError, or nil if none found.
func (m *ListRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return ListRoleRequestMultiError(errors)
	}

	return nil
}

// ListRoleRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleRequestMultiError) AllErrors() []error { return m }

// ListRoleRequestValidationError is the validation error returned by
// ListRoleRequest.Validate if the designated constraints aren't met.
type ListRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleRequestValidationError) ErrorName() string { return "ListRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleRequestValidationError{}

// Validate checks the field values on ListRoleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRoleReplyMultiError, or
// nil if none found.
func (m *ListRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleReplyMultiError(errors)
	}

	return nil
}

// ListRoleReplyMultiError is an error wrapping multiple validation errors
// returned by ListRoleReply.ValidateAll() if the designated constraints
// aren't met.
type ListRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleReplyMultiError) AllErrors() []error { return m }

// ListRoleReplyValidationError is the validation error returned by
// ListRoleReply.Validate if the designated constraints aren't met.
type ListRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleReplyValidationError) ErrorName() string { return "ListRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleReplyValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() < 1 {
		err := CreateRoleRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateRoleRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateRoleRequest_DataScope_InLookup[m.GetDataScope()]; !ok {
		err := CreateRoleRequestValidationError{
			field:  "DataScope",
			reason: "value must be in list [ALL CUR CUR_DOWN DOWN CUSTOM]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDataScope()) < 1 {
		err := CreateRoleRequestValidationError{
			field:  "DataScope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DepartmentIds != nil {
		// no validation rules for DepartmentIds
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

var _CreateRoleRequest_DataScope_InLookup = map[string]struct{}{
	"ALL":      {},
	"CUR":      {},
	"CUR_DOWN": {},
	"DOWN":     {},
	"CUSTOM":   {},
}

// Validate checks the field values on CreateRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleReplyMultiError, or nil if none found.
func (m *CreateRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateRoleReplyMultiError(errors)
	}

	return nil
}

// CreateRoleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReplyMultiError) AllErrors() []error { return m }

// CreateRoleReplyValidationError is the validation error returned by
// CreateRoleReply.Validate if the designated constraints aren't met.
type CreateRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReplyValidationError) ErrorName() string { return "CreateRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReplyValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 1 {
		err := UpdateRoleRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateRoleRequest_DataScope_InLookup[m.GetDataScope()]; !ok {
		err := UpdateRoleRequestValidationError{
			field:  "DataScope",
			reason: "value must be in list [ALL CUR CUR_DOWN DOWN CUSTOM]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDataScope()) < 1 {
		err := UpdateRoleRequestValidationError{
			field:  "DataScope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DepartmentIds != nil {
		// no validation rules for DepartmentIds
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

var _UpdateRoleRequest_DataScope_InLookup = map[string]struct{}{
	"ALL":      {},
	"CUR":      {},
	"CUR_DOWN": {},
	"DOWN":     {},
	"CUSTOM":   {},
}

// Validate checks the field values on UpdateRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleReplyMultiError, or nil if none found.
func (m *UpdateRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleReplyMultiError(errors)
	}

	return nil
}

// UpdateRoleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReplyMultiError) AllErrors() []error { return m }

// UpdateRoleReplyValidationError is the validation error returned by
// UpdateRoleReply.Validate if the designated constraints aren't met.
type UpdateRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReplyValidationError) ErrorName() string { return "UpdateRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReplyValidationError{}

// Validate checks the field values on UpdateRoleStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleStatusRequestMultiError, or nil if none found.
func (m *UpdateRoleStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateRoleStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateRoleStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleStatusRequestMultiError) AllErrors() []error { return m }

// UpdateRoleStatusRequestValidationError is the validation error returned by
// UpdateRoleStatusRequest.Validate if the designated constraints aren't met.
type UpdateRoleStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleStatusRequestValidationError) ErrorName() string {
	return "UpdateRoleStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleStatusRequestValidationError{}

// Validate checks the field values on UpdateRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuRequestMultiError, or nil if none found.
func (m *UpdateRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := UpdateRoleMenuRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := UpdateRoleMenuRequestValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateRoleMenuRequest_MenuIds_Unique := make(map[uint32]struct{}, len(m.GetMenuIds()))

	for idx, item := range m.GetMenuIds() {
		_, _ = idx, item

		if _, exists := _UpdateRoleMenuRequest_MenuIds_Unique[item]; exists {
			err := UpdateRoleMenuRequestValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateRoleMenuRequest_MenuIds_Unique[item] = struct{}{}
		}

		// no validation rules for MenuIds[idx]
	}

	if len(errors) > 0 {
		return UpdateRoleMenuRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuRequestMultiError) AllErrors() []error { return m }

// UpdateRoleMenuRequestValidationError is the validation error returned by
// UpdateRoleMenuRequest.Validate if the designated constraints aren't met.
type UpdateRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuRequestValidationError) ErrorName() string {
	return "UpdateRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuRequestValidationError{}

// Validate checks the field values on UpdateRoleMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuReplyMultiError, or nil if none found.
func (m *UpdateRoleMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleMenuReplyMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleMenuReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuReplyMultiError) AllErrors() []error { return m }

// UpdateRoleMenuReplyValidationError is the validation error returned by
// UpdateRoleMenuReply.Validate if the designated constraints aren't met.
type UpdateRoleMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuReplyValidationError) ErrorName() string {
	return "UpdateRoleMenuReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuReplyValidationError{}

// Validate checks the field values on UpdateRoleStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleStatusReplyMultiError, or nil if none found.
func (m *UpdateRoleStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateRoleStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleStatusReplyMultiError) AllErrors() []error { return m }

// UpdateRoleStatusReplyValidationError is the validation error returned by
// UpdateRoleStatusReply.Validate if the designated constraints aren't met.
type UpdateRoleStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleStatusReplyValidationError) ErrorName() string {
	return "UpdateRoleStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleStatusReplyValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleReplyMultiError, or nil if none found.
func (m *DeleteRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReplyMultiError) AllErrors() []error { return m }

// DeleteRoleReplyValidationError is the validation error returned by
// DeleteRoleReply.Validate if the designated constraints aren't met.
type DeleteRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReplyValidationError) ErrorName() string { return "DeleteRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReplyValidationError{}

// Validate checks the field values on ListRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleReply_RoleMultiError, or nil if none found.
func (m *ListRoleReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for DataScope

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleReply_RoleValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleReply_RoleValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleReply_RoleValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DepartmentIds != nil {
		// no validation rules for DepartmentIds
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListRoleReply_RoleMultiError(errors)
	}

	return nil
}

// ListRoleReply_RoleMultiError is an error wrapping multiple validation errors
// returned by ListRoleReply_Role.ValidateAll() if the designated constraints
// aren't met.
type ListRoleReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleReply_RoleMultiError) AllErrors() []error { return m }

// ListRoleReply_RoleValidationError is the validation error returned by
// ListRoleReply_Role.Validate if the designated constraints aren't met.
type ListRoleReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleReply_RoleValidationError) ErrorName() string {
	return "ListRoleReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleReply_RoleValidationError{}
