// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/system/manager_system_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSystemGetSystemSetting = "/manager.api.manager.system.v1.System/GetSystemSetting"

type SystemHTTPServer interface {
	// GetSystemSetting GetSystemSetting 获取系统设置
	GetSystemSetting(context.Context, *GetSystemSettingRequest) (*GetSystemSettingReply, error)
}

func RegisterSystemHTTPServer(s *http.Server, srv SystemHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/system/setting", _System_GetSystemSetting0_HTTP_Handler(srv))
}

func _System_GetSystemSetting0_HTTP_Handler(srv SystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSystemSettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSystemGetSystemSetting)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetSystemSetting(ctx, req.(*GetSystemSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSystemSettingReply)
		return ctx.Result(200, reply)
	}
}

type SystemHTTPClient interface {
	GetSystemSetting(ctx context.Context, req *GetSystemSettingRequest, opts ...http.CallOption) (rsp *GetSystemSettingReply, err error)
}

type SystemHTTPClientImpl struct {
	cc *http.Client
}

func NewSystemHTTPClient(client *http.Client) SystemHTTPClient {
	return &SystemHTTPClientImpl{client}
}

func (c *SystemHTTPClientImpl) GetSystemSetting(ctx context.Context, in *GetSystemSettingRequest, opts ...http.CallOption) (*GetSystemSettingReply, error) {
	var out GetSystemSettingReply
	pattern := "/manager/api/v1/system/setting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSystemGetSystemSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
