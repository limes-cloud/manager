// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/job/manager_job_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationJobCreateJob = "/manager.api.manager.job.v1.Job/CreateJob"
const OperationJobDeleteJob = "/manager.api.manager.job.v1.Job/DeleteJob"
const OperationJobListJob = "/manager.api.manager.job.v1.Job/ListJob"
const OperationJobUpdateJob = "/manager.api.manager.job.v1.Job/UpdateJob"

type JobHTTPServer interface {
	// CreateJob CreateJob 创建职位信息
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobReply, error)
	// DeleteJob DeleteJob 删除职位信息
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobReply, error)
	// ListJob ListJob 获取职位信息列表
	ListJob(context.Context, *ListJobRequest) (*ListJobReply, error)
	// UpdateJob UpdateJob 更新职位信息
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobReply, error)
}

func RegisterJobHTTPServer(s *http.Server, srv JobHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/jobs", _Job_ListJob0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/job", _Job_CreateJob0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/job", _Job_UpdateJob0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/job", _Job_DeleteJob0_HTTP_Handler(srv))
}

func _Job_ListJob0_HTTP_Handler(srv JobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJobListJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListJob(ctx, req.(*ListJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListJobReply)
		return ctx.Result(200, reply)
	}
}

func _Job_CreateJob0_HTTP_Handler(srv JobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJobCreateJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateJob(ctx, req.(*CreateJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateJobReply)
		return ctx.Result(200, reply)
	}
}

func _Job_UpdateJob0_HTTP_Handler(srv JobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJobUpdateJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateJob(ctx, req.(*UpdateJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateJobReply)
		return ctx.Result(200, reply)
	}
}

func _Job_DeleteJob0_HTTP_Handler(srv JobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJobDeleteJob)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteJob(ctx, req.(*DeleteJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteJobReply)
		return ctx.Result(200, reply)
	}
}

type JobHTTPClient interface {
	CreateJob(ctx context.Context, req *CreateJobRequest, opts ...http.CallOption) (rsp *CreateJobReply, err error)
	DeleteJob(ctx context.Context, req *DeleteJobRequest, opts ...http.CallOption) (rsp *DeleteJobReply, err error)
	ListJob(ctx context.Context, req *ListJobRequest, opts ...http.CallOption) (rsp *ListJobReply, err error)
	UpdateJob(ctx context.Context, req *UpdateJobRequest, opts ...http.CallOption) (rsp *UpdateJobReply, err error)
}

type JobHTTPClientImpl struct {
	cc *http.Client
}

func NewJobHTTPClient(client *http.Client) JobHTTPClient {
	return &JobHTTPClientImpl{client}
}

func (c *JobHTTPClientImpl) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...http.CallOption) (*CreateJobReply, error) {
	var out CreateJobReply
	pattern := "/manager/api/v1/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationJobCreateJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JobHTTPClientImpl) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...http.CallOption) (*DeleteJobReply, error) {
	var out DeleteJobReply
	pattern := "/manager/api/v1/job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJobDeleteJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JobHTTPClientImpl) ListJob(ctx context.Context, in *ListJobRequest, opts ...http.CallOption) (*ListJobReply, error) {
	var out ListJobReply
	pattern := "/manager/api/v1/jobs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJobListJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JobHTTPClientImpl) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...http.CallOption) (*UpdateJobReply, error) {
	var out UpdateJobReply
	pattern := "/manager/api/v1/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationJobUpdateJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
