// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/resource/manager_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetResourceScopesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceScopesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceScopesRequestMultiError, or nil if none found.
func (m *GetResourceScopesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceScopesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetResourceScopesRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourceScopesRequestMultiError(errors)
	}

	return nil
}

// GetResourceScopesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourceScopesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourceScopesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceScopesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceScopesRequestMultiError) AllErrors() []error { return m }

// GetResourceScopesRequestValidationError is the validation error returned by
// GetResourceScopesRequest.Validate if the designated constraints aren't met.
type GetResourceScopesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceScopesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceScopesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceScopesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceScopesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceScopesRequestValidationError) ErrorName() string {
	return "GetResourceScopesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceScopesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceScopesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceScopesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceScopesRequestValidationError{}

// Validate checks the field values on GetResourceScopesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceScopesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceScopesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceScopesReplyMultiError, or nil if none found.
func (m *GetResourceScopesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceScopesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	if len(errors) > 0 {
		return GetResourceScopesReplyMultiError(errors)
	}

	return nil
}

// GetResourceScopesReplyMultiError is an error wrapping multiple validation
// errors returned by GetResourceScopesReply.ValidateAll() if the designated
// constraints aren't met.
type GetResourceScopesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceScopesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceScopesReplyMultiError) AllErrors() []error { return m }

// GetResourceScopesReplyValidationError is the validation error returned by
// GetResourceScopesReply.Validate if the designated constraints aren't met.
type GetResourceScopesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceScopesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceScopesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceScopesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceScopesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceScopesReplyValidationError) ErrorName() string {
	return "GetResourceScopesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceScopesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceScopesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceScopesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceScopesReplyValidationError{}

// Validate checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceRequestMultiError, or nil if none found.
func (m *GetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetResourceRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetResourceId() < 0 {
		err := GetResourceRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourceRequestMultiError(errors)
	}

	return nil
}

// GetResourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceRequestMultiError) AllErrors() []error { return m }

// GetResourceRequestValidationError is the validation error returned by
// GetResourceRequest.Validate if the designated constraints aren't met.
type GetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceRequestValidationError) ErrorName() string {
	return "GetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceRequestValidationError{}

// Validate checks the field values on GetResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceReplyMultiError, or nil if none found.
func (m *GetResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourceReplyMultiError(errors)
	}

	return nil
}

// GetResourceReplyMultiError is an error wrapping multiple validation errors
// returned by GetResourceReply.ValidateAll() if the designated constraints
// aren't met.
type GetResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceReplyMultiError) AllErrors() []error { return m }

// GetResourceReplyValidationError is the validation error returned by
// GetResourceReply.Validate if the designated constraints aren't met.
type GetResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceReplyValidationError) ErrorName() string { return "GetResourceReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceReplyValidationError{}

// Validate checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceRequestMultiError, or nil if none found.
func (m *UpdateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateResourceRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetResourceId() < 0 {
		err := UpdateResourceRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDepartmentIds()) < 1 {
		err := UpdateResourceRequestValidationError{
			field:  "DepartmentIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateResourceRequest_DepartmentIds_Unique := make(map[uint32]struct{}, len(m.GetDepartmentIds()))

	for idx, item := range m.GetDepartmentIds() {
		_, _ = idx, item

		if _, exists := _UpdateResourceRequest_DepartmentIds_Unique[item]; exists {
			err := UpdateResourceRequestValidationError{
				field:  fmt.Sprintf("DepartmentIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateResourceRequest_DepartmentIds_Unique[item] = struct{}{}
		}

		// no validation rules for DepartmentIds[idx]
	}

	if len(errors) > 0 {
		return UpdateResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRequestValidationError is the validation error returned by
// UpdateResourceRequest.Validate if the designated constraints aren't met.
type UpdateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRequestValidationError) ErrorName() string {
	return "UpdateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRequestValidationError{}

// Validate checks the field values on UpdateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceReplyMultiError, or nil if none found.
func (m *UpdateResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceReplyMultiError(errors)
	}

	return nil
}

// UpdateResourceReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceReplyMultiError) AllErrors() []error { return m }

// UpdateResourceReplyValidationError is the validation error returned by
// UpdateResourceReply.Validate if the designated constraints aren't met.
type UpdateResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceReplyValidationError) ErrorName() string {
	return "UpdateResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceReplyValidationError{}
