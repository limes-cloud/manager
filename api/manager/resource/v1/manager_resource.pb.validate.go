// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/resource/manager_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetResourceScopesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceScopesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceScopesRequestMultiError, or nil if none found.
func (m *GetResourceScopesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceScopesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return GetResourceScopesRequestMultiError(errors)
	}

	return nil
}

// GetResourceScopesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourceScopesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourceScopesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceScopesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceScopesRequestMultiError) AllErrors() []error { return m }

// GetResourceScopesRequestValidationError is the validation error returned by
// GetResourceScopesRequest.Validate if the designated constraints aren't met.
type GetResourceScopesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceScopesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceScopesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceScopesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceScopesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceScopesRequestValidationError) ErrorName() string {
	return "GetResourceScopesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceScopesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceScopesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceScopesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceScopesRequestValidationError{}

// Validate checks the field values on GetResourceScopesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceScopesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceScopesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceScopesReplyMultiError, or nil if none found.
func (m *GetResourceScopesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceScopesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	if len(errors) > 0 {
		return GetResourceScopesReplyMultiError(errors)
	}

	return nil
}

// GetResourceScopesReplyMultiError is an error wrapping multiple validation
// errors returned by GetResourceScopesReply.ValidateAll() if the designated
// constraints aren't met.
type GetResourceScopesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceScopesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceScopesReplyMultiError) AllErrors() []error { return m }

// GetResourceScopesReplyValidationError is the validation error returned by
// GetResourceScopesReply.Validate if the designated constraints aren't met.
type GetResourceScopesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceScopesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceScopesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceScopesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceScopesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceScopesReplyValidationError) ErrorName() string {
	return "GetResourceScopesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceScopesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceScopesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceScopesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceScopesReplyValidationError{}

// Validate checks the field values on UpdateResourceScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceScopesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceScopesRequestMultiError, or nil if none found.
func (m *UpdateResourceScopesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceScopesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return UpdateResourceScopesRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceScopesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceScopesRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateResourceScopesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceScopesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceScopesRequestMultiError) AllErrors() []error { return m }

// UpdateResourceScopesRequestValidationError is the validation error returned
// by UpdateResourceScopesRequest.Validate if the designated constraints
// aren't met.
type UpdateResourceScopesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceScopesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceScopesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceScopesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceScopesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceScopesRequestValidationError) ErrorName() string {
	return "UpdateResourceScopesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceScopesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceScopesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceScopesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceScopesRequestValidationError{}

// Validate checks the field values on UpdateResourceScopesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceScopesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceScopesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceScopesReplyMultiError, or nil if none found.
func (m *UpdateResourceScopesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceScopesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceScopesReplyMultiError(errors)
	}

	return nil
}

// UpdateResourceScopesReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceScopesReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateResourceScopesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceScopesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceScopesReplyMultiError) AllErrors() []error { return m }

// UpdateResourceScopesReplyValidationError is the validation error returned by
// UpdateResourceScopesReply.Validate if the designated constraints aren't met.
type UpdateResourceScopesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceScopesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceScopesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceScopesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceScopesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceScopesReplyValidationError) ErrorName() string {
	return "UpdateResourceScopesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceScopesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceScopesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceScopesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceScopesReplyValidationError{}
