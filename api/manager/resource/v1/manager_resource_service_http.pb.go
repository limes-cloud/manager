// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/resource/manager_resource_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceGetResourceScopes = "/manager_resource.Resource/GetResourceScopes"
const OperationResourceUpdateResourceScopes = "/manager_resource.Resource/UpdateResourceScopes"

type ResourceHTTPServer interface {
	// GetResourceScopes GetResourceScopes 获取资源权限
	GetResourceScopes(context.Context, *GetResourceScopesRequest) (*GetResourceScopesReply, error)
	// UpdateResourceScopes UpdateResourceScopes 更新资源权限
	UpdateResourceScopes(context.Context, *UpdateResourceScopesRequest) (*UpdateResourceScopesReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.POST("/manager/api/v1/resource/scopes", _Resource_GetResourceScopes0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/resource/scopes", _Resource_UpdateResourceScopes0_HTTP_Handler(srv))
}

func _Resource_GetResourceScopes0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceScopesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResourceScopes)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceScopes(ctx, req.(*GetResourceScopesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceScopesReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_UpdateResourceScopes0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceScopesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceUpdateResourceScopes)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceScopes(ctx, req.(*UpdateResourceScopesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceScopesReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	GetResourceScopes(ctx context.Context, req *GetResourceScopesRequest, opts ...http.CallOption) (rsp *GetResourceScopesReply, err error)
	UpdateResourceScopes(ctx context.Context, req *UpdateResourceScopesRequest, opts ...http.CallOption) (rsp *UpdateResourceScopesReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) GetResourceScopes(ctx context.Context, in *GetResourceScopesRequest, opts ...http.CallOption) (*GetResourceScopesReply, error) {
	var out GetResourceScopesReply
	pattern := "/manager/api/v1/resource/scopes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceGetResourceScopes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) UpdateResourceScopes(ctx context.Context, in *UpdateResourceScopesRequest, opts ...http.CallOption) (*UpdateResourceScopesReply, error) {
	var out UpdateResourceScopesReply
	pattern := "/manager/api/v1/resource/scopes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceUpdateResourceScopes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
