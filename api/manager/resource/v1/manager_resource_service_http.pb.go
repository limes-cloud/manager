// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/resource/manager_resource_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceGetResource = "/manager_resource.Resource/GetResource"
const OperationResourceUpdateResource = "/manager_resource.Resource/UpdateResource"

type ResourceHTTPServer interface {
	// GetResource GetResource 获取资源权限
	GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error)
	// UpdateResource UpdateResource 更新资源权限
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/resource", _Resource_GetResource0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/resource/{keyword}", _Resource_UpdateResource0_HTTP_Handler(srv))
}

func _Resource_GetResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResource(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_UpdateResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	GetResource(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *GetResourceReply, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *UpdateResourceReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*GetResourceReply, error) {
	var out GetResourceReply
	pattern := "/manager/api/v1/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*UpdateResourceReply, error) {
	var out UpdateResourceReply
	pattern := "/manager/api/v1/resource/{keyword}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
