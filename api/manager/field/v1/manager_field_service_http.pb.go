// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/field/manager_field_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFieldCreateField = "/manager.api.manager.field.v1.Field/CreateField"
const OperationFieldDeleteField = "/manager.api.manager.field.v1.Field/DeleteField"
const OperationFieldListField = "/manager.api.manager.field.v1.Field/ListField"
const OperationFieldListFieldType = "/manager.api.manager.field.v1.Field/ListFieldType"
const OperationFieldUpdateField = "/manager.api.manager.field.v1.Field/UpdateField"

type FieldHTTPServer interface {
	// CreateField CreateField 创建用户字段
	CreateField(context.Context, *CreateFieldRequest) (*CreateFieldReply, error)
	// DeleteField DeleteField 删除用户字段
	DeleteField(context.Context, *DeleteFieldRequest) (*DeleteFieldReply, error)
	// ListField ListField 获取用户字段列表
	ListField(context.Context, *ListFieldRequest) (*ListFieldReply, error)
	// ListFieldType ListFieldType 获取可用的字段列表
	ListFieldType(context.Context, *ListFieldTypeRequest) (*ListFieldTypeReply, error)
	// UpdateField UpdateField 更新用户字段
	UpdateField(context.Context, *UpdateFieldRequest) (*UpdateFieldReply, error)
}

func RegisterFieldHTTPServer(s *http.Server, srv FieldHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/field/types", _Field_ListFieldType0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/fields", _Field_ListField0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/field", _Field_CreateField0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/field", _Field_UpdateField0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/field", _Field_DeleteField0_HTTP_Handler(srv))
}

func _Field_ListFieldType0_HTTP_Handler(srv FieldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFieldTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFieldListFieldType)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListFieldType(ctx, req.(*ListFieldTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFieldTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Field_ListField0_HTTP_Handler(srv FieldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFieldListField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListField(ctx, req.(*ListFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Field_CreateField0_HTTP_Handler(srv FieldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFieldCreateField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateField(ctx, req.(*CreateFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Field_UpdateField0_HTTP_Handler(srv FieldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFieldUpdateField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateField(ctx, req.(*UpdateFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Field_DeleteField0_HTTP_Handler(srv FieldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFieldDeleteField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteField(ctx, req.(*DeleteFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFieldReply)
		return ctx.Result(200, reply)
	}
}

type FieldHTTPClient interface {
	CreateField(ctx context.Context, req *CreateFieldRequest, opts ...http.CallOption) (rsp *CreateFieldReply, err error)
	DeleteField(ctx context.Context, req *DeleteFieldRequest, opts ...http.CallOption) (rsp *DeleteFieldReply, err error)
	ListField(ctx context.Context, req *ListFieldRequest, opts ...http.CallOption) (rsp *ListFieldReply, err error)
	ListFieldType(ctx context.Context, req *ListFieldTypeRequest, opts ...http.CallOption) (rsp *ListFieldTypeReply, err error)
	UpdateField(ctx context.Context, req *UpdateFieldRequest, opts ...http.CallOption) (rsp *UpdateFieldReply, err error)
}

type FieldHTTPClientImpl struct {
	cc *http.Client
}

func NewFieldHTTPClient(client *http.Client) FieldHTTPClient {
	return &FieldHTTPClientImpl{client}
}

func (c *FieldHTTPClientImpl) CreateField(ctx context.Context, in *CreateFieldRequest, opts ...http.CallOption) (*CreateFieldReply, error) {
	var out CreateFieldReply
	pattern := "/manager/api/v1/field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFieldCreateField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FieldHTTPClientImpl) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...http.CallOption) (*DeleteFieldReply, error) {
	var out DeleteFieldReply
	pattern := "/manager/api/v1/field"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFieldDeleteField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FieldHTTPClientImpl) ListField(ctx context.Context, in *ListFieldRequest, opts ...http.CallOption) (*ListFieldReply, error) {
	var out ListFieldReply
	pattern := "/manager/api/v1/fields"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFieldListField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FieldHTTPClientImpl) ListFieldType(ctx context.Context, in *ListFieldTypeRequest, opts ...http.CallOption) (*ListFieldTypeReply, error) {
	var out ListFieldTypeReply
	pattern := "/manager/api/v1/field/types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFieldListFieldType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FieldHTTPClientImpl) UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...http.CallOption) (*UpdateFieldReply, error) {
	var out UpdateFieldReply
	pattern := "/manager/api/v1/field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFieldUpdateField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
