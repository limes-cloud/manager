// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/field/manager_field.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListFieldTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFieldTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFieldTypeRequestMultiError, or nil if none found.
func (m *ListFieldTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFieldTypeRequestMultiError(errors)
	}

	return nil
}

// ListFieldTypeRequestMultiError is an error wrapping multiple validation
// errors returned by ListFieldTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFieldTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldTypeRequestMultiError) AllErrors() []error { return m }

// ListFieldTypeRequestValidationError is the validation error returned by
// ListFieldTypeRequest.Validate if the designated constraints aren't met.
type ListFieldTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldTypeRequestValidationError) ErrorName() string {
	return "ListFieldTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFieldTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldTypeRequestValidationError{}

// Validate checks the field values on ListFieldTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFieldTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFieldTypeReplyMultiError, or nil if none found.
func (m *ListFieldTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFieldTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFieldTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFieldTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFieldTypeReplyMultiError(errors)
	}

	return nil
}

// ListFieldTypeReplyMultiError is an error wrapping multiple validation errors
// returned by ListFieldTypeReply.ValidateAll() if the designated constraints
// aren't met.
type ListFieldTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldTypeReplyMultiError) AllErrors() []error { return m }

// ListFieldTypeReplyValidationError is the validation error returned by
// ListFieldTypeReply.Validate if the designated constraints aren't met.
type ListFieldTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldTypeReplyValidationError) ErrorName() string {
	return "ListFieldTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFieldTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldTypeReplyValidationError{}

// Validate checks the field values on ListFieldRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFieldRequestMultiError, or nil if none found.
func (m *ListFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFieldRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListFieldRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListFieldRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListFieldRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListFieldRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListFieldRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListFieldRequestMultiError(errors)
	}

	return nil
}

// ListFieldRequestMultiError is an error wrapping multiple validation errors
// returned by ListFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldRequestMultiError) AllErrors() []error { return m }

// ListFieldRequestValidationError is the validation error returned by
// ListFieldRequest.Validate if the designated constraints aren't met.
type ListFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldRequestValidationError) ErrorName() string { return "ListFieldRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldRequestValidationError{}

var _ListFieldRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListFieldRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListFieldReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFieldReplyMultiError,
// or nil if none found.
func (m *ListFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFieldReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFieldReplyMultiError(errors)
	}

	return nil
}

// ListFieldReplyMultiError is an error wrapping multiple validation errors
// returned by ListFieldReply.ValidateAll() if the designated constraints
// aren't met.
type ListFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldReplyMultiError) AllErrors() []error { return m }

// ListFieldReplyValidationError is the validation error returned by
// ListFieldReply.Validate if the designated constraints aren't met.
type ListFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldReplyValidationError) ErrorName() string { return "ListFieldReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldReplyValidationError{}

// Validate checks the field values on CreateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFieldRequestMultiError, or nil if none found.
func (m *CreateFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateFieldRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateFieldRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateFieldRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateFieldRequestMultiError(errors)
	}

	return nil
}

// CreateFieldRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFieldRequestMultiError) AllErrors() []error { return m }

// CreateFieldRequestValidationError is the validation error returned by
// CreateFieldRequest.Validate if the designated constraints aren't met.
type CreateFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFieldRequestValidationError) ErrorName() string {
	return "CreateFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFieldRequestValidationError{}

// Validate checks the field values on CreateFieldReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFieldReplyMultiError, or nil if none found.
func (m *CreateFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFieldReplyMultiError(errors)
	}

	return nil
}

// CreateFieldReplyMultiError is an error wrapping multiple validation errors
// returned by CreateFieldReply.ValidateAll() if the designated constraints
// aren't met.
type CreateFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFieldReplyMultiError) AllErrors() []error { return m }

// CreateFieldReplyValidationError is the validation error returned by
// CreateFieldReply.Validate if the designated constraints aren't met.
type CreateFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFieldReplyValidationError) ErrorName() string { return "CreateFieldReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFieldReplyValidationError{}

// Validate checks the field values on UpdateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFieldRequestMultiError, or nil if none found.
func (m *UpdateFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateFieldRequestMultiError(errors)
	}

	return nil
}

// UpdateFieldRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFieldRequestMultiError) AllErrors() []error { return m }

// UpdateFieldRequestValidationError is the validation error returned by
// UpdateFieldRequest.Validate if the designated constraints aren't met.
type UpdateFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFieldRequestValidationError) ErrorName() string {
	return "UpdateFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFieldRequestValidationError{}

// Validate checks the field values on UpdateFieldReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFieldReplyMultiError, or nil if none found.
func (m *UpdateFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFieldReplyMultiError(errors)
	}

	return nil
}

// UpdateFieldReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateFieldReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFieldReplyMultiError) AllErrors() []error { return m }

// UpdateFieldReplyValidationError is the validation error returned by
// UpdateFieldReply.Validate if the designated constraints aren't met.
type UpdateFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFieldReplyValidationError) ErrorName() string { return "UpdateFieldReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFieldReplyValidationError{}

// Validate checks the field values on DeleteFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFieldRequestMultiError, or nil if none found.
func (m *DeleteFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFieldRequestMultiError(errors)
	}

	return nil
}

// DeleteFieldRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFieldRequestMultiError) AllErrors() []error { return m }

// DeleteFieldRequestValidationError is the validation error returned by
// DeleteFieldRequest.Validate if the designated constraints aren't met.
type DeleteFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFieldRequestValidationError) ErrorName() string {
	return "DeleteFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFieldRequestValidationError{}

// Validate checks the field values on DeleteFieldReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFieldReplyMultiError, or nil if none found.
func (m *DeleteFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFieldReplyMultiError(errors)
	}

	return nil
}

// DeleteFieldReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteFieldReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFieldReplyMultiError) AllErrors() []error { return m }

// DeleteFieldReplyValidationError is the validation error returned by
// DeleteFieldReply.Validate if the designated constraints aren't met.
type DeleteFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFieldReplyValidationError) ErrorName() string { return "DeleteFieldReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFieldReplyValidationError{}

// Validate checks the field values on ListFieldTypeReply_Type with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFieldTypeReply_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldTypeReply_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFieldTypeReply_TypeMultiError, or nil if none found.
func (m *ListFieldTypeReply_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldTypeReply_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	if len(errors) > 0 {
		return ListFieldTypeReply_TypeMultiError(errors)
	}

	return nil
}

// ListFieldTypeReply_TypeMultiError is an error wrapping multiple validation
// errors returned by ListFieldTypeReply_Type.ValidateAll() if the designated
// constraints aren't met.
type ListFieldTypeReply_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldTypeReply_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldTypeReply_TypeMultiError) AllErrors() []error { return m }

// ListFieldTypeReply_TypeValidationError is the validation error returned by
// ListFieldTypeReply_Type.Validate if the designated constraints aren't met.
type ListFieldTypeReply_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldTypeReply_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldTypeReply_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldTypeReply_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldTypeReply_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldTypeReply_TypeValidationError) ErrorName() string {
	return "ListFieldTypeReply_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e ListFieldTypeReply_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldTypeReply_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldTypeReply_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldTypeReply_TypeValidationError{}

// Validate checks the field values on ListFieldReply_Field with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFieldReply_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFieldReply_Field with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFieldReply_FieldMultiError, or nil if none found.
func (m *ListFieldReply_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFieldReply_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListFieldReply_FieldMultiError(errors)
	}

	return nil
}

// ListFieldReply_FieldMultiError is an error wrapping multiple validation
// errors returned by ListFieldReply_Field.ValidateAll() if the designated
// constraints aren't met.
type ListFieldReply_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFieldReply_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFieldReply_FieldMultiError) AllErrors() []error { return m }

// ListFieldReply_FieldValidationError is the validation error returned by
// ListFieldReply_Field.Validate if the designated constraints aren't met.
type ListFieldReply_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFieldReply_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFieldReply_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFieldReply_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFieldReply_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFieldReply_FieldValidationError) ErrorName() string {
	return "ListFieldReply_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e ListFieldReply_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFieldReply_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFieldReply_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFieldReply_FieldValidationError{}
