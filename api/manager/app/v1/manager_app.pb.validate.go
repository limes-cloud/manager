// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/app/manager_app.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppRequestMultiError, or
// nil if none found.
func (m *GetAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetAppRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := GetAppRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAppRequestMultiError(errors)
	}

	return nil
}

// GetAppRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppRequestMultiError) AllErrors() []error { return m }

// GetAppRequestValidationError is the validation error returned by
// GetAppRequest.Validate if the designated constraints aren't met.
type GetAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRequestValidationError) ErrorName() string { return "GetAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRequestValidationError{}

// Validate checks the field values on GetAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppReplyMultiError, or
// nil if none found.
func (m *GetAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for LogoUrl

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Copyright

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppReplyValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppReplyValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppReplyValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppReplyValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppReplyValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppReplyValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetAppReplyMultiError(errors)
	}

	return nil
}

// GetAppReplyMultiError is an error wrapping multiple validation errors
// returned by GetAppReply.ValidateAll() if the designated constraints aren't met.
type GetAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppReplyMultiError) AllErrors() []error { return m }

// GetAppReplyValidationError is the validation error returned by
// GetAppReply.Validate if the designated constraints aren't met.
type GetAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppReplyValidationError) ErrorName() string { return "GetAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppReplyValidationError{}

// Validate checks the field values on ListAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppRequestMultiError,
// or nil if none found.
func (m *ListAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListAppRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListAppRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListAppRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListAppRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListAppRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListAppRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListAppRequestMultiError(errors)
	}

	return nil
}

// ListAppRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppRequestMultiError) AllErrors() []error { return m }

// ListAppRequestValidationError is the validation error returned by
// ListAppRequest.Validate if the designated constraints aren't met.
type ListAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppRequestValidationError) ErrorName() string { return "ListAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppRequestValidationError{}

var _ListAppRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListAppRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppReplyMultiError, or
// nil if none found.
func (m *ListAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppReplyMultiError(errors)
	}

	return nil
}

// ListAppReplyMultiError is an error wrapping multiple validation errors
// returned by ListAppReply.ValidateAll() if the designated constraints aren't met.
type ListAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppReplyMultiError) AllErrors() []error { return m }

// ListAppReplyValidationError is the validation error returned by
// ListAppReply.Validate if the designated constraints aren't met.
type ListAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppReplyValidationError) ErrorName() string { return "ListAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppReplyValidationError{}

// Validate checks the field values on CreateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAppRequestMultiError, or nil if none found.
func (m *CreateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCopyright()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "Copyright",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetChannelIds()) < 1 {
		err := CreateAppRequestValidationError{
			field:  "ChannelIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateAppRequest_ChannelIds_Unique := make(map[uint32]struct{}, len(m.GetChannelIds()))

	for idx, item := range m.GetChannelIds() {
		_, _ = idx, item

		if _, exists := _CreateAppRequest_ChannelIds_Unique[item]; exists {
			err := CreateAppRequestValidationError{
				field:  fmt.Sprintf("ChannelIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateAppRequest_ChannelIds_Unique[item] = struct{}{}
		}

		// no validation rules for ChannelIds[idx]
	}

	_CreateAppRequest_FieldIds_Unique := make(map[uint32]struct{}, len(m.GetFieldIds()))

	for idx, item := range m.GetFieldIds() {
		_, _ = idx, item

		if _, exists := _CreateAppRequest_FieldIds_Unique[item]; exists {
			err := CreateAppRequestValidationError{
				field:  fmt.Sprintf("FieldIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateAppRequest_FieldIds_Unique[item] = struct{}{}
		}

		// no validation rules for FieldIds[idx]
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateAppRequestMultiError(errors)
	}

	return nil
}

// CreateAppRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAppRequestMultiError) AllErrors() []error { return m }

// CreateAppRequestValidationError is the validation error returned by
// CreateAppRequest.Validate if the designated constraints aren't met.
type CreateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppRequestValidationError) ErrorName() string { return "CreateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppRequestValidationError{}

// Validate checks the field values on CreateAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateAppReplyMultiError,
// or nil if none found.
func (m *CreateAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAppReplyMultiError(errors)
	}

	return nil
}

// CreateAppReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAppReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAppReplyMultiError) AllErrors() []error { return m }

// CreateAppReplyValidationError is the validation error returned by
// CreateAppReply.Validate if the designated constraints aren't met.
type CreateAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppReplyValidationError) ErrorName() string { return "CreateAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppReplyValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppRequestMultiError, or nil if none found.
func (m *UpdateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAppRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCopyright()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Copyright",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetChannelIds()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "ChannelIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateAppRequest_ChannelIds_Unique := make(map[uint32]struct{}, len(m.GetChannelIds()))

	for idx, item := range m.GetChannelIds() {
		_, _ = idx, item

		if _, exists := _UpdateAppRequest_ChannelIds_Unique[item]; exists {
			err := UpdateAppRequestValidationError{
				field:  fmt.Sprintf("ChannelIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateAppRequest_ChannelIds_Unique[item] = struct{}{}
		}

		// no validation rules for ChannelIds[idx]
	}

	_UpdateAppRequest_FieldIds_Unique := make(map[uint32]struct{}, len(m.GetFieldIds()))

	for idx, item := range m.GetFieldIds() {
		_, _ = idx, item

		if _, exists := _UpdateAppRequest_FieldIds_Unique[item]; exists {
			err := UpdateAppRequestValidationError{
				field:  fmt.Sprintf("FieldIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateAppRequest_FieldIds_Unique[item] = struct{}{}
		}

		// no validation rules for FieldIds[idx]
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}

	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on UpdateAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAppReplyMultiError,
// or nil if none found.
func (m *UpdateAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppReplyMultiError(errors)
	}

	return nil
}

// UpdateAppReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAppReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppReplyMultiError) AllErrors() []error { return m }

// UpdateAppReplyValidationError is the validation error returned by
// UpdateAppReply.Validate if the designated constraints aren't met.
type UpdateAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppReplyValidationError) ErrorName() string { return "UpdateAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppReplyValidationError{}

// Validate checks the field values on UpdateAppStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppStatusRequestMultiError, or nil if none found.
func (m *UpdateAppStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAppStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return UpdateAppStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateAppStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAppStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppStatusRequestMultiError) AllErrors() []error { return m }

// UpdateAppStatusRequestValidationError is the validation error returned by
// UpdateAppStatusRequest.Validate if the designated constraints aren't met.
type UpdateAppStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppStatusRequestValidationError) ErrorName() string {
	return "UpdateAppStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppStatusRequestValidationError{}

// Validate checks the field values on UpdateAppStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppStatusReplyMultiError, or nil if none found.
func (m *UpdateAppStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateAppStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAppStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppStatusReplyMultiError) AllErrors() []error { return m }

// UpdateAppStatusReplyValidationError is the validation error returned by
// UpdateAppStatusReply.Validate if the designated constraints aren't met.
type UpdateAppStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppStatusReplyValidationError) ErrorName() string {
	return "UpdateAppStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppStatusReplyValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppRequestMultiError, or nil if none found.
func (m *DeleteAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAppRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAppRequestMultiError(errors)
	}

	return nil
}

// DeleteAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAppRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppRequestMultiError) AllErrors() []error { return m }

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on DeleteAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAppReplyMultiError,
// or nil if none found.
func (m *DeleteAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAppReplyMultiError(errors)
	}

	return nil
}

// DeleteAppReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAppReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppReplyMultiError) AllErrors() []error { return m }

// DeleteAppReplyValidationError is the validation error returned by
// DeleteAppReply.Validate if the designated constraints aren't met.
type DeleteAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppReplyValidationError) ErrorName() string { return "DeleteAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppReplyValidationError{}

// Validate checks the field values on GetAppReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppReply_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppReply_ChannelMultiError, or nil if none found.
func (m *GetAppReply_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppReply_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for Description

	if len(errors) > 0 {
		return GetAppReply_ChannelMultiError(errors)
	}

	return nil
}

// GetAppReply_ChannelMultiError is an error wrapping multiple validation
// errors returned by GetAppReply_Channel.ValidateAll() if the designated
// constraints aren't met.
type GetAppReply_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppReply_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppReply_ChannelMultiError) AllErrors() []error { return m }

// GetAppReply_ChannelValidationError is the validation error returned by
// GetAppReply_Channel.Validate if the designated constraints aren't met.
type GetAppReply_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppReply_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppReply_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppReply_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppReply_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppReply_ChannelValidationError) ErrorName() string {
	return "GetAppReply_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppReply_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppReply_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppReply_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppReply_ChannelValidationError{}

// Validate checks the field values on GetAppReply_Field with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppReply_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppReply_Field with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppReply_FieldMultiError, or nil if none found.
func (m *GetAppReply_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppReply_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return GetAppReply_FieldMultiError(errors)
	}

	return nil
}

// GetAppReply_FieldMultiError is an error wrapping multiple validation errors
// returned by GetAppReply_Field.ValidateAll() if the designated constraints
// aren't met.
type GetAppReply_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppReply_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppReply_FieldMultiError) AllErrors() []error { return m }

// GetAppReply_FieldValidationError is the validation error returned by
// GetAppReply_Field.Validate if the designated constraints aren't met.
type GetAppReply_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppReply_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppReply_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppReply_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppReply_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppReply_FieldValidationError) ErrorName() string {
	return "GetAppReply_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppReply_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppReply_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppReply_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppReply_FieldValidationError{}

// Validate checks the field values on ListAppReply_App with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppReply_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppReply_App with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppReply_AppMultiError, or nil if none found.
func (m *ListAppReply_App) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppReply_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for LogoUrl

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Copyright

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListAppReply_AppMultiError(errors)
	}

	return nil
}

// ListAppReply_AppMultiError is an error wrapping multiple validation errors
// returned by ListAppReply_App.ValidateAll() if the designated constraints
// aren't met.
type ListAppReply_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppReply_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppReply_AppMultiError) AllErrors() []error { return m }

// ListAppReply_AppValidationError is the validation error returned by
// ListAppReply_App.Validate if the designated constraints aren't met.
type ListAppReply_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppReply_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppReply_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppReply_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppReply_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppReply_AppValidationError) ErrorName() string { return "ListAppReply_AppValidationError" }

// Error satisfies the builtin error interface
func (e ListAppReply_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppReply_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppReply_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppReply_AppValidationError{}
