// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/feedback/manager_feedback_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFeedbackCreateFeedback = "/manager.api.manager.feedback.v1.Feedback/CreateFeedback"
const OperationFeedbackCreateFeedbackCategory = "/manager.api.manager.feedback.v1.Feedback/CreateFeedbackCategory"
const OperationFeedbackDeleteFeedback = "/manager.api.manager.feedback.v1.Feedback/DeleteFeedback"
const OperationFeedbackDeleteFeedbackCategory = "/manager.api.manager.feedback.v1.Feedback/DeleteFeedbackCategory"
const OperationFeedbackListFeedback = "/manager.api.manager.feedback.v1.Feedback/ListFeedback"
const OperationFeedbackListFeedbackCategory = "/manager.api.manager.feedback.v1.Feedback/ListFeedbackCategory"
const OperationFeedbackUpdateFeedback = "/manager.api.manager.feedback.v1.Feedback/UpdateFeedback"
const OperationFeedbackUpdateFeedbackCategory = "/manager.api.manager.feedback.v1.Feedback/UpdateFeedbackCategory"

type FeedbackHTTPServer interface {
	// CreateFeedback CreateFeedback 创建反馈建议
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error)
	// CreateFeedbackCategory CreateFeedbackCategory 创建反馈建议分类
	CreateFeedbackCategory(context.Context, *CreateFeedbackCategoryRequest) (*CreateFeedbackCategoryReply, error)
	// DeleteFeedback DeleteFeedback 删除反馈建议
	DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error)
	// DeleteFeedbackCategory DeleteFeedbackCategory 删除反馈建议分类
	DeleteFeedbackCategory(context.Context, *DeleteFeedbackCategoryRequest) (*DeleteFeedbackCategoryReply, error)
	// ListFeedback ListFeedback 获取反馈建议列表
	ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error)
	// ListFeedbackCategory ListFeedbackCategory 获取反馈建议分类列表
	ListFeedbackCategory(context.Context, *ListFeedbackCategoryRequest) (*ListFeedbackCategoryReply, error)
	// UpdateFeedback UpdateFeedback 更新反馈建议
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error)
	// UpdateFeedbackCategory UpdateFeedbackCategory 更新反馈建议分类
	UpdateFeedbackCategory(context.Context, *UpdateFeedbackCategoryRequest) (*UpdateFeedbackCategoryReply, error)
}

func RegisterFeedbackHTTPServer(s *http.Server, srv FeedbackHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/client/v1/feedback_categories", _Feedback_ListFeedbackCategory0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/feedback_categories", _Feedback_ListFeedbackCategory1_HTTP_Handler(srv))
	r.POST("/manager/api/v1/feedback_category", _Feedback_CreateFeedbackCategory0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/feedback_category", _Feedback_UpdateFeedbackCategory0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/feedback_category", _Feedback_DeleteFeedbackCategory0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/feedbacks", _Feedback_ListFeedback0_HTTP_Handler(srv))
	r.POST("/manager/client/v1/feedback", _Feedback_CreateFeedback0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/feedback", _Feedback_DeleteFeedback0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/feedback", _Feedback_UpdateFeedback0_HTTP_Handler(srv))
}

func _Feedback_ListFeedbackCategory0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedbackCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackListFeedbackCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListFeedbackCategory(ctx, req.(*ListFeedbackCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedbackCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_ListFeedbackCategory1_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedbackCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackListFeedbackCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListFeedbackCategory(ctx, req.(*ListFeedbackCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedbackCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_CreateFeedbackCategory0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFeedbackCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackCreateFeedbackCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateFeedbackCategory(ctx, req.(*CreateFeedbackCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFeedbackCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_UpdateFeedbackCategory0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFeedbackCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackUpdateFeedbackCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateFeedbackCategory(ctx, req.(*UpdateFeedbackCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFeedbackCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_DeleteFeedbackCategory0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeedbackCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackDeleteFeedbackCategory)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteFeedbackCategory(ctx, req.(*DeleteFeedbackCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeedbackCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_ListFeedback0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackListFeedback)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListFeedback(ctx, req.(*ListFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_CreateFeedback0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFeedbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackCreateFeedback)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateFeedback(ctx, req.(*CreateFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_DeleteFeedback0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeedbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackDeleteFeedback)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteFeedback(ctx, req.(*DeleteFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeedbackReply)
		return ctx.Result(200, reply)
	}
}

func _Feedback_UpdateFeedback0_HTTP_Handler(srv FeedbackHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFeedbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedbackUpdateFeedback)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFeedbackReply)
		return ctx.Result(200, reply)
	}
}

type FeedbackHTTPClient interface {
	CreateFeedback(ctx context.Context, req *CreateFeedbackRequest, opts ...http.CallOption) (rsp *CreateFeedbackReply, err error)
	CreateFeedbackCategory(ctx context.Context, req *CreateFeedbackCategoryRequest, opts ...http.CallOption) (rsp *CreateFeedbackCategoryReply, err error)
	DeleteFeedback(ctx context.Context, req *DeleteFeedbackRequest, opts ...http.CallOption) (rsp *DeleteFeedbackReply, err error)
	DeleteFeedbackCategory(ctx context.Context, req *DeleteFeedbackCategoryRequest, opts ...http.CallOption) (rsp *DeleteFeedbackCategoryReply, err error)
	ListFeedback(ctx context.Context, req *ListFeedbackRequest, opts ...http.CallOption) (rsp *ListFeedbackReply, err error)
	ListFeedbackCategory(ctx context.Context, req *ListFeedbackCategoryRequest, opts ...http.CallOption) (rsp *ListFeedbackCategoryReply, err error)
	UpdateFeedback(ctx context.Context, req *UpdateFeedbackRequest, opts ...http.CallOption) (rsp *UpdateFeedbackReply, err error)
	UpdateFeedbackCategory(ctx context.Context, req *UpdateFeedbackCategoryRequest, opts ...http.CallOption) (rsp *UpdateFeedbackCategoryReply, err error)
}

type FeedbackHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedbackHTTPClient(client *http.Client) FeedbackHTTPClient {
	return &FeedbackHTTPClientImpl{client}
}

func (c *FeedbackHTTPClientImpl) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...http.CallOption) (*CreateFeedbackReply, error) {
	var out CreateFeedbackReply
	pattern := "/manager/client/v1/feedback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeedbackCreateFeedback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) CreateFeedbackCategory(ctx context.Context, in *CreateFeedbackCategoryRequest, opts ...http.CallOption) (*CreateFeedbackCategoryReply, error) {
	var out CreateFeedbackCategoryReply
	pattern := "/manager/api/v1/feedback_category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeedbackCreateFeedbackCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...http.CallOption) (*DeleteFeedbackReply, error) {
	var out DeleteFeedbackReply
	pattern := "/manager/api/v1/feedback"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackDeleteFeedback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) DeleteFeedbackCategory(ctx context.Context, in *DeleteFeedbackCategoryRequest, opts ...http.CallOption) (*DeleteFeedbackCategoryReply, error) {
	var out DeleteFeedbackCategoryReply
	pattern := "/manager/api/v1/feedback_category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackDeleteFeedbackCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...http.CallOption) (*ListFeedbackReply, error) {
	var out ListFeedbackReply
	pattern := "/manager/api/v1/feedbacks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackListFeedback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) ListFeedbackCategory(ctx context.Context, in *ListFeedbackCategoryRequest, opts ...http.CallOption) (*ListFeedbackCategoryReply, error) {
	var out ListFeedbackCategoryReply
	pattern := "/manager/api/v1/feedback_categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedbackListFeedbackCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...http.CallOption) (*UpdateFeedbackReply, error) {
	var out UpdateFeedbackReply
	pattern := "/manager/api/v1/feedback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeedbackUpdateFeedback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedbackHTTPClientImpl) UpdateFeedbackCategory(ctx context.Context, in *UpdateFeedbackCategoryRequest, opts ...http.CallOption) (*UpdateFeedbackCategoryReply, error) {
	var out UpdateFeedbackCategoryReply
	pattern := "/manager/api/v1/feedback_category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeedbackUpdateFeedbackCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
