// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/manager/feedback/manager_feedback_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Feedback_ListFeedbackCategory_FullMethodName   = "/manager.api.manager.feedback.v1.Feedback/ListFeedbackCategory"
	Feedback_CreateFeedbackCategory_FullMethodName = "/manager.api.manager.feedback.v1.Feedback/CreateFeedbackCategory"
	Feedback_UpdateFeedbackCategory_FullMethodName = "/manager.api.manager.feedback.v1.Feedback/UpdateFeedbackCategory"
	Feedback_DeleteFeedbackCategory_FullMethodName = "/manager.api.manager.feedback.v1.Feedback/DeleteFeedbackCategory"
	Feedback_ListFeedback_FullMethodName           = "/manager.api.manager.feedback.v1.Feedback/ListFeedback"
	Feedback_CreateFeedback_FullMethodName         = "/manager.api.manager.feedback.v1.Feedback/CreateFeedback"
	Feedback_DeleteFeedback_FullMethodName         = "/manager.api.manager.feedback.v1.Feedback/DeleteFeedback"
	Feedback_UpdateFeedback_FullMethodName         = "/manager.api.manager.feedback.v1.Feedback/UpdateFeedback"
)

// FeedbackClient is the client API for Feedback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackClient interface {
	// ListFeedbackCategory 获取反馈建议分类列表
	ListFeedbackCategory(ctx context.Context, in *ListFeedbackCategoryRequest, opts ...grpc.CallOption) (*ListFeedbackCategoryReply, error)
	// CreateFeedbackCategory 创建反馈建议分类
	CreateFeedbackCategory(ctx context.Context, in *CreateFeedbackCategoryRequest, opts ...grpc.CallOption) (*CreateFeedbackCategoryReply, error)
	// UpdateFeedbackCategory 更新反馈建议分类
	UpdateFeedbackCategory(ctx context.Context, in *UpdateFeedbackCategoryRequest, opts ...grpc.CallOption) (*UpdateFeedbackCategoryReply, error)
	// DeleteFeedbackCategory 删除反馈建议分类
	DeleteFeedbackCategory(ctx context.Context, in *DeleteFeedbackCategoryRequest, opts ...grpc.CallOption) (*DeleteFeedbackCategoryReply, error)
	// ListFeedback 获取反馈建议列表
	ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackReply, error)
	// CreateFeedback 创建反馈建议
	CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackReply, error)
	// DeleteFeedback 删除反馈建议
	DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackReply, error)
	// UpdateFeedback 更新反馈建议
	UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackReply, error)
}

type feedbackClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackClient(cc grpc.ClientConnInterface) FeedbackClient {
	return &feedbackClient{cc}
}

func (c *feedbackClient) ListFeedbackCategory(ctx context.Context, in *ListFeedbackCategoryRequest, opts ...grpc.CallOption) (*ListFeedbackCategoryReply, error) {
	out := new(ListFeedbackCategoryReply)
	err := c.cc.Invoke(ctx, Feedback_ListFeedbackCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) CreateFeedbackCategory(ctx context.Context, in *CreateFeedbackCategoryRequest, opts ...grpc.CallOption) (*CreateFeedbackCategoryReply, error) {
	out := new(CreateFeedbackCategoryReply)
	err := c.cc.Invoke(ctx, Feedback_CreateFeedbackCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) UpdateFeedbackCategory(ctx context.Context, in *UpdateFeedbackCategoryRequest, opts ...grpc.CallOption) (*UpdateFeedbackCategoryReply, error) {
	out := new(UpdateFeedbackCategoryReply)
	err := c.cc.Invoke(ctx, Feedback_UpdateFeedbackCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) DeleteFeedbackCategory(ctx context.Context, in *DeleteFeedbackCategoryRequest, opts ...grpc.CallOption) (*DeleteFeedbackCategoryReply, error) {
	out := new(DeleteFeedbackCategoryReply)
	err := c.cc.Invoke(ctx, Feedback_DeleteFeedbackCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) ListFeedback(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackReply, error) {
	out := new(ListFeedbackReply)
	err := c.cc.Invoke(ctx, Feedback_ListFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*CreateFeedbackReply, error) {
	out := new(CreateFeedbackReply)
	err := c.cc.Invoke(ctx, Feedback_CreateFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) DeleteFeedback(ctx context.Context, in *DeleteFeedbackRequest, opts ...grpc.CallOption) (*DeleteFeedbackReply, error) {
	out := new(DeleteFeedbackReply)
	err := c.cc.Invoke(ctx, Feedback_DeleteFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackClient) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*UpdateFeedbackReply, error) {
	out := new(UpdateFeedbackReply)
	err := c.cc.Invoke(ctx, Feedback_UpdateFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServer is the server API for Feedback service.
// All implementations must embed UnimplementedFeedbackServer
// for forward compatibility
type FeedbackServer interface {
	// ListFeedbackCategory 获取反馈建议分类列表
	ListFeedbackCategory(context.Context, *ListFeedbackCategoryRequest) (*ListFeedbackCategoryReply, error)
	// CreateFeedbackCategory 创建反馈建议分类
	CreateFeedbackCategory(context.Context, *CreateFeedbackCategoryRequest) (*CreateFeedbackCategoryReply, error)
	// UpdateFeedbackCategory 更新反馈建议分类
	UpdateFeedbackCategory(context.Context, *UpdateFeedbackCategoryRequest) (*UpdateFeedbackCategoryReply, error)
	// DeleteFeedbackCategory 删除反馈建议分类
	DeleteFeedbackCategory(context.Context, *DeleteFeedbackCategoryRequest) (*DeleteFeedbackCategoryReply, error)
	// ListFeedback 获取反馈建议列表
	ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error)
	// CreateFeedback 创建反馈建议
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error)
	// DeleteFeedback 删除反馈建议
	DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error)
	// UpdateFeedback 更新反馈建议
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error)
	mustEmbedUnimplementedFeedbackServer()
}

// UnimplementedFeedbackServer must be embedded to have forward compatible implementations.
type UnimplementedFeedbackServer struct {
}

func (UnimplementedFeedbackServer) ListFeedbackCategory(context.Context, *ListFeedbackCategoryRequest) (*ListFeedbackCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedbackCategory not implemented")
}
func (UnimplementedFeedbackServer) CreateFeedbackCategory(context.Context, *CreateFeedbackCategoryRequest) (*CreateFeedbackCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedbackCategory not implemented")
}
func (UnimplementedFeedbackServer) UpdateFeedbackCategory(context.Context, *UpdateFeedbackCategoryRequest) (*UpdateFeedbackCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedbackCategory not implemented")
}
func (UnimplementedFeedbackServer) DeleteFeedbackCategory(context.Context, *DeleteFeedbackCategoryRequest) (*DeleteFeedbackCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedbackCategory not implemented")
}
func (UnimplementedFeedbackServer) ListFeedback(context.Context, *ListFeedbackRequest) (*ListFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedback not implemented")
}
func (UnimplementedFeedbackServer) CreateFeedback(context.Context, *CreateFeedbackRequest) (*CreateFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedFeedbackServer) DeleteFeedback(context.Context, *DeleteFeedbackRequest) (*DeleteFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedback not implemented")
}
func (UnimplementedFeedbackServer) UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*UpdateFeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedback not implemented")
}
func (UnimplementedFeedbackServer) mustEmbedUnimplementedFeedbackServer() {}

// UnsafeFeedbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackServer will
// result in compilation errors.
type UnsafeFeedbackServer interface {
	mustEmbedUnimplementedFeedbackServer()
}

func RegisterFeedbackServer(s grpc.ServiceRegistrar, srv FeedbackServer) {
	s.RegisterService(&Feedback_ServiceDesc, srv)
}

func _Feedback_ListFeedbackCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbackCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).ListFeedbackCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_ListFeedbackCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).ListFeedbackCategory(ctx, req.(*ListFeedbackCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_CreateFeedbackCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).CreateFeedbackCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_CreateFeedbackCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).CreateFeedbackCategory(ctx, req.(*CreateFeedbackCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_UpdateFeedbackCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).UpdateFeedbackCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_UpdateFeedbackCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).UpdateFeedbackCategory(ctx, req.(*UpdateFeedbackCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_DeleteFeedbackCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).DeleteFeedbackCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_DeleteFeedbackCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).DeleteFeedbackCategory(ctx, req.(*DeleteFeedbackCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_ListFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).ListFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_ListFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).ListFeedback(ctx, req.(*ListFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_CreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).CreateFeedback(ctx, req.(*CreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_DeleteFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).DeleteFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_DeleteFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).DeleteFeedback(ctx, req.(*DeleteFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feedback_UpdateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServer).UpdateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feedback_UpdateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServer).UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feedback_ServiceDesc is the grpc.ServiceDesc for Feedback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feedback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.manager.feedback.v1.Feedback",
	HandlerType: (*FeedbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeedbackCategory",
			Handler:    _Feedback_ListFeedbackCategory_Handler,
		},
		{
			MethodName: "CreateFeedbackCategory",
			Handler:    _Feedback_CreateFeedbackCategory_Handler,
		},
		{
			MethodName: "UpdateFeedbackCategory",
			Handler:    _Feedback_UpdateFeedbackCategory_Handler,
		},
		{
			MethodName: "DeleteFeedbackCategory",
			Handler:    _Feedback_DeleteFeedbackCategory_Handler,
		},
		{
			MethodName: "ListFeedback",
			Handler:    _Feedback_ListFeedback_Handler,
		},
		{
			MethodName: "CreateFeedback",
			Handler:    _Feedback_CreateFeedback_Handler,
		},
		{
			MethodName: "DeleteFeedback",
			Handler:    _Feedback_DeleteFeedback_Handler,
		},
		{
			MethodName: "UpdateFeedback",
			Handler:    _Feedback_UpdateFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/manager/feedback/manager_feedback_service.proto",
}
