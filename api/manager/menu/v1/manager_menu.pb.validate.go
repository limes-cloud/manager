// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/menu/manager_menu.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuRequestMultiError, or nil if none found.
func (m *ListMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return ListMenuRequestMultiError(errors)
	}

	return nil
}

// ListMenuRequestMultiError is an error wrapping multiple validation errors
// returned by ListMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuRequestMultiError) AllErrors() []error { return m }

// ListMenuRequestValidationError is the validation error returned by
// ListMenuRequest.Validate if the designated constraints aren't met.
type ListMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuRequestValidationError) ErrorName() string { return "ListMenuRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuRequestValidationError{}

// Validate checks the field values on ListMenuReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuReplyMultiError, or
// nil if none found.
func (m *ListMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuReplyMultiError(errors)
	}

	return nil
}

// ListMenuReplyMultiError is an error wrapping multiple validation errors
// returned by ListMenuReply.ValidateAll() if the designated constraints
// aren't met.
type ListMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuReplyMultiError) AllErrors() []error { return m }

// ListMenuReplyValidationError is the validation error returned by
// ListMenuReply.Validate if the designated constraints aren't met.
type ListMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuReplyValidationError) ErrorName() string { return "ListMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuReplyValidationError{}

// Validate checks the field values on ListMenuByCurRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuByCurRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuByCurRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuByCurRoleRequestMultiError, or nil if none found.
func (m *ListMenuByCurRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuByCurRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMenuByCurRoleRequestMultiError(errors)
	}

	return nil
}

// ListMenuByCurRoleRequestMultiError is an error wrapping multiple validation
// errors returned by ListMenuByCurRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMenuByCurRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuByCurRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuByCurRoleRequestMultiError) AllErrors() []error { return m }

// ListMenuByCurRoleRequestValidationError is the validation error returned by
// ListMenuByCurRoleRequest.Validate if the designated constraints aren't met.
type ListMenuByCurRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuByCurRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuByCurRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuByCurRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuByCurRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuByCurRoleRequestValidationError) ErrorName() string {
	return "ListMenuByCurRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuByCurRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuByCurRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuByCurRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuByCurRoleRequestValidationError{}

// Validate checks the field values on ListMenuByCurRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuByCurRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuByCurRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuByCurRoleReplyMultiError, or nil if none found.
func (m *ListMenuByCurRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuByCurRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuByCurRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuByCurRoleReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuByCurRoleReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuByCurRoleReplyMultiError(errors)
	}

	return nil
}

// ListMenuByCurRoleReplyMultiError is an error wrapping multiple validation
// errors returned by ListMenuByCurRoleReply.ValidateAll() if the designated
// constraints aren't met.
type ListMenuByCurRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuByCurRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuByCurRoleReplyMultiError) AllErrors() []error { return m }

// ListMenuByCurRoleReplyValidationError is the validation error returned by
// ListMenuByCurRoleReply.Validate if the designated constraints aren't met.
type ListMenuByCurRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuByCurRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuByCurRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuByCurRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuByCurRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuByCurRoleReplyValidationError) ErrorName() string {
	return "ListMenuByCurRoleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuByCurRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuByCurRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuByCurRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuByCurRoleReplyValidationError{}

// Validate checks the field values on CreateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuRequestMultiError, or nil if none found.
func (m *CreateMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateMenuRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateMenuRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.Api != nil {
		// no validation rules for Api
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Permission != nil {
		// no validation rules for Permission
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.IsHidden != nil {
		// no validation rules for IsHidden
	}

	if m.IsCache != nil {
		// no validation rules for IsCache
	}

	if m.IsHome != nil {
		// no validation rules for IsHome
	}

	if m.IsAffix != nil {
		// no validation rules for IsAffix
	}

	if len(errors) > 0 {
		return CreateMenuRequestMultiError(errors)
	}

	return nil
}

// CreateMenuRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuRequestMultiError) AllErrors() []error { return m }

// CreateMenuRequestValidationError is the validation error returned by
// CreateMenuRequest.Validate if the designated constraints aren't met.
type CreateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRequestValidationError) ErrorName() string {
	return "CreateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRequestValidationError{}

// Validate checks the field values on CreateMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuReplyMultiError, or nil if none found.
func (m *CreateMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateMenuReplyMultiError(errors)
	}

	return nil
}

// CreateMenuReplyMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReply.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReplyMultiError) AllErrors() []error { return m }

// CreateMenuReplyValidationError is the validation error returned by
// CreateMenuReply.Validate if the designated constraints aren't met.
type CreateMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReplyValidationError) ErrorName() string { return "CreateMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReplyValidationError{}

// Validate checks the field values on UpdateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuRequestMultiError, or nil if none found.
func (m *UpdateMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateMenuRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateMenuRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := UpdateMenuRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.Api != nil {
		// no validation rules for Api
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Permission != nil {
		// no validation rules for Permission
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.IsHidden != nil {
		// no validation rules for IsHidden
	}

	if m.IsCache != nil {
		// no validation rules for IsCache
	}

	if m.IsHome != nil {
		// no validation rules for IsHome
	}

	if m.IsAffix != nil {
		// no validation rules for IsAffix
	}

	if len(errors) > 0 {
		return UpdateMenuRequestMultiError(errors)
	}

	return nil
}

// UpdateMenuRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuRequestMultiError) AllErrors() []error { return m }

// UpdateMenuRequestValidationError is the validation error returned by
// UpdateMenuRequest.Validate if the designated constraints aren't met.
type UpdateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRequestValidationError) ErrorName() string {
	return "UpdateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRequestValidationError{}

// Validate checks the field values on UpdateMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuReplyMultiError, or nil if none found.
func (m *UpdateMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMenuReplyMultiError(errors)
	}

	return nil
}

// UpdateMenuReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReplyMultiError) AllErrors() []error { return m }

// UpdateMenuReplyValidationError is the validation error returned by
// UpdateMenuReply.Validate if the designated constraints aren't met.
type UpdateMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReplyValidationError) ErrorName() string { return "UpdateMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReplyValidationError{}

// Validate checks the field values on DeleteMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuRequestMultiError, or nil if none found.
func (m *DeleteMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteMenuRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMenuRequestMultiError(errors)
	}

	return nil
}

// DeleteMenuRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuRequestMultiError) AllErrors() []error { return m }

// DeleteMenuRequestValidationError is the validation error returned by
// DeleteMenuRequest.Validate if the designated constraints aren't met.
type DeleteMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRequestValidationError) ErrorName() string {
	return "DeleteMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRequestValidationError{}

// Validate checks the field values on DeleteMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuReplyMultiError, or nil if none found.
func (m *DeleteMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMenuReplyMultiError(errors)
	}

	return nil
}

// DeleteMenuReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReplyMultiError) AllErrors() []error { return m }

// DeleteMenuReplyValidationError is the validation error returned by
// DeleteMenuReply.Validate if the designated constraints aren't met.
type DeleteMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReplyValidationError) ErrorName() string { return "DeleteMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReplyValidationError{}

// Validate checks the field values on ListMenuReply_Menu with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuReply_Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuReply_Menu with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuReply_MenuMultiError, or nil if none found.
func (m *ListMenuReply_Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuReply_Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Title

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuReply_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuReply_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuReply_MenuValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.Api != nil {
		// no validation rules for Api
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Permission != nil {
		// no validation rules for Permission
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.IsHidden != nil {
		// no validation rules for IsHidden
	}

	if m.IsCache != nil {
		// no validation rules for IsCache
	}

	if m.IsHome != nil {
		// no validation rules for IsHome
	}

	if m.IsAffix != nil {
		// no validation rules for IsAffix
	}

	if len(errors) > 0 {
		return ListMenuReply_MenuMultiError(errors)
	}

	return nil
}

// ListMenuReply_MenuMultiError is an error wrapping multiple validation errors
// returned by ListMenuReply_Menu.ValidateAll() if the designated constraints
// aren't met.
type ListMenuReply_MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuReply_MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuReply_MenuMultiError) AllErrors() []error { return m }

// ListMenuReply_MenuValidationError is the validation error returned by
// ListMenuReply_Menu.Validate if the designated constraints aren't met.
type ListMenuReply_MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuReply_MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuReply_MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuReply_MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuReply_MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuReply_MenuValidationError) ErrorName() string {
	return "ListMenuReply_MenuValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuReply_MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuReply_Menu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuReply_MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuReply_MenuValidationError{}

// Validate checks the field values on ListMenuByCurRoleReply_Menu with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuByCurRoleReply_Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuByCurRoleReply_Menu with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuByCurRoleReply_MenuMultiError, or nil if none found.
func (m *ListMenuByCurRoleReply_Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuByCurRoleReply_Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Title

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuByCurRoleReply_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuByCurRoleReply_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuByCurRoleReply_MenuValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.Api != nil {
		// no validation rules for Api
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Permission != nil {
		// no validation rules for Permission
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.IsHidden != nil {
		// no validation rules for IsHidden
	}

	if m.IsCache != nil {
		// no validation rules for IsCache
	}

	if m.IsHome != nil {
		// no validation rules for IsHome
	}

	if m.IsAffix != nil {
		// no validation rules for IsAffix
	}

	if len(errors) > 0 {
		return ListMenuByCurRoleReply_MenuMultiError(errors)
	}

	return nil
}

// ListMenuByCurRoleReply_MenuMultiError is an error wrapping multiple
// validation errors returned by ListMenuByCurRoleReply_Menu.ValidateAll() if
// the designated constraints aren't met.
type ListMenuByCurRoleReply_MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuByCurRoleReply_MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuByCurRoleReply_MenuMultiError) AllErrors() []error { return m }

// ListMenuByCurRoleReply_MenuValidationError is the validation error returned
// by ListMenuByCurRoleReply_Menu.Validate if the designated constraints
// aren't met.
type ListMenuByCurRoleReply_MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuByCurRoleReply_MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuByCurRoleReply_MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuByCurRoleReply_MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuByCurRoleReply_MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuByCurRoleReply_MenuValidationError) ErrorName() string {
	return "ListMenuByCurRoleReply_MenuValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuByCurRoleReply_MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuByCurRoleReply_Menu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuByCurRoleReply_MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuByCurRoleReply_MenuValidationError{}
