// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/manager/department/manager_department_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Department_ListDepartmentClassify_FullMethodName   = "/manager.api.manager.department.v1.Department/ListDepartmentClassify"
	Department_CreateDepartmentClassify_FullMethodName = "/manager.api.manager.department.v1.Department/CreateDepartmentClassify"
	Department_UpdateDepartmentClassify_FullMethodName = "/manager.api.manager.department.v1.Department/UpdateDepartmentClassify"
	Department_DeleteDepartmentClassify_FullMethodName = "/manager.api.manager.department.v1.Department/DeleteDepartmentClassify"
	Department_ListDepartment_FullMethodName           = "/manager.api.manager.department.v1.Department/ListDepartment"
	Department_ListCurrentDepartment_FullMethodName    = "/manager.api.manager.department.v1.Department/ListCurrentDepartment"
	Department_CreateDepartment_FullMethodName         = "/manager.api.manager.department.v1.Department/CreateDepartment"
	Department_UpdateDepartment_FullMethodName         = "/manager.api.manager.department.v1.Department/UpdateDepartment"
	Department_DeleteDepartment_FullMethodName         = "/manager.api.manager.department.v1.Department/DeleteDepartment"
	Department_GetDepartment_FullMethodName            = "/manager.api.manager.department.v1.Department/GetDepartment"
)

// DepartmentClient is the client API for Department service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentClient interface {
	// ListDepartmentClassify 获取部门分类列表
	ListDepartmentClassify(ctx context.Context, in *ListDepartmentClassifyRequest, opts ...grpc.CallOption) (*ListDepartmentClassifyReply, error)
	// CreateDepartmentClassify 创建部门分类
	CreateDepartmentClassify(ctx context.Context, in *CreateDepartmentClassifyRequest, opts ...grpc.CallOption) (*CreateDepartmentClassifyReply, error)
	// UpdateDepartmentClassify 更新部门分类
	UpdateDepartmentClassify(ctx context.Context, in *UpdateDepartmentClassifyRequest, opts ...grpc.CallOption) (*UpdateDepartmentClassifyReply, error)
	// DeleteDepartmentClassify 删除部门分类
	DeleteDepartmentClassify(ctx context.Context, in *DeleteDepartmentClassifyRequest, opts ...grpc.CallOption) (*DeleteDepartmentClassifyReply, error)
	// ListDepartment 获取部门信息列表
	ListDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentReply, error)
	// ListDepartment 获取部门信息列表
	ListCurrentDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentReply, error)
	// CreateDepartment 创建部门信息
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentReply, error)
	// UpdateDepartment 更新部门信息
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentReply, error)
	// DeleteDepartment 删除部门信息
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentReply, error)
	// GetDepartment 获取指定的部门信息
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentReply, error)
}

type departmentClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentClient(cc grpc.ClientConnInterface) DepartmentClient {
	return &departmentClient{cc}
}

func (c *departmentClient) ListDepartmentClassify(ctx context.Context, in *ListDepartmentClassifyRequest, opts ...grpc.CallOption) (*ListDepartmentClassifyReply, error) {
	out := new(ListDepartmentClassifyReply)
	err := c.cc.Invoke(ctx, Department_ListDepartmentClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) CreateDepartmentClassify(ctx context.Context, in *CreateDepartmentClassifyRequest, opts ...grpc.CallOption) (*CreateDepartmentClassifyReply, error) {
	out := new(CreateDepartmentClassifyReply)
	err := c.cc.Invoke(ctx, Department_CreateDepartmentClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) UpdateDepartmentClassify(ctx context.Context, in *UpdateDepartmentClassifyRequest, opts ...grpc.CallOption) (*UpdateDepartmentClassifyReply, error) {
	out := new(UpdateDepartmentClassifyReply)
	err := c.cc.Invoke(ctx, Department_UpdateDepartmentClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) DeleteDepartmentClassify(ctx context.Context, in *DeleteDepartmentClassifyRequest, opts ...grpc.CallOption) (*DeleteDepartmentClassifyReply, error) {
	out := new(DeleteDepartmentClassifyReply)
	err := c.cc.Invoke(ctx, Department_DeleteDepartmentClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) ListDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentReply, error) {
	out := new(ListDepartmentReply)
	err := c.cc.Invoke(ctx, Department_ListDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) ListCurrentDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentReply, error) {
	out := new(ListDepartmentReply)
	err := c.cc.Invoke(ctx, Department_ListCurrentDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentReply, error) {
	out := new(CreateDepartmentReply)
	err := c.cc.Invoke(ctx, Department_CreateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentReply, error) {
	out := new(UpdateDepartmentReply)
	err := c.cc.Invoke(ctx, Department_UpdateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentReply, error) {
	out := new(DeleteDepartmentReply)
	err := c.cc.Invoke(ctx, Department_DeleteDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentReply, error) {
	out := new(GetDepartmentReply)
	err := c.cc.Invoke(ctx, Department_GetDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServer is the server API for Department service.
// All implementations must embed UnimplementedDepartmentServer
// for forward compatibility
type DepartmentServer interface {
	// ListDepartmentClassify 获取部门分类列表
	ListDepartmentClassify(context.Context, *ListDepartmentClassifyRequest) (*ListDepartmentClassifyReply, error)
	// CreateDepartmentClassify 创建部门分类
	CreateDepartmentClassify(context.Context, *CreateDepartmentClassifyRequest) (*CreateDepartmentClassifyReply, error)
	// UpdateDepartmentClassify 更新部门分类
	UpdateDepartmentClassify(context.Context, *UpdateDepartmentClassifyRequest) (*UpdateDepartmentClassifyReply, error)
	// DeleteDepartmentClassify 删除部门分类
	DeleteDepartmentClassify(context.Context, *DeleteDepartmentClassifyRequest) (*DeleteDepartmentClassifyReply, error)
	// ListDepartment 获取部门信息列表
	ListDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentReply, error)
	// ListDepartment 获取部门信息列表
	ListCurrentDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentReply, error)
	// CreateDepartment 创建部门信息
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentReply, error)
	// UpdateDepartment 更新部门信息
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentReply, error)
	// DeleteDepartment 删除部门信息
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentReply, error)
	// GetDepartment 获取指定的部门信息
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentReply, error)
	mustEmbedUnimplementedDepartmentServer()
}

// UnimplementedDepartmentServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentServer struct {
}

func (UnimplementedDepartmentServer) ListDepartmentClassify(context.Context, *ListDepartmentClassifyRequest) (*ListDepartmentClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartmentClassify not implemented")
}
func (UnimplementedDepartmentServer) CreateDepartmentClassify(context.Context, *CreateDepartmentClassifyRequest) (*CreateDepartmentClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartmentClassify not implemented")
}
func (UnimplementedDepartmentServer) UpdateDepartmentClassify(context.Context, *UpdateDepartmentClassifyRequest) (*UpdateDepartmentClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartmentClassify not implemented")
}
func (UnimplementedDepartmentServer) DeleteDepartmentClassify(context.Context, *DeleteDepartmentClassifyRequest) (*DeleteDepartmentClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartmentClassify not implemented")
}
func (UnimplementedDepartmentServer) ListDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartment not implemented")
}
func (UnimplementedDepartmentServer) ListCurrentDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentDepartment not implemented")
}
func (UnimplementedDepartmentServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedDepartmentServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedDepartmentServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedDepartmentServer) mustEmbedUnimplementedDepartmentServer() {}

// UnsafeDepartmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServer will
// result in compilation errors.
type UnsafeDepartmentServer interface {
	mustEmbedUnimplementedDepartmentServer()
}

func RegisterDepartmentServer(s grpc.ServiceRegistrar, srv DepartmentServer) {
	s.RegisterService(&Department_ServiceDesc, srv)
}

func _Department_ListDepartmentClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).ListDepartmentClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_ListDepartmentClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).ListDepartmentClassify(ctx, req.(*ListDepartmentClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_CreateDepartmentClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).CreateDepartmentClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_CreateDepartmentClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).CreateDepartmentClassify(ctx, req.(*CreateDepartmentClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_UpdateDepartmentClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).UpdateDepartmentClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_UpdateDepartmentClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).UpdateDepartmentClassify(ctx, req.(*UpdateDepartmentClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_DeleteDepartmentClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).DeleteDepartmentClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_DeleteDepartmentClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).DeleteDepartmentClassify(ctx, req.(*DeleteDepartmentClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_ListDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).ListDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_ListDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).ListDepartment(ctx, req.(*ListDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_ListCurrentDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).ListCurrentDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_ListCurrentDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).ListCurrentDepartment(ctx, req.(*ListDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Department_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Department_ServiceDesc is the grpc.ServiceDesc for Department service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Department_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.manager.department.v1.Department",
	HandlerType: (*DepartmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDepartmentClassify",
			Handler:    _Department_ListDepartmentClassify_Handler,
		},
		{
			MethodName: "CreateDepartmentClassify",
			Handler:    _Department_CreateDepartmentClassify_Handler,
		},
		{
			MethodName: "UpdateDepartmentClassify",
			Handler:    _Department_UpdateDepartmentClassify_Handler,
		},
		{
			MethodName: "DeleteDepartmentClassify",
			Handler:    _Department_DeleteDepartmentClassify_Handler,
		},
		{
			MethodName: "ListDepartment",
			Handler:    _Department_ListDepartment_Handler,
		},
		{
			MethodName: "ListCurrentDepartment",
			Handler:    _Department_ListCurrentDepartment_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _Department_CreateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Department_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Department_DeleteDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _Department_GetDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/manager/department/manager_department_service.proto",
}
