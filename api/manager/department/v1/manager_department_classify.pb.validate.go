// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/department/manager_department_classify.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DepartmentClassify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DepartmentClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepartmentClassify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DepartmentClassifyMultiError, or nil if none found.
func (m *DepartmentClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *DepartmentClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return DepartmentClassifyMultiError(errors)
	}

	return nil
}

// DepartmentClassifyMultiError is an error wrapping multiple validation errors
// returned by DepartmentClassify.ValidateAll() if the designated constraints
// aren't met.
type DepartmentClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepartmentClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepartmentClassifyMultiError) AllErrors() []error { return m }

// DepartmentClassifyValidationError is the validation error returned by
// DepartmentClassify.Validate if the designated constraints aren't met.
type DepartmentClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentClassifyValidationError) ErrorName() string {
	return "DepartmentClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentClassifyValidationError{}

// Validate checks the field values on ListDepartmentClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepartmentClassifyRequestMultiError, or nil if none found.
func (m *ListDepartmentClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListDepartmentClassifyRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListDepartmentClassifyRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListDepartmentClassifyRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListDepartmentClassifyRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListDepartmentClassifyRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListDepartmentClassifyRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListDepartmentClassifyRequestMultiError(errors)
	}

	return nil
}

// ListDepartmentClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by ListDepartmentClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDepartmentClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentClassifyRequestMultiError) AllErrors() []error { return m }

// ListDepartmentClassifyRequestValidationError is the validation error
// returned by ListDepartmentClassifyRequest.Validate if the designated
// constraints aren't met.
type ListDepartmentClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentClassifyRequestValidationError) ErrorName() string {
	return "ListDepartmentClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentClassifyRequestValidationError{}

var _ListDepartmentClassifyRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListDepartmentClassifyRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListDepartmentClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepartmentClassifyReplyMultiError, or nil if none found.
func (m *ListDepartmentClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepartmentClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepartmentClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepartmentClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDepartmentClassifyReplyMultiError(errors)
	}

	return nil
}

// ListDepartmentClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by ListDepartmentClassifyReply.ValidateAll() if
// the designated constraints aren't met.
type ListDepartmentClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentClassifyReplyMultiError) AllErrors() []error { return m }

// ListDepartmentClassifyReplyValidationError is the validation error returned
// by ListDepartmentClassifyReply.Validate if the designated constraints
// aren't met.
type ListDepartmentClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentClassifyReplyValidationError) ErrorName() string {
	return "ListDepartmentClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentClassifyReplyValidationError{}

// Validate checks the field values on CreateDepartmentClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDepartmentClassifyRequestMultiError, or nil if none found.
func (m *CreateDepartmentClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDepartmentClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDepartmentClassifyRequestMultiError(errors)
	}

	return nil
}

// CreateDepartmentClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDepartmentClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDepartmentClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentClassifyRequestMultiError) AllErrors() []error { return m }

// CreateDepartmentClassifyRequestValidationError is the validation error
// returned by CreateDepartmentClassifyRequest.Validate if the designated
// constraints aren't met.
type CreateDepartmentClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentClassifyRequestValidationError) ErrorName() string {
	return "CreateDepartmentClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentClassifyRequestValidationError{}

// Validate checks the field values on CreateDepartmentClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDepartmentClassifyReplyMultiError, or nil if none found.
func (m *CreateDepartmentClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDepartmentClassifyReplyMultiError(errors)
	}

	return nil
}

// CreateDepartmentClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by CreateDepartmentClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type CreateDepartmentClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentClassifyReplyMultiError) AllErrors() []error { return m }

// CreateDepartmentClassifyReplyValidationError is the validation error
// returned by CreateDepartmentClassifyReply.Validate if the designated
// constraints aren't met.
type CreateDepartmentClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentClassifyReplyValidationError) ErrorName() string {
	return "CreateDepartmentClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentClassifyReplyValidationError{}

// Validate checks the field values on UpdateDepartmentClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDepartmentClassifyRequestMultiError, or nil if none found.
func (m *UpdateDepartmentClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDepartmentClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDepartmentClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateDepartmentClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateDepartmentClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDepartmentClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDepartmentClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateDepartmentClassifyRequestValidationError is the validation error
// returned by UpdateDepartmentClassifyRequest.Validate if the designated
// constraints aren't met.
type UpdateDepartmentClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentClassifyRequestValidationError) ErrorName() string {
	return "UpdateDepartmentClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentClassifyRequestValidationError{}

// Validate checks the field values on UpdateDepartmentClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDepartmentClassifyReplyMultiError, or nil if none found.
func (m *UpdateDepartmentClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDepartmentClassifyReplyMultiError(errors)
	}

	return nil
}

// UpdateDepartmentClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateDepartmentClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateDepartmentClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentClassifyReplyMultiError) AllErrors() []error { return m }

// UpdateDepartmentClassifyReplyValidationError is the validation error
// returned by UpdateDepartmentClassifyReply.Validate if the designated
// constraints aren't met.
type UpdateDepartmentClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentClassifyReplyValidationError) ErrorName() string {
	return "UpdateDepartmentClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentClassifyReplyValidationError{}

// Validate checks the field values on DeleteDepartmentClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDepartmentClassifyRequestMultiError, or nil if none found.
func (m *DeleteDepartmentClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteDepartmentClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDepartmentClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteDepartmentClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDepartmentClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteDepartmentClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteDepartmentClassifyRequestValidationError is the validation error
// returned by DeleteDepartmentClassifyRequest.Validate if the designated
// constraints aren't met.
type DeleteDepartmentClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentClassifyRequestValidationError) ErrorName() string {
	return "DeleteDepartmentClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentClassifyRequestValidationError{}

// Validate checks the field values on DeleteDepartmentClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDepartmentClassifyReplyMultiError, or nil if none found.
func (m *DeleteDepartmentClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDepartmentClassifyReplyMultiError(errors)
	}

	return nil
}

// DeleteDepartmentClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteDepartmentClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteDepartmentClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentClassifyReplyMultiError) AllErrors() []error { return m }

// DeleteDepartmentClassifyReplyValidationError is the validation error
// returned by DeleteDepartmentClassifyReply.Validate if the designated
// constraints aren't met.
type DeleteDepartmentClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentClassifyReplyValidationError) ErrorName() string {
	return "DeleteDepartmentClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentClassifyReplyValidationError{}

// Validate checks the field values on
// ListDepartmentClassifyReply_DepartmentClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentClassifyReply_DepartmentClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDepartmentClassifyReply_DepartmentClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListDepartmentClassifyReply_DepartmentClassifyMultiError, or nil if none found.
func (m *ListDepartmentClassifyReply_DepartmentClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentClassifyReply_DepartmentClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListDepartmentClassifyReply_DepartmentClassifyMultiError(errors)
	}

	return nil
}

// ListDepartmentClassifyReply_DepartmentClassifyMultiError is an error
// wrapping multiple validation errors returned by
// ListDepartmentClassifyReply_DepartmentClassify.ValidateAll() if the
// designated constraints aren't met.
type ListDepartmentClassifyReply_DepartmentClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentClassifyReply_DepartmentClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentClassifyReply_DepartmentClassifyMultiError) AllErrors() []error { return m }

// ListDepartmentClassifyReply_DepartmentClassifyValidationError is the
// validation error returned by
// ListDepartmentClassifyReply_DepartmentClassify.Validate if the designated
// constraints aren't met.
type ListDepartmentClassifyReply_DepartmentClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) ErrorName() string {
	return "ListDepartmentClassifyReply_DepartmentClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentClassifyReply_DepartmentClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentClassifyReply_DepartmentClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentClassifyReply_DepartmentClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentClassifyReply_DepartmentClassifyValidationError{}
