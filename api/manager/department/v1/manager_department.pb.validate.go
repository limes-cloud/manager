// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/department/manager_department.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentRequestMultiError, or nil if none found.
func (m *GetDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *GetDepartmentRequest_Id:
		if v == nil {
			err := GetDepartmentRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() < 1 {
			err := GetDepartmentRequestValidationError{
				field:  "Id",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDepartmentRequest_Keyword:
		if v == nil {
			err := GetDepartmentRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := GetDepartmentRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDepartmentRequestMultiError(errors)
	}

	return nil
}

// GetDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentRequestMultiError) AllErrors() []error { return m }

// GetDepartmentRequestValidationError is the validation error returned by
// GetDepartmentRequest.Validate if the designated constraints aren't met.
type GetDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentRequestValidationError) ErrorName() string {
	return "GetDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentRequestValidationError{}

// Validate checks the field values on GetDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentReplyMultiError, or nil if none found.
func (m *GetDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetDepartmentReplyMultiError(errors)
	}

	return nil
}

// GetDepartmentReplyMultiError is an error wrapping multiple validation errors
// returned by GetDepartmentReply.ValidateAll() if the designated constraints
// aren't met.
type GetDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentReplyMultiError) AllErrors() []error { return m }

// GetDepartmentReplyValidationError is the validation error returned by
// GetDepartmentReply.Validate if the designated constraints aren't met.
type GetDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentReplyValidationError) ErrorName() string {
	return "GetDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentReplyValidationError{}

// Validate checks the field values on ListDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepartmentRequestMultiError, or nil if none found.
func (m *ListDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return ListDepartmentRequestMultiError(errors)
	}

	return nil
}

// ListDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by ListDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentRequestMultiError) AllErrors() []error { return m }

// ListDepartmentRequestValidationError is the validation error returned by
// ListDepartmentRequest.Validate if the designated constraints aren't met.
type ListDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentRequestValidationError) ErrorName() string {
	return "ListDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentRequestValidationError{}

// Validate checks the field values on ListDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepartmentReplyMultiError, or nil if none found.
func (m *ListDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepartmentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepartmentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepartmentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDepartmentReplyMultiError(errors)
	}

	return nil
}

// ListDepartmentReplyMultiError is an error wrapping multiple validation
// errors returned by ListDepartmentReply.ValidateAll() if the designated
// constraints aren't met.
type ListDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentReplyMultiError) AllErrors() []error { return m }

// ListDepartmentReplyValidationError is the validation error returned by
// ListDepartmentReply.Validate if the designated constraints aren't met.
type ListDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentReplyValidationError) ErrorName() string {
	return "ListDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentReplyValidationError{}

// Validate checks the field values on CreateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDepartmentRequestMultiError, or nil if none found.
func (m *CreateDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() < 1 {
		err := CreateDepartmentRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDepartmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateDepartmentRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDepartmentRequestMultiError(errors)
	}

	return nil
}

// CreateDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentRequestMultiError) AllErrors() []error { return m }

// CreateDepartmentRequestValidationError is the validation error returned by
// CreateDepartmentRequest.Validate if the designated constraints aren't met.
type CreateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentRequestValidationError) ErrorName() string {
	return "CreateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentRequestValidationError{}

// Validate checks the field values on CreateDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDepartmentReplyMultiError, or nil if none found.
func (m *CreateDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDepartmentReplyMultiError(errors)
	}

	return nil
}

// CreateDepartmentReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDepartmentReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDepartmentReplyMultiError) AllErrors() []error { return m }

// CreateDepartmentReplyValidationError is the validation error returned by
// CreateDepartmentReply.Validate if the designated constraints aren't met.
type CreateDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentReplyValidationError) ErrorName() string {
	return "CreateDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentReplyValidationError{}

// Validate checks the field values on UpdateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDepartmentRequestMultiError, or nil if none found.
func (m *UpdateDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateDepartmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 1 {
		err := UpdateDepartmentRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDepartmentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateDepartmentRequestMultiError(errors)
	}

	return nil
}

// UpdateDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentRequestMultiError) AllErrors() []error { return m }

// UpdateDepartmentRequestValidationError is the validation error returned by
// UpdateDepartmentRequest.Validate if the designated constraints aren't met.
type UpdateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentRequestValidationError) ErrorName() string {
	return "UpdateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentRequestValidationError{}

// Validate checks the field values on UpdateDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDepartmentReplyMultiError, or nil if none found.
func (m *UpdateDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDepartmentReplyMultiError(errors)
	}

	return nil
}

// UpdateDepartmentReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDepartmentReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDepartmentReplyMultiError) AllErrors() []error { return m }

// UpdateDepartmentReplyValidationError is the validation error returned by
// UpdateDepartmentReply.Validate if the designated constraints aren't met.
type UpdateDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDepartmentReplyValidationError) ErrorName() string {
	return "UpdateDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDepartmentReplyValidationError{}

// Validate checks the field values on DeleteDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDepartmentRequestMultiError, or nil if none found.
func (m *DeleteDepartmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteDepartmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDepartmentRequestMultiError(errors)
	}

	return nil
}

// DeleteDepartmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDepartmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDepartmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentRequestMultiError) AllErrors() []error { return m }

// DeleteDepartmentRequestValidationError is the validation error returned by
// DeleteDepartmentRequest.Validate if the designated constraints aren't met.
type DeleteDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentRequestValidationError) ErrorName() string {
	return "DeleteDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentRequestValidationError{}

// Validate checks the field values on DeleteDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDepartmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDepartmentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDepartmentReplyMultiError, or nil if none found.
func (m *DeleteDepartmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDepartmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDepartmentReplyMultiError(errors)
	}

	return nil
}

// DeleteDepartmentReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDepartmentReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDepartmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDepartmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDepartmentReplyMultiError) AllErrors() []error { return m }

// DeleteDepartmentReplyValidationError is the validation error returned by
// DeleteDepartmentReply.Validate if the designated constraints aren't met.
type DeleteDepartmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentReplyValidationError) ErrorName() string {
	return "DeleteDepartmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentReplyValidationError{}

// Validate checks the field values on ListDepartmentReply_Department with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentReply_Department) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentReply_Department with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepartmentReply_DepartmentMultiError, or nil if none found.
func (m *ListDepartmentReply_Department) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentReply_Department) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Keyword

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepartmentReply_DepartmentValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepartmentReply_DepartmentValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepartmentReply_DepartmentValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListDepartmentReply_DepartmentMultiError(errors)
	}

	return nil
}

// ListDepartmentReply_DepartmentMultiError is an error wrapping multiple
// validation errors returned by ListDepartmentReply_Department.ValidateAll()
// if the designated constraints aren't met.
type ListDepartmentReply_DepartmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentReply_DepartmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentReply_DepartmentMultiError) AllErrors() []error { return m }

// ListDepartmentReply_DepartmentValidationError is the validation error
// returned by ListDepartmentReply_Department.Validate if the designated
// constraints aren't met.
type ListDepartmentReply_DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentReply_DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentReply_DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentReply_DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentReply_DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentReply_DepartmentValidationError) ErrorName() string {
	return "ListDepartmentReply_DepartmentValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentReply_DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentReply_Department.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentReply_DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentReply_DepartmentValidationError{}
