// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/manager/user/manager_user_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCreateUser = "/manager.api.manager.user.v1.User/CreateUser"
const OperationUserDeleteUser = "/manager.api.manager.user.v1.User/DeleteUser"
const OperationUserGetCurrentUser = "/manager.api.manager.user.v1.User/GetCurrentUser"
const OperationUserGetUser = "/manager.api.manager.user.v1.User/GetUser"
const OperationUserGetUserLoginCaptcha = "/manager.api.manager.user.v1.User/GetUserLoginCaptcha"
const OperationUserListLoginLog = "/manager.api.manager.user.v1.User/ListLoginLog"
const OperationUserListUser = "/manager.api.manager.user.v1.User/ListUser"
const OperationUserResetUserPassword = "/manager.api.manager.user.v1.User/ResetUserPassword"
const OperationUserSendCurrentUserCaptcha = "/manager.api.manager.user.v1.User/SendCurrentUserCaptcha"
const OperationUserUpdateCurrentUser = "/manager.api.manager.user.v1.User/UpdateCurrentUser"
const OperationUserUpdateCurrentUserPassword = "/manager.api.manager.user.v1.User/UpdateCurrentUserPassword"
const OperationUserUpdateCurrentUserRole = "/manager.api.manager.user.v1.User/UpdateCurrentUserRole"
const OperationUserUpdateCurrentUserSetting = "/manager.api.manager.user.v1.User/UpdateCurrentUserSetting"
const OperationUserUpdateUser = "/manager.api.manager.user.v1.User/UpdateUser"
const OperationUserUpdateUserStatus = "/manager.api.manager.user.v1.User/UpdateUserStatus"
const OperationUserUserLogin = "/manager.api.manager.user.v1.User/UserLogin"
const OperationUserUserLogout = "/manager.api.manager.user.v1.User/UserLogout"
const OperationUserUserRefreshToken = "/manager.api.manager.user.v1.User/UserRefreshToken"

type UserHTTPServer interface {
	// CreateUser CreateUser 创建用户信息
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	// DeleteUser DeleteUser 删除用户信息
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)
	// GetCurrentUser GetCurrentUser 获取当前用户信息
	GetCurrentUser(context.Context, *emptypb.Empty) (*GetUserReply, error)
	// GetUser GetUser 获取指定的用户信息
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	// GetUserLoginCaptcha GetUserLoginCaptcha 获取用户登陆验证吗
	GetUserLoginCaptcha(context.Context, *emptypb.Empty) (*GetUserLoginCaptchaReply, error)
	// ListLoginLog ListLoginLog 获取用户登陆信息列表
	ListLoginLog(context.Context, *ListLoginLogRequest) (*ListLoginLogReply, error)
	// ListUser ListUser 获取用户信息列表
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	// ResetUserPassword ResetUserPassword 重置用户密码
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordReply, error)
	// SendCurrentUserCaptcha SendCurrentUserCaptcha 发送用户验证吗
	SendCurrentUserCaptcha(context.Context, *SendCurrentUserCaptchaRequest) (*SendCurrentUserCaptchaReply, error)
	// UpdateCurrentUser UpdateCurrentUser 更新当前用户信息
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserReply, error)
	// UpdateCurrentUserPassword UpdateCurrentUserPassword 用户修改密码
	UpdateCurrentUserPassword(context.Context, *UpdateCurrentUserPasswordRequest) (*UpdateCurrentUserPasswordReply, error)
	// UpdateCurrentUserRole UpdateCurrentUserRole 切换用户当前角色
	UpdateCurrentUserRole(context.Context, *UpdateCurrentUserRoleRequest) (*UpdateCurrentUserRoleReply, error)
	// UpdateCurrentUserSetting UpdateCurrentUserSetting 用户设置保存
	UpdateCurrentUserSetting(context.Context, *UpdateCurrentUserSettingRequest) (*UpdateCurrentUserSettingReply, error)
	// UpdateUser UpdateUser 更新用户信息
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	// UpdateUserStatus UpdateUserStatus 更新用户信息状态
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusReply, error)
	// UserLogin UserLogin 用户登陆
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginReply, error)
	// UserLogout UserLogout 用户退出
	UserLogout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// UserRefreshToken UserRefreshToken 用户刷新token
	UserRefreshToken(context.Context, *emptypb.Empty) (*UserRefreshTokenReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/user", _User_GetUser0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/users", _User_ListUser0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user", _User_CreateUser0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user", _User_UpdateUser0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user/status", _User_UpdateUserStatus0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/user", _User_DeleteUser0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/user/current", _User_GetCurrentUser0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user/password/reset", _User_ResetUserPassword0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user/current/info", _User_UpdateCurrentUser0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user/current/role", _User_UpdateCurrentUserRole0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user/current/password", _User_UpdateCurrentUserPassword0_HTTP_Handler(srv))
	r.PUT("/manager/api/v1/user/current/setting", _User_UpdateCurrentUserSetting0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user/current/captcha", _User_SendCurrentUserCaptcha0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/user/login/captcha", _User_GetUserLoginCaptcha0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user/login", _User_UserLogin0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user/logout", _User_UserLogout0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/user/token/refresh", _User_UserRefreshToken0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/user/login/logs", _User_ListLoginLog0_HTTP_Handler(srv))
}

func _User_GetUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_CreateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUserStatus0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUserStatus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserStatusReply)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetCurrentUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetCurrentUser(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_ResetUserPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetUserPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserResetUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetUserPasswordReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateCurrentUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCurrentUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCurrentUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateCurrentUserRole0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCurrentUserRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateCurrentUserRole)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateCurrentUserRole(ctx, req.(*UpdateCurrentUserRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCurrentUserRoleReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateCurrentUserPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCurrentUserPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateCurrentUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateCurrentUserPassword(ctx, req.(*UpdateCurrentUserPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCurrentUserPasswordReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateCurrentUserSetting0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCurrentUserSettingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateCurrentUserSetting)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateCurrentUserSetting(ctx, req.(*UpdateCurrentUserSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCurrentUserSettingReply)
		return ctx.Result(200, reply)
	}
}

func _User_SendCurrentUserCaptcha0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendCurrentUserCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSendCurrentUserCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.SendCurrentUserCaptcha(ctx, req.(*SendCurrentUserCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendCurrentUserCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserLoginCaptcha0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserLoginCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetUserLoginCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserLoginCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _User_UserLogin0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UserLogin(ctx, req.(*UserLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginReply)
		return ctx.Result(200, reply)
	}
}

func _User_UserLogout0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserLogout)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UserLogout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_UserRefreshToken0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UserRefreshToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRefreshTokenReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListLoginLog0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLoginLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListLoginLog)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListLoginLog(ctx, req.(*ListLoginLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLoginLogReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	GetCurrentUser(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	GetUserLoginCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserLoginCaptchaReply, err error)
	ListLoginLog(ctx context.Context, req *ListLoginLogRequest, opts ...http.CallOption) (rsp *ListLoginLogReply, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserReply, err error)
	ResetUserPassword(ctx context.Context, req *ResetUserPasswordRequest, opts ...http.CallOption) (rsp *ResetUserPasswordReply, err error)
	SendCurrentUserCaptcha(ctx context.Context, req *SendCurrentUserCaptchaRequest, opts ...http.CallOption) (rsp *SendCurrentUserCaptchaReply, err error)
	UpdateCurrentUser(ctx context.Context, req *UpdateCurrentUserRequest, opts ...http.CallOption) (rsp *UpdateCurrentUserReply, err error)
	UpdateCurrentUserPassword(ctx context.Context, req *UpdateCurrentUserPasswordRequest, opts ...http.CallOption) (rsp *UpdateCurrentUserPasswordReply, err error)
	UpdateCurrentUserRole(ctx context.Context, req *UpdateCurrentUserRoleRequest, opts ...http.CallOption) (rsp *UpdateCurrentUserRoleReply, err error)
	UpdateCurrentUserSetting(ctx context.Context, req *UpdateCurrentUserSettingRequest, opts ...http.CallOption) (rsp *UpdateCurrentUserSettingReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusRequest, opts ...http.CallOption) (rsp *UpdateUserStatusReply, err error)
	UserLogin(ctx context.Context, req *UserLoginRequest, opts ...http.CallOption) (rsp *UserLoginReply, err error)
	UserLogout(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UserRefreshToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *UserRefreshTokenReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/manager/api/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/manager/api/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/manager/api/v1/user/current"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/manager/api/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserLoginCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserLoginCaptchaReply, error) {
	var out GetUserLoginCaptchaReply
	pattern := "/manager/api/v1/user/login/captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserLoginCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListLoginLog(ctx context.Context, in *ListLoginLogRequest, opts ...http.CallOption) (*ListLoginLogReply, error) {
	var out ListLoginLogReply
	pattern := "/manager/api/v1/user/login/logs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListLoginLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/manager/api/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...http.CallOption) (*ResetUserPasswordReply, error) {
	var out ResetUserPasswordReply
	pattern := "/manager/api/v1/user/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserResetUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SendCurrentUserCaptcha(ctx context.Context, in *SendCurrentUserCaptchaRequest, opts ...http.CallOption) (*SendCurrentUserCaptchaReply, error) {
	var out SendCurrentUserCaptchaReply
	pattern := "/manager/api/v1/user/current/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSendCurrentUserCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...http.CallOption) (*UpdateCurrentUserReply, error) {
	var out UpdateCurrentUserReply
	pattern := "/manager/api/v1/user/current/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateCurrentUserPassword(ctx context.Context, in *UpdateCurrentUserPasswordRequest, opts ...http.CallOption) (*UpdateCurrentUserPasswordReply, error) {
	var out UpdateCurrentUserPasswordReply
	pattern := "/manager/api/v1/user/current/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateCurrentUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateCurrentUserRole(ctx context.Context, in *UpdateCurrentUserRoleRequest, opts ...http.CallOption) (*UpdateCurrentUserRoleReply, error) {
	var out UpdateCurrentUserRoleReply
	pattern := "/manager/api/v1/user/current/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateCurrentUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateCurrentUserSetting(ctx context.Context, in *UpdateCurrentUserSettingRequest, opts ...http.CallOption) (*UpdateCurrentUserSettingReply, error) {
	var out UpdateCurrentUserSettingReply
	pattern := "/manager/api/v1/user/current/setting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateCurrentUserSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/manager/api/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...http.CallOption) (*UpdateUserStatusReply, error) {
	var out UpdateUserStatusReply
	pattern := "/manager/api/v1/user/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUserStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...http.CallOption) (*UserLoginReply, error) {
	var out UserLoginReply
	pattern := "/manager/api/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserLogout(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/manager/api/v1/user/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UserRefreshToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*UserRefreshTokenReply, error) {
	var out UserRefreshTokenReply
	pattern := "/manager/api/v1/user/token/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
