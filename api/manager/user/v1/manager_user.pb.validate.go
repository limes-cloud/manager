// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/user/manager_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() < 1 {
			err := GetUserRequestValidationError{
				field:  "Id",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {

		if utf8.RuneCountInString(m.GetPhone()) < 1 {
			err := GetUserRequestValidationError{
				field:  "Phone",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Email != nil {

		if utf8.RuneCountInString(m.GetEmail()) < 1 {
			err := GetUserRequestValidationError{
				field:  "Email",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DepartmentId

	// no validation rules for RoleId

	// no validation rules for Name

	// no validation rules for Nickname

	// no validation rules for Gender

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for LoggedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReplyValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Setting != nil {
		// no validation rules for Setting
	}

	if m.Department != nil {

		if all {
			switch v := interface{}(m.GetDepartment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  "Department",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  "Department",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReplyValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Role != nil {

		if all {
			switch v := interface{}(m.GetRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReplyValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReplyValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListUserRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListUserRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DepartmentId != nil {
		// no validation rules for DepartmentId
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDepartmentId() < 1 {
		err := CreateUserRequestValidationError{
			field:  "DepartmentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGender()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Gender",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Phone",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetJobIds()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "JobIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateUserRequest_JobIds_Unique := make(map[uint32]struct{}, len(m.GetJobIds()))

	for idx, item := range m.GetJobIds() {
		_, _ = idx, item

		if _, exists := _CreateUserRequest_JobIds_Unique[item]; exists {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("JobIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateUserRequest_JobIds_Unique[item] = struct{}{}
		}

		// no validation rules for JobIds[idx]
	}

	if len(m.GetRoleIds()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateUserRequest_RoleIds_Unique := make(map[uint32]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _CreateUserRequest_RoleIds_Unique[item]; exists {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateUserRequest_RoleIds_Unique[item] = struct{}{}
		}

		// no validation rules for RoleIds[idx]
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDepartmentId() < 1 {
		err := UpdateUserRequestValidationError{
			field:  "DepartmentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGender()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Gender",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Phone",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetJobIds()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "JobIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateUserRequest_JobIds_Unique := make(map[uint32]struct{}, len(m.GetJobIds()))

	for idx, item := range m.GetJobIds() {
		_, _ = idx, item

		if _, exists := _UpdateUserRequest_JobIds_Unique[item]; exists {
			err := UpdateUserRequestValidationError{
				field:  fmt.Sprintf("JobIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateUserRequest_JobIds_Unique[item] = struct{}{}
		}

		// no validation rules for JobIds[idx]
	}

	if len(m.GetRoleIds()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateUserRequest_RoleIds_Unique := make(map[uint32]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _UpdateUserRequest_RoleIds_Unique[item]; exists {
			err := UpdateUserRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateUserRequest_RoleIds_Unique[item] = struct{}{}
		}

		// no validation rules for RoleIds[idx]
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on UpdateUserStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserStatusRequestMultiError, or nil if none found.
func (m *UpdateUserStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateUserStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateUserStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateUserStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserStatusRequestMultiError) AllErrors() []error { return m }

// UpdateUserStatusRequestValidationError is the validation error returned by
// UpdateUserStatusRequest.Validate if the designated constraints aren't met.
type UpdateUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatusRequestValidationError) ErrorName() string {
	return "UpdateUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatusRequestValidationError{}

// Validate checks the field values on UpdateUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserStatusReplyMultiError, or nil if none found.
func (m *UpdateUserStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateUserStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateUserStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserStatusReplyMultiError) AllErrors() []error { return m }

// UpdateUserStatusReplyValidationError is the validation error returned by
// UpdateUserStatusReply.Validate if the designated constraints aren't met.
type UpdateUserStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatusReplyValidationError) ErrorName() string {
	return "UpdateUserStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatusReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on UpdateCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	// no validation rules for Gender

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return UpdateCurrentUserRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRequestValidationError is the validation error returned by
// UpdateCurrentUserRequest.Validate if the designated constraints aren't met.
type UpdateCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserReplyMultiError, or nil if none found.
func (m *UpdateCurrentUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserReplyMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserReplyMultiError) AllErrors() []error { return m }

// UpdateCurrentUserReplyValidationError is the validation error returned by
// UpdateCurrentUserReply.Validate if the designated constraints aren't met.
type UpdateCurrentUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserReplyValidationError) ErrorName() string {
	return "UpdateCurrentUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserReplyValidationError{}

// Validate checks the field values on ResetUserPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetUserPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetUserPasswordRequestMultiError, or nil if none found.
func (m *ResetUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResetUserPasswordRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetUserPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetUserPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetUserPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetUserPasswordRequestMultiError) AllErrors() []error { return m }

// ResetUserPasswordRequestValidationError is the validation error returned by
// ResetUserPasswordRequest.Validate if the designated constraints aren't met.
type ResetUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetUserPasswordRequestValidationError) ErrorName() string {
	return "ResetUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetUserPasswordRequestValidationError{}

// Validate checks the field values on ResetUserPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetUserPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetUserPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetUserPasswordReplyMultiError, or nil if none found.
func (m *ResetUserPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetUserPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetUserPasswordReplyMultiError(errors)
	}

	return nil
}

// ResetUserPasswordReplyMultiError is an error wrapping multiple validation
// errors returned by ResetUserPasswordReply.ValidateAll() if the designated
// constraints aren't met.
type ResetUserPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetUserPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetUserPasswordReplyMultiError) AllErrors() []error { return m }

// ResetUserPasswordReplyValidationError is the validation error returned by
// ResetUserPasswordReply.Validate if the designated constraints aren't met.
type ResetUserPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetUserPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetUserPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetUserPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetUserPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetUserPasswordReplyValidationError) ErrorName() string {
	return "ResetUserPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetUserPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetUserPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetUserPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetUserPasswordReplyValidationError{}

// Validate checks the field values on UpdateCurrentUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRoleRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := UpdateCurrentUserRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCurrentUserRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentUserRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCurrentUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRoleRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRoleRequestValidationError is the validation error returned
// by UpdateCurrentUserRoleRequest.Validate if the designated constraints
// aren't met.
type UpdateCurrentUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRoleRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRoleRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserRoleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRoleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRoleReplyMultiError, or nil if none found.
func (m *UpdateCurrentUserRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UpdateCurrentUserRoleReplyMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRoleReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentUserRoleReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateCurrentUserRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRoleReplyMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRoleReplyValidationError is the validation error returned
// by UpdateCurrentUserRoleReply.Validate if the designated constraints aren't met.
type UpdateCurrentUserRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRoleReplyValidationError) ErrorName() string {
	return "UpdateCurrentUserRoleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRoleReplyValidationError{}

// Validate checks the field values on UpdateCurrentUserPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCurrentUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserPasswordRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := UpdateCurrentUserPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OldPassword != nil {

		if utf8.RuneCountInString(m.GetOldPassword()) < 6 {
			err := UpdateCurrentUserPasswordRequestValidationError{
				field:  "OldPassword",
				reason: "value length must be at least 6 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CaptchaId != nil {

		if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
			err := UpdateCurrentUserPasswordRequestValidationError{
				field:  "CaptchaId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Captcha != nil {

		if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
			err := UpdateCurrentUserPasswordRequestValidationError{
				field:  "Captcha",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateCurrentUserPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCurrentUserPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserPasswordRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserPasswordRequestValidationError is the validation error
// returned by UpdateCurrentUserPasswordRequest.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserPasswordRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserPasswordRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserPasswordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserPasswordReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserPasswordReplyMultiError, or nil if none found.
func (m *UpdateCurrentUserPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserPasswordReplyMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserPasswordReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentUserPasswordReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateCurrentUserPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserPasswordReplyMultiError) AllErrors() []error { return m }

// UpdateCurrentUserPasswordReplyValidationError is the validation error
// returned by UpdateCurrentUserPasswordReply.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserPasswordReplyValidationError) ErrorName() string {
	return "UpdateCurrentUserPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserPasswordReplyValidationError{}

// Validate checks the field values on UpdateCurrentUserSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserSettingRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSetting()) < 6 {
		err := UpdateCurrentUserSettingRequestValidationError{
			field:  "Setting",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCurrentUserSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserSettingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentUserSettingRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateCurrentUserSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserSettingRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserSettingRequestValidationError is the validation error
// returned by UpdateCurrentUserSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserSettingRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserSettingRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserSettingReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserSettingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserSettingReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserSettingReplyMultiError, or nil if none found.
func (m *UpdateCurrentUserSettingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserSettingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserSettingReplyMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserSettingReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateCurrentUserSettingReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateCurrentUserSettingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserSettingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserSettingReplyMultiError) AllErrors() []error { return m }

// UpdateCurrentUserSettingReplyValidationError is the validation error
// returned by UpdateCurrentUserSettingReply.Validate if the designated
// constraints aren't met.
type UpdateCurrentUserSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserSettingReplyValidationError) ErrorName() string {
	return "UpdateCurrentUserSettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserSettingReplyValidationError{}

// Validate checks the field values on UserLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginRequestMultiError, or nil if none found.
func (m *UserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := UserLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := UserLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := UserLoginRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := UserLoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserLoginRequestMultiError(errors)
	}

	return nil
}

// UserLoginRequestMultiError is an error wrapping multiple validation errors
// returned by UserLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type UserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRequestMultiError) AllErrors() []error { return m }

// UserLoginRequestValidationError is the validation error returned by
// UserLoginRequest.Validate if the designated constraints aren't met.
type UserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRequestValidationError) ErrorName() string { return "UserLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRequestValidationError{}

// Validate checks the field values on UserLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginReplyMultiError,
// or nil if none found.
func (m *UserLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLoginReplyMultiError(errors)
	}

	return nil
}

// UserLoginReplyMultiError is an error wrapping multiple validation errors
// returned by UserLoginReply.ValidateAll() if the designated constraints
// aren't met.
type UserLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginReplyMultiError) AllErrors() []error { return m }

// UserLoginReplyValidationError is the validation error returned by
// UserLoginReply.Validate if the designated constraints aren't met.
type UserLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReplyValidationError) ErrorName() string { return "UserLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReplyValidationError{}

// Validate checks the field values on UserRefreshTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRefreshTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRefreshTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRefreshTokenReplyMultiError, or nil if none found.
func (m *UserRefreshTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRefreshTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserRefreshTokenReplyMultiError(errors)
	}

	return nil
}

// UserRefreshTokenReplyMultiError is an error wrapping multiple validation
// errors returned by UserRefreshTokenReply.ValidateAll() if the designated
// constraints aren't met.
type UserRefreshTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRefreshTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRefreshTokenReplyMultiError) AllErrors() []error { return m }

// UserRefreshTokenReplyValidationError is the validation error returned by
// UserRefreshTokenReply.Validate if the designated constraints aren't met.
type UserRefreshTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRefreshTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRefreshTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRefreshTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRefreshTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRefreshTokenReplyValidationError) ErrorName() string {
	return "UserRefreshTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserRefreshTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRefreshTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRefreshTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRefreshTokenReplyValidationError{}

// Validate checks the field values on SendCurrentUserCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCurrentUserCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCurrentUserCaptchaRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendCurrentUserCaptchaRequestMultiError, or nil if none found.
func (m *SendCurrentUserCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCurrentUserCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := SendCurrentUserCaptchaRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendCurrentUserCaptchaRequestMultiError(errors)
	}

	return nil
}

// SendCurrentUserCaptchaRequestMultiError is an error wrapping multiple
// validation errors returned by SendCurrentUserCaptchaRequest.ValidateAll()
// if the designated constraints aren't met.
type SendCurrentUserCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCurrentUserCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCurrentUserCaptchaRequestMultiError) AllErrors() []error { return m }

// SendCurrentUserCaptchaRequestValidationError is the validation error
// returned by SendCurrentUserCaptchaRequest.Validate if the designated
// constraints aren't met.
type SendCurrentUserCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCurrentUserCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCurrentUserCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCurrentUserCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCurrentUserCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCurrentUserCaptchaRequestValidationError) ErrorName() string {
	return "SendCurrentUserCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendCurrentUserCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCurrentUserCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCurrentUserCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCurrentUserCaptchaRequestValidationError{}

// Validate checks the field values on SendCurrentUserCaptchaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCurrentUserCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCurrentUserCaptchaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCurrentUserCaptchaReplyMultiError, or nil if none found.
func (m *SendCurrentUserCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCurrentUserCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Captcha

	// no validation rules for Expire

	if len(errors) > 0 {
		return SendCurrentUserCaptchaReplyMultiError(errors)
	}

	return nil
}

// SendCurrentUserCaptchaReplyMultiError is an error wrapping multiple
// validation errors returned by SendCurrentUserCaptchaReply.ValidateAll() if
// the designated constraints aren't met.
type SendCurrentUserCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCurrentUserCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCurrentUserCaptchaReplyMultiError) AllErrors() []error { return m }

// SendCurrentUserCaptchaReplyValidationError is the validation error returned
// by SendCurrentUserCaptchaReply.Validate if the designated constraints
// aren't met.
type SendCurrentUserCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCurrentUserCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCurrentUserCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCurrentUserCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCurrentUserCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCurrentUserCaptchaReplyValidationError) ErrorName() string {
	return "SendCurrentUserCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendCurrentUserCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCurrentUserCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCurrentUserCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCurrentUserCaptchaReplyValidationError{}

// Validate checks the field values on GetUserLoginCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserLoginCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLoginCaptchaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserLoginCaptchaReplyMultiError, or nil if none found.
func (m *GetUserLoginCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLoginCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Captcha

	// no validation rules for Expire

	if len(errors) > 0 {
		return GetUserLoginCaptchaReplyMultiError(errors)
	}

	return nil
}

// GetUserLoginCaptchaReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserLoginCaptchaReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserLoginCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLoginCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLoginCaptchaReplyMultiError) AllErrors() []error { return m }

// GetUserLoginCaptchaReplyValidationError is the validation error returned by
// GetUserLoginCaptchaReply.Validate if the designated constraints aren't met.
type GetUserLoginCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLoginCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLoginCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLoginCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLoginCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLoginCaptchaReplyValidationError) ErrorName() string {
	return "GetUserLoginCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLoginCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLoginCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLoginCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLoginCaptchaReplyValidationError{}

// Validate checks the field values on ListLoginLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLoginLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLoginLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLoginLogRequestMultiError, or nil if none found.
func (m *ListLoginLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLoginLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListLoginLogRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListLoginLogRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return ListLoginLogRequestMultiError(errors)
	}

	return nil
}

// ListLoginLogRequestMultiError is an error wrapping multiple validation
// errors returned by ListLoginLogRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLoginLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLoginLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLoginLogRequestMultiError) AllErrors() []error { return m }

// ListLoginLogRequestValidationError is the validation error returned by
// ListLoginLogRequest.Validate if the designated constraints aren't met.
type ListLoginLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginLogRequestValidationError) ErrorName() string {
	return "ListLoginLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginLogRequestValidationError{}

// Validate checks the field values on ListLoginLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLoginLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLoginLogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLoginLogReplyMultiError, or nil if none found.
func (m *ListLoginLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLoginLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLoginLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLoginLogReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoginLogReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLoginLogReplyMultiError(errors)
	}

	return nil
}

// ListLoginLogReplyMultiError is an error wrapping multiple validation errors
// returned by ListLoginLogReply.ValidateAll() if the designated constraints
// aren't met.
type ListLoginLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLoginLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLoginLogReplyMultiError) AllErrors() []error { return m }

// ListLoginLogReplyValidationError is the validation error returned by
// ListLoginLogReply.Validate if the designated constraints aren't met.
type ListLoginLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginLogReplyValidationError) ErrorName() string {
	return "ListLoginLogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginLogReplyValidationError{}

// Validate checks the field values on GetUserReply_Role with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReply_RoleMultiError, or nil if none found.
func (m *GetUserReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return GetUserReply_RoleMultiError(errors)
	}

	return nil
}

// GetUserReply_RoleMultiError is an error wrapping multiple validation errors
// returned by GetUserReply_Role.ValidateAll() if the designated constraints
// aren't met.
type GetUserReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReply_RoleMultiError) AllErrors() []error { return m }

// GetUserReply_RoleValidationError is the validation error returned by
// GetUserReply_Role.Validate if the designated constraints aren't met.
type GetUserReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_RoleValidationError) ErrorName() string {
	return "GetUserReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_RoleValidationError{}

// Validate checks the field values on GetUserReply_Job with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserReply_Job) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply_Job with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReply_JobMultiError, or nil if none found.
func (m *GetUserReply_Job) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply_Job) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return GetUserReply_JobMultiError(errors)
	}

	return nil
}

// GetUserReply_JobMultiError is an error wrapping multiple validation errors
// returned by GetUserReply_Job.ValidateAll() if the designated constraints
// aren't met.
type GetUserReply_JobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReply_JobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReply_JobMultiError) AllErrors() []error { return m }

// GetUserReply_JobValidationError is the validation error returned by
// GetUserReply_Job.Validate if the designated constraints aren't met.
type GetUserReply_JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_JobValidationError) ErrorName() string { return "GetUserReply_JobValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReply_JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_Job.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_JobValidationError{}

// Validate checks the field values on GetUserReply_Department with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserReply_Department) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply_Department with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReply_DepartmentMultiError, or nil if none found.
func (m *GetUserReply_Department) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply_Department) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return GetUserReply_DepartmentMultiError(errors)
	}

	return nil
}

// GetUserReply_DepartmentMultiError is an error wrapping multiple validation
// errors returned by GetUserReply_Department.ValidateAll() if the designated
// constraints aren't met.
type GetUserReply_DepartmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReply_DepartmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReply_DepartmentMultiError) AllErrors() []error { return m }

// GetUserReply_DepartmentValidationError is the validation error returned by
// GetUserReply_Department.Validate if the designated constraints aren't met.
type GetUserReply_DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_DepartmentValidationError) ErrorName() string {
	return "GetUserReply_DepartmentValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReply_DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_Department.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_DepartmentValidationError{}

// Validate checks the field values on ListUserReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_RoleMultiError, or nil if none found.
func (m *ListUserReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListUserReply_RoleMultiError(errors)
	}

	return nil
}

// ListUserReply_RoleMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_Role.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_RoleMultiError) AllErrors() []error { return m }

// ListUserReply_RoleValidationError is the validation error returned by
// ListUserReply_Role.Validate if the designated constraints aren't met.
type ListUserReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_RoleValidationError) ErrorName() string {
	return "ListUserReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_RoleValidationError{}

// Validate checks the field values on ListUserReply_Department with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_Department) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_Department with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_DepartmentMultiError, or nil if none found.
func (m *ListUserReply_Department) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_Department) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListUserReply_DepartmentMultiError(errors)
	}

	return nil
}

// ListUserReply_DepartmentMultiError is an error wrapping multiple validation
// errors returned by ListUserReply_Department.ValidateAll() if the designated
// constraints aren't met.
type ListUserReply_DepartmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_DepartmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_DepartmentMultiError) AllErrors() []error { return m }

// ListUserReply_DepartmentValidationError is the validation error returned by
// ListUserReply_Department.Validate if the designated constraints aren't met.
type ListUserReply_DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_DepartmentValidationError) ErrorName() string {
	return "ListUserReply_DepartmentValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_Department.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_DepartmentValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_UserMultiError, or nil if none found.
func (m *ListUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Nickname

	// no validation rules for Gender

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for LoggedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Department != nil {

		if all {
			switch v := interface{}(m.GetDepartment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReply_UserValidationError{
						field:  "Department",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReply_UserValidationError{
						field:  "Department",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReply_UserValidationError{
					field:  "Department",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Role != nil {

		if all {
			switch v := interface{}(m.GetRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReply_UserValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReply_UserValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReply_UserValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReply_UserMultiError(errors)
	}

	return nil
}

// ListUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_UserMultiError) AllErrors() []error { return m }

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}

// Validate checks the field values on ListLoginLogReply_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLoginLogReply_Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLoginLogReply_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLoginLogReply_LogMultiError, or nil if none found.
func (m *ListLoginLogReply_Log) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLoginLogReply_Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Type

	// no validation rules for Ip

	// no validation rules for Address

	// no validation rules for Browser

	// no validation rules for Device

	// no validation rules for Code

	// no validation rules for Description

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ListLoginLogReply_LogMultiError(errors)
	}

	return nil
}

// ListLoginLogReply_LogMultiError is an error wrapping multiple validation
// errors returned by ListLoginLogReply_Log.ValidateAll() if the designated
// constraints aren't met.
type ListLoginLogReply_LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLoginLogReply_LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLoginLogReply_LogMultiError) AllErrors() []error { return m }

// ListLoginLogReply_LogValidationError is the validation error returned by
// ListLoginLogReply_Log.Validate if the designated constraints aren't met.
type ListLoginLogReply_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginLogReply_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginLogReply_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginLogReply_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginLogReply_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginLogReply_LogValidationError) ErrorName() string {
	return "ListLoginLogReply_LogValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginLogReply_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginLogReply_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginLogReply_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginLogReply_LogValidationError{}
