// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamsError.String() && e.Code == 500
}

func ParamsError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误")
	case 1:
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误:"+msg)
	}
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SystemError.String() && e.Code == 500
}

func SystemError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误")
	case 1:
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误:"+msg)
	}
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 500
}

func DatabaseError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误")
	case 1:
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误:"+msg)
	}
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 500
}

func TransformError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败")
	case 1:
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败:"+msg)
	}
}

func IsGetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetError.String() && e.Code == 500
}

func GetError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败")
	case 1:
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败:"+msg)
	}
}

func IsListError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListError.String() && e.Code == 500
}

func ListError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败")
	case 1:
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败:"+msg)
	}
}

func IsCreateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CreateError.String() && e.Code == 500
}

func CreateError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败")
	case 1:
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败:"+msg)
	}
}

func IsImportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ImportError.String() && e.Code == 500
}

func ImportError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败")
	case 1:
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败:"+msg)
	}
}

func IsExportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExportError.String() && e.Code == 500
}

func ExportError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败")
	case 1:
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败:"+msg)
	}
}

func IsUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UpdateError.String() && e.Code == 500
}

func UpdateError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败")
	case 1:
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败:"+msg)
	}
}

func IsDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteError.String() && e.Code == 500
}

func DeleteError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败")
	case 1:
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败:"+msg)
	}
}

func IsGetTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetTrashError.String() && e.Code == 500
}

func GetTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败:"+msg)
	}
}

func IsListTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListTrashError.String() && e.Code == 500
}

func ListTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败")
	case 1:
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败:"+msg)
	}
}

func IsDeleteTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteTrashError.String() && e.Code == 500
}

func DeleteTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败:"+msg)
	}
}

func IsRevertTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RevertTrashError.String() && e.Code == 500
}

func RevertTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败:"+msg)
	}
}

func IsDepartmentPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DepartmentPurviewError.String() && e.Code == 500
}

func DepartmentPurviewError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DepartmentPurviewError.String(), "无此部门权限")
	case 1:
		return errors.New(500, ErrorReason_DepartmentPurviewError.String(), "无此部门权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DepartmentPurviewError.String(), "无此部门权限:"+msg)
	}
}

func IsRolePurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RolePurviewError.String() && e.Code == 500
}

func RolePurviewError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RolePurviewError.String(), "无此角色权限")
	case 1:
		return errors.New(500, ErrorReason_RolePurviewError.String(), "无此角色权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RolePurviewError.String(), "无此角色权限:"+msg)
	}
}

func IsUserPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserPurviewError.String() && e.Code == 500
}

func UserPurviewError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UserPurviewError.String(), "无此用户权限")
	case 1:
		return errors.New(500, ErrorReason_UserPurviewError.String(), "无此用户权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UserPurviewError.String(), "无此用户权限:"+msg)
	}
}

func IsMenuPurviewError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MenuPurviewError.String() && e.Code == 500
}

func MenuPurviewError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_MenuPurviewError.String(), "无此菜单权限")
	case 1:
		return errors.New(500, ErrorReason_MenuPurviewError.String(), "无此菜单权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_MenuPurviewError.String(), "无此菜单权限:"+msg)
	}
}

func IsEditSystemDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EditSystemDataError.String() && e.Code == 500
}

func EditSystemDataError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_EditSystemDataError.String(), "系统数据，不允许修改")
	case 1:
		return errors.New(500, ErrorReason_EditSystemDataError.String(), "系统数据，不允许修改:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_EditSystemDataError.String(), "系统数据，不允许修改:"+msg)
	}
}

func IsGenCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptchaError.String() && e.Code == 500
}

func GenCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "生成验证码失败")
	case 1:
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "生成验证码失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "生成验证码失败:"+msg)
	}
}

func IsSendCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SendCaptchaError.String() && e.Code == 500
}

func SendCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_SendCaptchaError.String(), "发送验证码失败")
	case 1:
		return errors.New(500, ErrorReason_SendCaptchaError.String(), "发送验证码失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_SendCaptchaError.String(), "发送验证码失败:"+msg)
	}
}

func IsDeleteSystemDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteSystemDataError.String() && e.Code == 500
}

func DeleteSystemDataError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DeleteSystemDataError.String(), "系统数据，不允许删除")
	case 1:
		return errors.New(500, ErrorReason_DeleteSystemDataError.String(), "系统数据，不允许删除:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DeleteSystemDataError.String(), "系统数据，不允许删除:"+msg)
	}
}

func IsVerifyCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifyCaptchaError.String() && e.Code == 500
}

func VerifyCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码错误")
	case 1:
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码错误:"+msg)
	}
}

func IsPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordError.String() && e.Code == 500
}

func PasswordError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_PasswordError.String(), "密码错误")
	case 1:
		return errors.New(500, ErrorReason_PasswordError.String(), "密码错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_PasswordError.String(), "密码错误:"+msg)
	}
}

func IsPasswordExpireError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpireError.String() && e.Code == 500
}

func PasswordExpireError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期")
	case 1:
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期:"+msg)
	}
}

func IsRefreshTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshTokenError.String() && e.Code == 401
}

func RefreshTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败")
	case 1:
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败:"+msg)
	}
}

func IsUsernameFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameFormatError.String() && e.Code == 500
}

func UsernameFormatError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UsernameFormatError.String(), "用户名格式错误")
	case 1:
		return errors.New(500, ErrorReason_UsernameFormatError.String(), "用户名格式错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UsernameFormatError.String(), "用户名格式错误:"+msg)
	}
}

func IsUsernameNotExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameNotExistError.String() && e.Code == 500
}

func UsernameNotExistError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UsernameNotExistError.String(), "用户不存在")
	case 1:
		return errors.New(500, ErrorReason_UsernameNotExistError.String(), "用户不存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UsernameNotExistError.String(), "用户不存在:"+msg)
	}
}

func IsUserDisableError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserDisableError.String() && e.Code == 500
}

func UserDisableError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用")
	case 1:
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用:"+msg)
	}
}

func IsRoleDisableError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RoleDisableError.String() && e.Code == 500
}

func RoleDisableError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RoleDisableError.String(), "角色已被禁用")
	case 1:
		return errors.New(500, ErrorReason_RoleDisableError.String(), "角色已被禁用:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RoleDisableError.String(), "角色已被禁用:"+msg)
	}
}

func IsGenTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenTokenError.String() && e.Code == 500
}

func GenTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败")
	case 1:
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败:"+msg)
	}
}

func IsParseTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseTokenError.String() && e.Code == 500
}

func ParseTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败")
	case 1:
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败:"+msg)
	}
}

func IsForbiddenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ForbiddenError.String() && e.Code == 403
}

func ForbiddenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无接口权限")
	case 1:
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无接口权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无接口权限:"+msg)
	}
}

func IsResourceServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceServerError.String() && e.Code == 500
}

func ResourceServerError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常")
	case 1:
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常:"+msg)
	}
}
