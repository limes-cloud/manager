// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/manager/channel/manager_channel.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListChannelTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelTypeRequestMultiError, or nil if none found.
func (m *ListChannelTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListChannelTypeRequestMultiError(errors)
	}

	return nil
}

// ListChannelTypeRequestMultiError is an error wrapping multiple validation
// errors returned by ListChannelTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChannelTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelTypeRequestMultiError) AllErrors() []error { return m }

// ListChannelTypeRequestValidationError is the validation error returned by
// ListChannelTypeRequest.Validate if the designated constraints aren't met.
type ListChannelTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelTypeRequestValidationError) ErrorName() string {
	return "ListChannelTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelTypeRequestValidationError{}

// Validate checks the field values on ListChannelTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelTypeReplyMultiError, or nil if none found.
func (m *ListChannelTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChannelTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChannelTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChannelTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChannelTypeReplyMultiError(errors)
	}

	return nil
}

// ListChannelTypeReplyMultiError is an error wrapping multiple validation
// errors returned by ListChannelTypeReply.ValidateAll() if the designated
// constraints aren't met.
type ListChannelTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelTypeReplyMultiError) AllErrors() []error { return m }

// ListChannelTypeReplyValidationError is the validation error returned by
// ListChannelTypeReply.Validate if the designated constraints aren't met.
type ListChannelTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelTypeReplyValidationError) ErrorName() string {
	return "ListChannelTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelTypeReplyValidationError{}

// Validate checks the field values on ListAdminChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminChannelRequestMultiError, or nil if none found.
func (m *ListAdminChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAdminChannelRequestMultiError(errors)
	}

	return nil
}

// ListAdminChannelRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdminChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdminChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminChannelRequestMultiError) AllErrors() []error { return m }

// ListAdminChannelRequestValidationError is the validation error returned by
// ListAdminChannelRequest.Validate if the designated constraints aren't met.
type ListAdminChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminChannelRequestValidationError) ErrorName() string {
	return "ListAdminChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminChannelRequestValidationError{}

// Validate checks the field values on ListAdminChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminChannelReplyMultiError, or nil if none found.
func (m *ListAdminChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminChannelReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdminChannelReplyMultiError(errors)
	}

	return nil
}

// ListAdminChannelReplyMultiError is an error wrapping multiple validation
// errors returned by ListAdminChannelReply.ValidateAll() if the designated
// constraints aren't met.
type ListAdminChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminChannelReplyMultiError) AllErrors() []error { return m }

// ListAdminChannelReplyValidationError is the validation error returned by
// ListAdminChannelReply.Validate if the designated constraints aren't met.
type ListAdminChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminChannelReplyValidationError) ErrorName() string {
	return "ListAdminChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminChannelReplyValidationError{}

// Validate checks the field values on ListChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelRequestMultiError, or nil if none found.
func (m *ListChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListChannelRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListChannelRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListChannelRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListChannelRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListChannelRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListChannelRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListChannelRequestMultiError(errors)
	}

	return nil
}

// ListChannelRequestMultiError is an error wrapping multiple validation errors
// returned by ListChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type ListChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelRequestMultiError) AllErrors() []error { return m }

// ListChannelRequestValidationError is the validation error returned by
// ListChannelRequest.Validate if the designated constraints aren't met.
type ListChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelRequestValidationError) ErrorName() string {
	return "ListChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelRequestValidationError{}

var _ListChannelRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListChannelRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListChannelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelReplyMultiError, or nil if none found.
func (m *ListChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChannelReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChannelReplyMultiError(errors)
	}

	return nil
}

// ListChannelReplyMultiError is an error wrapping multiple validation errors
// returned by ListChannelReply.ValidateAll() if the designated constraints
// aren't met.
type ListChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelReplyMultiError) AllErrors() []error { return m }

// ListChannelReplyValidationError is the validation error returned by
// ListChannelReply.Validate if the designated constraints aren't met.
type ListChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelReplyValidationError) ErrorName() string { return "ListChannelReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelReplyValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelRequestMultiError, or nil if none found.
func (m *CreateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAk()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Ak",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSk()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Sk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extra

	// no validation rules for Admin

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateChannelRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateChannelRequestMultiError(errors)
	}

	return nil
}

// CreateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelRequestMultiError) AllErrors() []error { return m }

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on CreateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelReplyMultiError, or nil if none found.
func (m *CreateChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateChannelReplyMultiError(errors)
	}

	return nil
}

// CreateChannelReplyMultiError is an error wrapping multiple validation errors
// returned by CreateChannelReply.ValidateAll() if the designated constraints
// aren't met.
type CreateChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelReplyMultiError) AllErrors() []error { return m }

// CreateChannelReplyValidationError is the validation error returned by
// CreateChannelReply.Validate if the designated constraints aren't met.
type CreateChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelReplyValidationError) ErrorName() string {
	return "CreateChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelReplyValidationError{}

// Validate checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelRequestMultiError, or nil if none found.
func (m *UpdateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Logo

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Ak

	// no validation rules for Sk

	// no validation rules for Extra

	// no validation rules for Description

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Admin != nil {
		// no validation rules for Admin
	}

	if len(errors) > 0 {
		return UpdateChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelRequestMultiError) AllErrors() []error { return m }

// UpdateChannelRequestValidationError is the validation error returned by
// UpdateChannelRequest.Validate if the designated constraints aren't met.
type UpdateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelRequestValidationError) ErrorName() string {
	return "UpdateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelRequestValidationError{}

// Validate checks the field values on UpdateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelReplyMultiError, or nil if none found.
func (m *UpdateChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateChannelReplyMultiError(errors)
	}

	return nil
}

// UpdateChannelReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateChannelReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelReplyMultiError) AllErrors() []error { return m }

// UpdateChannelReplyValidationError is the validation error returned by
// UpdateChannelReply.Validate if the designated constraints aren't met.
type UpdateChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelReplyValidationError) ErrorName() string {
	return "UpdateChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelReplyValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelRequestMultiError, or nil if none found.
func (m *DeleteChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelRequestMultiError) AllErrors() []error { return m }

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on DeleteChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelReplyMultiError, or nil if none found.
func (m *DeleteChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteChannelReplyMultiError(errors)
	}

	return nil
}

// DeleteChannelReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteChannelReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelReplyMultiError) AllErrors() []error { return m }

// DeleteChannelReplyValidationError is the validation error returned by
// DeleteChannelReply.Validate if the designated constraints aren't met.
type DeleteChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelReplyValidationError) ErrorName() string {
	return "DeleteChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelReplyValidationError{}

// Validate checks the field values on ListChannelTypeReply_Type with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelTypeReply_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelTypeReply_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelTypeReply_TypeMultiError, or nil if none found.
func (m *ListChannelTypeReply_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelTypeReply_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListChannelTypeReply_TypeMultiError(errors)
	}

	return nil
}

// ListChannelTypeReply_TypeMultiError is an error wrapping multiple validation
// errors returned by ListChannelTypeReply_Type.ValidateAll() if the
// designated constraints aren't met.
type ListChannelTypeReply_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelTypeReply_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelTypeReply_TypeMultiError) AllErrors() []error { return m }

// ListChannelTypeReply_TypeValidationError is the validation error returned by
// ListChannelTypeReply_Type.Validate if the designated constraints aren't met.
type ListChannelTypeReply_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelTypeReply_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelTypeReply_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelTypeReply_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelTypeReply_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelTypeReply_TypeValidationError) ErrorName() string {
	return "ListChannelTypeReply_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelTypeReply_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelTypeReply_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelTypeReply_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelTypeReply_TypeValidationError{}

// Validate checks the field values on ListAdminChannelReply_Channel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminChannelReply_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminChannelReply_Channel with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAdminChannelReply_ChannelMultiError, or nil if none found.
func (m *ListAdminChannelReply_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminChannelReply_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for LogoUrl

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListAdminChannelReply_ChannelMultiError(errors)
	}

	return nil
}

// ListAdminChannelReply_ChannelMultiError is an error wrapping multiple
// validation errors returned by ListAdminChannelReply_Channel.ValidateAll()
// if the designated constraints aren't met.
type ListAdminChannelReply_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminChannelReply_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminChannelReply_ChannelMultiError) AllErrors() []error { return m }

// ListAdminChannelReply_ChannelValidationError is the validation error
// returned by ListAdminChannelReply_Channel.Validate if the designated
// constraints aren't met.
type ListAdminChannelReply_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminChannelReply_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminChannelReply_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminChannelReply_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminChannelReply_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminChannelReply_ChannelValidationError) ErrorName() string {
	return "ListAdminChannelReply_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminChannelReply_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminChannelReply_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminChannelReply_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminChannelReply_ChannelValidationError{}

// Validate checks the field values on ListChannelReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelReply_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelReply_Channel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelReply_ChannelMultiError, or nil if none found.
func (m *ListChannelReply_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelReply_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for LogoUrl

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Ak

	// no validation rules for Sk

	// no validation rules for Extra

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Admin != nil {
		// no validation rules for Admin
	}

	if len(errors) > 0 {
		return ListChannelReply_ChannelMultiError(errors)
	}

	return nil
}

// ListChannelReply_ChannelMultiError is an error wrapping multiple validation
// errors returned by ListChannelReply_Channel.ValidateAll() if the designated
// constraints aren't met.
type ListChannelReply_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelReply_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelReply_ChannelMultiError) AllErrors() []error { return m }

// ListChannelReply_ChannelValidationError is the validation error returned by
// ListChannelReply_Channel.Validate if the designated constraints aren't met.
type ListChannelReply_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelReply_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelReply_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelReply_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelReply_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelReply_ChannelValidationError) ErrorName() string {
	return "ListChannelReply_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelReply_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelReply_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelReply_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelReply_ChannelValidationError{}
