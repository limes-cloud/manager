// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/scope/proto/scope_service.proto

package scope

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationScopeGetScope      = "/manager.api.scope.Scope/GetScope"
	OperationScopeGetUserDeptId = "/manager.api.scope.Scope/GetUserDeptId"
)

type ScopeHTTPServer interface {
	GetScope(context.Context, *GetScopeRequest) (*GetScopeReply, error)
	GetUserDeptId(context.Context, *GetUserDeptIdRequest) (*GetUserDeptIdReply, error)
}

func RegisterScopeHTTPServer(s *http.Server, srv ScopeHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/scope", _Scope_GetScope0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/scope/userdeptid", _Scope_GetUserDeptId0_HTTP_Handler(srv))
}

func _Scope_GetScope0_HTTP_Handler(srv ScopeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetScopeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScopeGetScope)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetScope(ctx, req.(*GetScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetScopeReply)
		return ctx.Result(200, reply)
	}
}

func _Scope_GetUserDeptId0_HTTP_Handler(srv ScopeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDeptIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScopeGetUserDeptId)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetUserDeptId(ctx, req.(*GetUserDeptIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDeptIdReply)
		return ctx.Result(200, reply)
	}
}

type ScopeHTTPClient interface {
	GetScope(ctx context.Context, req *GetScopeRequest, opts ...http.CallOption) (rsp *GetScopeReply, err error)
	GetUserDeptId(ctx context.Context, req *GetUserDeptIdRequest, opts ...http.CallOption) (rsp *GetUserDeptIdReply, err error)
}

type ScopeHTTPClientImpl struct {
	cc *http.Client
}

func NewScopeHTTPClient(client *http.Client) ScopeHTTPClient {
	return &ScopeHTTPClientImpl{client}
}

func (c *ScopeHTTPClientImpl) GetScope(ctx context.Context, in *GetScopeRequest, opts ...http.CallOption) (*GetScopeReply, error) {
	var out GetScopeReply
	pattern := "/manager/api/v1/scope"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScopeGetScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScopeHTTPClientImpl) GetUserDeptId(ctx context.Context, in *GetUserDeptIdRequest, opts ...http.CallOption) (*GetUserDeptIdReply, error) {
	var out GetUserDeptIdReply
	pattern := "/manager/api/v1/scope/userdeptid"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScopeGetUserDeptId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
