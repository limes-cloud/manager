// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/scope/proto/scope.proto

package scope

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetScopeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScopeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScopeRequestMultiError, or nil if none found.
func (m *GetScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Database

	// no validation rules for Model

	// no validation rules for Method

	if len(errors) > 0 {
		return GetScopeRequestMultiError(errors)
	}

	return nil
}

// GetScopeRequestMultiError is an error wrapping multiple validation errors
// returned by GetScopeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScopeRequestMultiError) AllErrors() []error { return m }

// GetScopeRequestValidationError is the validation error returned by
// GetScopeRequest.Validate if the designated constraints aren't met.
type GetScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeRequestValidationError) ErrorName() string { return "GetScopeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeRequestValidationError{}

// Validate checks the field values on GetScopeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetScopeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScopeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetScopeReplyMultiError, or
// nil if none found.
func (m *GetScopeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScopeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllDept

	// no validation rules for Rule

	// no validation rules for UserId

	// no validation rules for DeptId

	// no validation rules for TenantId

	if len(errors) > 0 {
		return GetScopeReplyMultiError(errors)
	}

	return nil
}

// GetScopeReplyMultiError is an error wrapping multiple validation errors
// returned by GetScopeReply.ValidateAll() if the designated constraints
// aren't met.
type GetScopeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScopeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScopeReplyMultiError) AllErrors() []error { return m }

// GetScopeReplyValidationError is the validation error returned by
// GetScopeReply.Validate if the designated constraints aren't met.
type GetScopeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeReplyValidationError) ErrorName() string { return "GetScopeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetScopeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeReplyValidationError{}

// Validate checks the field values on GetUserDeptIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDeptIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDeptIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDeptIdRequestMultiError, or nil if none found.
func (m *GetUserDeptIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDeptIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserDeptIdRequestMultiError(errors)
	}

	return nil
}

// GetUserDeptIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserDeptIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDeptIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDeptIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDeptIdRequestMultiError) AllErrors() []error { return m }

// GetUserDeptIdRequestValidationError is the validation error returned by
// GetUserDeptIdRequest.Validate if the designated constraints aren't met.
type GetUserDeptIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDeptIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDeptIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDeptIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDeptIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDeptIdRequestValidationError) ErrorName() string {
	return "GetUserDeptIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDeptIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDeptIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDeptIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDeptIdRequestValidationError{}

// Validate checks the field values on GetUserDeptIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDeptIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDeptIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDeptIdReplyMultiError, or nil if none found.
func (m *GetUserDeptIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDeptIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptId

	if len(errors) > 0 {
		return GetUserDeptIdReplyMultiError(errors)
	}

	return nil
}

// GetUserDeptIdReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserDeptIdReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserDeptIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDeptIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDeptIdReplyMultiError) AllErrors() []error { return m }

// GetUserDeptIdReplyValidationError is the validation error returned by
// GetUserDeptIdReply.Validate if the designated constraints aren't met.
type GetUserDeptIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDeptIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDeptIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDeptIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDeptIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDeptIdReplyValidationError) ErrorName() string {
	return "GetUserDeptIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDeptIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDeptIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDeptIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDeptIdReplyValidationError{}
