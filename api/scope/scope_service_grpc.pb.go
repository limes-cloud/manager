// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/scope/proto/scope_service.proto

package scope

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scope_GetScope_FullMethodName      = "/manager.api.scope.Scope/GetScope"
	Scope_GetUserDeptId_FullMethodName = "/manager.api.scope.Scope/GetUserDeptId"
)

// ScopeClient is the client API for Scope service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScopeClient interface {
	GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*GetScopeReply, error)
	GetUserDeptId(ctx context.Context, in *GetUserDeptIdRequest, opts ...grpc.CallOption) (*GetUserDeptIdReply, error)
}

type scopeClient struct {
	cc grpc.ClientConnInterface
}

func NewScopeClient(cc grpc.ClientConnInterface) ScopeClient {
	return &scopeClient{cc}
}

func (c *scopeClient) GetScope(ctx context.Context, in *GetScopeRequest, opts ...grpc.CallOption) (*GetScopeReply, error) {
	out := new(GetScopeReply)
	err := c.cc.Invoke(ctx, Scope_GetScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeClient) GetUserDeptId(ctx context.Context, in *GetUserDeptIdRequest, opts ...grpc.CallOption) (*GetUserDeptIdReply, error) {
	out := new(GetUserDeptIdReply)
	err := c.cc.Invoke(ctx, Scope_GetUserDeptId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopeServer is the server API for Scope service.
// All implementations must embed UnimplementedScopeServer
// for forward compatibility
type ScopeServer interface {
	GetScope(context.Context, *GetScopeRequest) (*GetScopeReply, error)
	GetUserDeptId(context.Context, *GetUserDeptIdRequest) (*GetUserDeptIdReply, error)
	mustEmbedUnimplementedScopeServer()
}

// UnimplementedScopeServer must be embedded to have forward compatible implementations.
type UnimplementedScopeServer struct{}

func (UnimplementedScopeServer) GetScope(context.Context, *GetScopeRequest) (*GetScopeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}

func (UnimplementedScopeServer) GetUserDeptId(context.Context, *GetUserDeptIdRequest) (*GetUserDeptIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeptId not implemented")
}
func (UnimplementedScopeServer) mustEmbedUnimplementedScopeServer() {}

// UnsafeScopeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopeServer will
// result in compilation errors.
type UnsafeScopeServer interface {
	mustEmbedUnimplementedScopeServer()
}

func RegisterScopeServer(s grpc.ServiceRegistrar, srv ScopeServer) {
	s.RegisterService(&Scope_ServiceDesc, srv)
}

func _Scope_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scope_GetScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServer).GetScope(ctx, req.(*GetScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scope_GetUserDeptId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeptIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServer).GetUserDeptId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scope_GetUserDeptId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServer).GetUserDeptId(ctx, req.(*GetUserDeptIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scope_ServiceDesc is the grpc.ServiceDesc for Scope service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scope_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.scope.Scope",
	HandlerType: (*ScopeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScope",
			Handler:    _Scope_GetScope_Handler,
		},
		{
			MethodName: "GetUserDeptId",
			Handler:    _Scope_GetUserDeptId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/scope/proto/scope_service.proto",
}
