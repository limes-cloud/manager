// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rolemenu/proto/rolemenu.proto

package rolemenu

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRoleMenuIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdsRequestMultiError, or nil if none found.
func (m *GetRoleMenuIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := GetRoleMenuIdsRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.AppId != nil {
		if m.GetAppId() < 1 {
			err := GetRoleMenuIdsRequestValidationError{
				field:  "AppId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetRoleMenuIdsRequestMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdsRequestMultiError) AllErrors() []error { return m }

// GetRoleMenuIdsRequestValidationError is the validation error returned by
// GetRoleMenuIdsRequest.Validate if the designated constraints aren't met.
type GetRoleMenuIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdsRequestValidationError) ErrorName() string {
	return "GetRoleMenuIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdsRequestValidationError{}

// Validate checks the field values on GetRoleMenuIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdsReplyMultiError, or nil if none found.
func (m *GetRoleMenuIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoleMenuIdsReplyMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdsReplyMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdsReply.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdsReplyMultiError) AllErrors() []error { return m }

// GetRoleMenuIdsReplyValidationError is the validation error returned by
// GetRoleMenuIdsReply.Validate if the designated constraints aren't met.
type GetRoleMenuIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdsReplyValidationError) ErrorName() string {
	return "GetRoleMenuIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdsReplyValidationError{}

// Validate checks the field values on GetMenuRoleIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMenuRoleIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuRoleIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuRoleIdsRequestMultiError, or nil if none found.
func (m *GetMenuRoleIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuRoleIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMenuId() < 1 {
		err := GetMenuRoleIdsRequestValidationError{
			field:  "MenuId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMenuRoleIdsRequestMultiError(errors)
	}

	return nil
}

// GetMenuRoleIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMenuRoleIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMenuRoleIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuRoleIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuRoleIdsRequestMultiError) AllErrors() []error { return m }

// GetMenuRoleIdsRequestValidationError is the validation error returned by
// GetMenuRoleIdsRequest.Validate if the designated constraints aren't met.
type GetMenuRoleIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuRoleIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuRoleIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuRoleIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuRoleIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuRoleIdsRequestValidationError) ErrorName() string {
	return "GetMenuRoleIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenuRoleIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuRoleIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuRoleIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuRoleIdsRequestValidationError{}

// Validate checks the field values on GetMenuRoleIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMenuRoleIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuRoleIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuRoleIdsReplyMultiError, or nil if none found.
func (m *GetMenuRoleIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuRoleIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMenuRoleIdsReplyMultiError(errors)
	}

	return nil
}

// GetMenuRoleIdsReplyMultiError is an error wrapping multiple validation
// errors returned by GetMenuRoleIdsReply.ValidateAll() if the designated
// constraints aren't met.
type GetMenuRoleIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuRoleIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuRoleIdsReplyMultiError) AllErrors() []error { return m }

// GetMenuRoleIdsReplyValidationError is the validation error returned by
// GetMenuRoleIdsReply.Validate if the designated constraints aren't met.
type GetMenuRoleIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuRoleIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuRoleIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuRoleIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuRoleIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuRoleIdsReplyValidationError) ErrorName() string {
	return "GetMenuRoleIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenuRoleIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuRoleIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuRoleIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuRoleIdsReplyValidationError{}

// Validate checks the field values on CreateMenuRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuRolesRequestMultiError, or nil if none found.
func (m *CreateMenuRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMenuId() < 1 {
		err := CreateMenuRolesRequestValidationError{
			field:  "MenuId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := CreateMenuRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMenuRolesRequestMultiError(errors)
	}

	return nil
}

// CreateMenuRolesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMenuRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMenuRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuRolesRequestMultiError) AllErrors() []error { return m }

// CreateMenuRolesRequestValidationError is the validation error returned by
// CreateMenuRolesRequest.Validate if the designated constraints aren't met.
type CreateMenuRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRolesRequestValidationError) ErrorName() string {
	return "CreateMenuRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRolesRequestValidationError{}

// Validate checks the field values on CreateMenuRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuRolesReplyMultiError, or nil if none found.
func (m *CreateMenuRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMenuRolesReplyMultiError(errors)
	}

	return nil
}

// CreateMenuRolesReplyMultiError is an error wrapping multiple validation
// errors returned by CreateMenuRolesReply.ValidateAll() if the designated
// constraints aren't met.
type CreateMenuRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuRolesReplyMultiError) AllErrors() []error { return m }

// CreateMenuRolesReplyValidationError is the validation error returned by
// CreateMenuRolesReply.Validate if the designated constraints aren't met.
type CreateMenuRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRolesReplyValidationError) ErrorName() string {
	return "CreateMenuRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRolesReplyValidationError{}

// Validate checks the field values on DeleteMenuRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuRolesRequestMultiError, or nil if none found.
func (m *DeleteMenuRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMenuId() < 1 {
		err := DeleteMenuRolesRequestValidationError{
			field:  "MenuId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := DeleteMenuRolesRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMenuRolesRequestMultiError(errors)
	}

	return nil
}

// DeleteMenuRolesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMenuRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMenuRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuRolesRequestMultiError) AllErrors() []error { return m }

// DeleteMenuRolesRequestValidationError is the validation error returned by
// DeleteMenuRolesRequest.Validate if the designated constraints aren't met.
type DeleteMenuRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRolesRequestValidationError) ErrorName() string {
	return "DeleteMenuRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRolesRequestValidationError{}

// Validate checks the field values on DeleteMenuRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuRolesReplyMultiError, or nil if none found.
func (m *DeleteMenuRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMenuRolesReplyMultiError(errors)
	}

	return nil
}

// DeleteMenuRolesReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteMenuRolesReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteMenuRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuRolesReplyMultiError) AllErrors() []error { return m }

// DeleteMenuRolesReplyValidationError is the validation error returned by
// DeleteMenuRolesReply.Validate if the designated constraints aren't met.
type DeleteMenuRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRolesReplyValidationError) ErrorName() string {
	return "DeleteMenuRolesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRolesReplyValidationError{}

// Validate checks the field values on CreateRoleMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMenusRequestMultiError, or nil if none found.
func (m *CreateRoleMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() < 1 {
		err := CreateRoleMenusRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() < 1 {
		err := CreateRoleMenusRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := CreateRoleMenusRequestValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleMenusRequestMultiError(errors)
	}

	return nil
}

// CreateRoleMenusRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRoleMenusRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMenusRequestMultiError) AllErrors() []error { return m }

// CreateRoleMenusRequestValidationError is the validation error returned by
// CreateRoleMenusRequest.Validate if the designated constraints aren't met.
type CreateRoleMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMenusRequestValidationError) ErrorName() string {
	return "CreateRoleMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMenusRequestValidationError{}

// Validate checks the field values on CreateRoleMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMenusReplyMultiError, or nil if none found.
func (m *CreateRoleMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleMenusReplyMultiError(errors)
	}

	return nil
}

// CreateRoleMenusReplyMultiError is an error wrapping multiple validation
// errors returned by CreateRoleMenusReply.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMenusReplyMultiError) AllErrors() []error { return m }

// CreateRoleMenusReplyValidationError is the validation error returned by
// CreateRoleMenusReply.Validate if the designated constraints aren't met.
type CreateRoleMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMenusReplyValidationError) ErrorName() string {
	return "CreateRoleMenusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMenusReplyValidationError{}

// Validate checks the field values on DeleteRoleMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleMenusRequestMultiError, or nil if none found.
func (m *DeleteRoleMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 1 {
		err := DeleteRoleMenusRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := DeleteRoleMenusRequestValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleMenusRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleMenusRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleMenusRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMenusRequestMultiError) AllErrors() []error { return m }

// DeleteRoleMenusRequestValidationError is the validation error returned by
// DeleteRoleMenusRequest.Validate if the designated constraints aren't met.
type DeleteRoleMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleMenusRequestValidationError) ErrorName() string {
	return "DeleteRoleMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleMenusRequestValidationError{}

// Validate checks the field values on DeleteRoleMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleMenusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleMenusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleMenusReplyMultiError, or nil if none found.
func (m *DeleteRoleMenusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleMenusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleMenusReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleMenusReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleMenusReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleMenusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMenusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMenusReplyMultiError) AllErrors() []error { return m }

// DeleteRoleMenusReplyValidationError is the validation error returned by
// DeleteRoleMenusReply.Validate if the designated constraints aren't met.
type DeleteRoleMenusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleMenusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleMenusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleMenusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleMenusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleMenusReplyValidationError) ErrorName() string {
	return "DeleteRoleMenusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleMenusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleMenusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleMenusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleMenusReplyValidationError{}
