// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/rolemenu/proto/rolemenu_service.proto

package rolemenu

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var (
	_ = new(context.Context)
	_ = binding.EncodeURL
)

const _ = http.SupportPackageIsVersion1

const (
	OperationRoleMenuCreateMenuRoles = "/manager.api.rolemenu.RoleMenu/CreateMenuRoles"
	OperationRoleMenuCreateRoleMenus = "/manager.api.rolemenu.RoleMenu/CreateRoleMenus"
	OperationRoleMenuDeleteMenuRoles = "/manager.api.rolemenu.RoleMenu/DeleteMenuRoles"
	OperationRoleMenuDeleteRoleMenus = "/manager.api.rolemenu.RoleMenu/DeleteRoleMenus"
	OperationRoleMenuGetMenuRoleIds  = "/manager.api.rolemenu.RoleMenu/GetMenuRoleIds"
	OperationRoleMenuGetRoleMenuIds  = "/manager.api.rolemenu.RoleMenu/GetRoleMenuIds"
)

type RoleMenuHTTPServer interface {
	// CreateMenuRoles CreateMenuRoles 创建菜单的菜单信息
	CreateMenuRoles(context.Context, *CreateMenuRolesRequest) (*CreateMenuRolesReply, error)
	// CreateRoleMenus CreateRoleMenus 创建角色菜单信息
	CreateRoleMenus(context.Context, *CreateRoleMenusRequest) (*CreateRoleMenusReply, error)
	// DeleteMenuRoles DeleteMenuRoles 删除菜单角色信息
	DeleteMenuRoles(context.Context, *DeleteMenuRolesRequest) (*DeleteMenuRolesReply, error)
	// DeleteRoleMenus DeleteRoleMenus 删除角色菜单信息
	DeleteRoleMenus(context.Context, *DeleteRoleMenusRequest) (*DeleteRoleMenusReply, error)
	// GetMenuRoleIds GetMenuRoleIds 获取菜单的角色列表
	GetMenuRoleIds(context.Context, *GetMenuRoleIdsRequest) (*GetMenuRoleIdsReply, error)
	// GetRoleMenuIds GetRoleMenuIds 获取角色的菜单列表
	GetRoleMenuIds(context.Context, *GetRoleMenuIdsRequest) (*GetRoleMenuIdsReply, error)
}

func RegisterRoleMenuHTTPServer(s *http.Server, srv RoleMenuHTTPServer) {
	r := s.Route("/")
	r.GET("/manager/api/v1/role/menuids", _RoleMenu_GetRoleMenuIds0_HTTP_Handler(srv))
	r.GET("/manager/api/v1/menu/roleids", _RoleMenu_GetMenuRoleIds0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/role/menus", _RoleMenu_CreateRoleMenus0_HTTP_Handler(srv))
	r.POST("/manager/api/v1/menu/roles", _RoleMenu_CreateMenuRoles0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/role/menus", _RoleMenu_DeleteMenuRoles0_HTTP_Handler(srv))
	r.DELETE("/manager/api/v1/role/menus", _RoleMenu_DeleteRoleMenus0_HTTP_Handler(srv))
}

func _RoleMenu_GetRoleMenuIds0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuGetRoleMenuIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetRoleMenuIds(ctx, req.(*GetRoleMenuIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleMenuIdsReply)
		return ctx.Result(200, reply)
	}
}

func _RoleMenu_GetMenuRoleIds0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuRoleIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuGetMenuRoleIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetMenuRoleIds(ctx, req.(*GetMenuRoleIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuRoleIdsReply)
		return ctx.Result(200, reply)
	}
}

func _RoleMenu_CreateRoleMenus0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleMenusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuCreateRoleMenus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateRoleMenus(ctx, req.(*CreateRoleMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleMenusReply)
		return ctx.Result(200, reply)
	}
}

func _RoleMenu_CreateMenuRoles0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuCreateMenuRoles)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateMenuRoles(ctx, req.(*CreateMenuRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuRolesReply)
		return ctx.Result(200, reply)
	}
}

func _RoleMenu_DeleteMenuRoles0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuDeleteMenuRoles)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteMenuRoles(ctx, req.(*DeleteMenuRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuRolesReply)
		return ctx.Result(200, reply)
	}
}

func _RoleMenu_DeleteRoleMenus0_HTTP_Handler(srv RoleMenuHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleMenusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleMenuDeleteRoleMenus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteRoleMenus(ctx, req.(*DeleteRoleMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleMenusReply)
		return ctx.Result(200, reply)
	}
}

type RoleMenuHTTPClient interface {
	CreateMenuRoles(ctx context.Context, req *CreateMenuRolesRequest, opts ...http.CallOption) (rsp *CreateMenuRolesReply, err error)
	CreateRoleMenus(ctx context.Context, req *CreateRoleMenusRequest, opts ...http.CallOption) (rsp *CreateRoleMenusReply, err error)
	DeleteMenuRoles(ctx context.Context, req *DeleteMenuRolesRequest, opts ...http.CallOption) (rsp *DeleteMenuRolesReply, err error)
	DeleteRoleMenus(ctx context.Context, req *DeleteRoleMenusRequest, opts ...http.CallOption) (rsp *DeleteRoleMenusReply, err error)
	GetMenuRoleIds(ctx context.Context, req *GetMenuRoleIdsRequest, opts ...http.CallOption) (rsp *GetMenuRoleIdsReply, err error)
	GetRoleMenuIds(ctx context.Context, req *GetRoleMenuIdsRequest, opts ...http.CallOption) (rsp *GetRoleMenuIdsReply, err error)
}

type RoleMenuHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleMenuHTTPClient(client *http.Client) RoleMenuHTTPClient {
	return &RoleMenuHTTPClientImpl{client}
}

func (c *RoleMenuHTTPClientImpl) CreateMenuRoles(ctx context.Context, in *CreateMenuRolesRequest, opts ...http.CallOption) (*CreateMenuRolesReply, error) {
	var out CreateMenuRolesReply
	pattern := "/manager/api/v1/menu/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleMenuCreateMenuRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleMenuHTTPClientImpl) CreateRoleMenus(ctx context.Context, in *CreateRoleMenusRequest, opts ...http.CallOption) (*CreateRoleMenusReply, error) {
	var out CreateRoleMenusReply
	pattern := "/manager/api/v1/role/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleMenuCreateRoleMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleMenuHTTPClientImpl) DeleteMenuRoles(ctx context.Context, in *DeleteMenuRolesRequest, opts ...http.CallOption) (*DeleteMenuRolesReply, error) {
	var out DeleteMenuRolesReply
	pattern := "/manager/api/v1/role/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleMenuDeleteMenuRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleMenuHTTPClientImpl) DeleteRoleMenus(ctx context.Context, in *DeleteRoleMenusRequest, opts ...http.CallOption) (*DeleteRoleMenusReply, error) {
	var out DeleteRoleMenusReply
	pattern := "/manager/api/v1/role/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleMenuDeleteRoleMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleMenuHTTPClientImpl) GetMenuRoleIds(ctx context.Context, in *GetMenuRoleIdsRequest, opts ...http.CallOption) (*GetMenuRoleIdsReply, error) {
	var out GetMenuRoleIdsReply
	pattern := "/manager/api/v1/menu/roleids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleMenuGetMenuRoleIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleMenuHTTPClientImpl) GetRoleMenuIds(ctx context.Context, in *GetRoleMenuIdsRequest, opts ...http.CallOption) (*GetRoleMenuIdsReply, error) {
	var out GetRoleMenuIdsReply
	pattern := "/manager/api/v1/role/menuids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleMenuGetRoleMenuIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
