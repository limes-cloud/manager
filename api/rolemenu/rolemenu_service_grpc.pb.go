// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/rolemenu/proto/rolemenu_service.proto

package rolemenu

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleMenu_GetRoleMenuIds_FullMethodName  = "/manager.api.rolemenu.RoleMenu/GetRoleMenuIds"
	RoleMenu_GetMenuRoleIds_FullMethodName  = "/manager.api.rolemenu.RoleMenu/GetMenuRoleIds"
	RoleMenu_CreateRoleMenus_FullMethodName = "/manager.api.rolemenu.RoleMenu/CreateRoleMenus"
	RoleMenu_CreateMenuRoles_FullMethodName = "/manager.api.rolemenu.RoleMenu/CreateMenuRoles"
	RoleMenu_DeleteMenuRoles_FullMethodName = "/manager.api.rolemenu.RoleMenu/DeleteMenuRoles"
	RoleMenu_DeleteRoleMenus_FullMethodName = "/manager.api.rolemenu.RoleMenu/DeleteRoleMenus"
)

// RoleMenuClient is the client API for RoleMenu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleMenuClient interface {
	// GetRoleMenuIds 获取角色的菜单列表
	GetRoleMenuIds(ctx context.Context, in *GetRoleMenuIdsRequest, opts ...grpc.CallOption) (*GetRoleMenuIdsReply, error)
	// GetMenuRoleIds 获取菜单的角色列表
	GetMenuRoleIds(ctx context.Context, in *GetMenuRoleIdsRequest, opts ...grpc.CallOption) (*GetMenuRoleIdsReply, error)
	// CreateRoleMenus 创建角色菜单信息
	CreateRoleMenus(ctx context.Context, in *CreateRoleMenusRequest, opts ...grpc.CallOption) (*CreateRoleMenusReply, error)
	// CreateMenuRoles 创建菜单的菜单信息
	CreateMenuRoles(ctx context.Context, in *CreateMenuRolesRequest, opts ...grpc.CallOption) (*CreateMenuRolesReply, error)
	// DeleteMenuRoles 删除菜单角色信息
	DeleteMenuRoles(ctx context.Context, in *DeleteMenuRolesRequest, opts ...grpc.CallOption) (*DeleteMenuRolesReply, error)
	// DeleteRoleMenus 删除角色菜单信息
	DeleteRoleMenus(ctx context.Context, in *DeleteRoleMenusRequest, opts ...grpc.CallOption) (*DeleteRoleMenusReply, error)
}

type roleMenuClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleMenuClient(cc grpc.ClientConnInterface) RoleMenuClient {
	return &roleMenuClient{cc}
}

func (c *roleMenuClient) GetRoleMenuIds(ctx context.Context, in *GetRoleMenuIdsRequest, opts ...grpc.CallOption) (*GetRoleMenuIdsReply, error) {
	out := new(GetRoleMenuIdsReply)
	err := c.cc.Invoke(ctx, RoleMenu_GetRoleMenuIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleMenuClient) GetMenuRoleIds(ctx context.Context, in *GetMenuRoleIdsRequest, opts ...grpc.CallOption) (*GetMenuRoleIdsReply, error) {
	out := new(GetMenuRoleIdsReply)
	err := c.cc.Invoke(ctx, RoleMenu_GetMenuRoleIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleMenuClient) CreateRoleMenus(ctx context.Context, in *CreateRoleMenusRequest, opts ...grpc.CallOption) (*CreateRoleMenusReply, error) {
	out := new(CreateRoleMenusReply)
	err := c.cc.Invoke(ctx, RoleMenu_CreateRoleMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleMenuClient) CreateMenuRoles(ctx context.Context, in *CreateMenuRolesRequest, opts ...grpc.CallOption) (*CreateMenuRolesReply, error) {
	out := new(CreateMenuRolesReply)
	err := c.cc.Invoke(ctx, RoleMenu_CreateMenuRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleMenuClient) DeleteMenuRoles(ctx context.Context, in *DeleteMenuRolesRequest, opts ...grpc.CallOption) (*DeleteMenuRolesReply, error) {
	out := new(DeleteMenuRolesReply)
	err := c.cc.Invoke(ctx, RoleMenu_DeleteMenuRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleMenuClient) DeleteRoleMenus(ctx context.Context, in *DeleteRoleMenusRequest, opts ...grpc.CallOption) (*DeleteRoleMenusReply, error) {
	out := new(DeleteRoleMenusReply)
	err := c.cc.Invoke(ctx, RoleMenu_DeleteRoleMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleMenuServer is the server API for RoleMenu service.
// All implementations must embed UnimplementedRoleMenuServer
// for forward compatibility
type RoleMenuServer interface {
	// GetRoleMenuIds 获取角色的菜单列表
	GetRoleMenuIds(context.Context, *GetRoleMenuIdsRequest) (*GetRoleMenuIdsReply, error)
	// GetMenuRoleIds 获取菜单的角色列表
	GetMenuRoleIds(context.Context, *GetMenuRoleIdsRequest) (*GetMenuRoleIdsReply, error)
	// CreateRoleMenus 创建角色菜单信息
	CreateRoleMenus(context.Context, *CreateRoleMenusRequest) (*CreateRoleMenusReply, error)
	// CreateMenuRoles 创建菜单的菜单信息
	CreateMenuRoles(context.Context, *CreateMenuRolesRequest) (*CreateMenuRolesReply, error)
	// DeleteMenuRoles 删除菜单角色信息
	DeleteMenuRoles(context.Context, *DeleteMenuRolesRequest) (*DeleteMenuRolesReply, error)
	// DeleteRoleMenus 删除角色菜单信息
	DeleteRoleMenus(context.Context, *DeleteRoleMenusRequest) (*DeleteRoleMenusReply, error)
	mustEmbedUnimplementedRoleMenuServer()
}

// UnimplementedRoleMenuServer must be embedded to have forward compatible implementations.
type UnimplementedRoleMenuServer struct{}

func (UnimplementedRoleMenuServer) GetRoleMenuIds(context.Context, *GetRoleMenuIdsRequest) (*GetRoleMenuIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuIds not implemented")
}

func (UnimplementedRoleMenuServer) GetMenuRoleIds(context.Context, *GetMenuRoleIdsRequest) (*GetMenuRoleIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuRoleIds not implemented")
}

func (UnimplementedRoleMenuServer) CreateRoleMenus(context.Context, *CreateRoleMenusRequest) (*CreateRoleMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleMenus not implemented")
}

func (UnimplementedRoleMenuServer) CreateMenuRoles(context.Context, *CreateMenuRolesRequest) (*CreateMenuRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuRoles not implemented")
}

func (UnimplementedRoleMenuServer) DeleteMenuRoles(context.Context, *DeleteMenuRolesRequest) (*DeleteMenuRolesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuRoles not implemented")
}

func (UnimplementedRoleMenuServer) DeleteRoleMenus(context.Context, *DeleteRoleMenusRequest) (*DeleteRoleMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleMenus not implemented")
}
func (UnimplementedRoleMenuServer) mustEmbedUnimplementedRoleMenuServer() {}

// UnsafeRoleMenuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleMenuServer will
// result in compilation errors.
type UnsafeRoleMenuServer interface {
	mustEmbedUnimplementedRoleMenuServer()
}

func RegisterRoleMenuServer(s grpc.ServiceRegistrar, srv RoleMenuServer) {
	s.RegisterService(&RoleMenu_ServiceDesc, srv)
}

func _RoleMenu_GetRoleMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).GetRoleMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_GetRoleMenuIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).GetRoleMenuIds(ctx, req.(*GetRoleMenuIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleMenu_GetMenuRoleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRoleIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).GetMenuRoleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_GetMenuRoleIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).GetMenuRoleIds(ctx, req.(*GetMenuRoleIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleMenu_CreateRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).CreateRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_CreateRoleMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).CreateRoleMenus(ctx, req.(*CreateRoleMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleMenu_CreateMenuRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).CreateMenuRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_CreateMenuRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).CreateMenuRoles(ctx, req.(*CreateMenuRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleMenu_DeleteMenuRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).DeleteMenuRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_DeleteMenuRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).DeleteMenuRoles(ctx, req.(*DeleteMenuRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleMenu_DeleteRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMenuServer).DeleteRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleMenu_DeleteRoleMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMenuServer).DeleteRoleMenus(ctx, req.(*DeleteRoleMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleMenu_ServiceDesc is the grpc.ServiceDesc for RoleMenu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleMenu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.api.rolemenu.RoleMenu",
	HandlerType: (*RoleMenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoleMenuIds",
			Handler:    _RoleMenu_GetRoleMenuIds_Handler,
		},
		{
			MethodName: "GetMenuRoleIds",
			Handler:    _RoleMenu_GetMenuRoleIds_Handler,
		},
		{
			MethodName: "CreateRoleMenus",
			Handler:    _RoleMenu_CreateRoleMenus_Handler,
		},
		{
			MethodName: "CreateMenuRoles",
			Handler:    _RoleMenu_CreateMenuRoles_Handler,
		},
		{
			MethodName: "DeleteMenuRoles",
			Handler:    _RoleMenu_DeleteMenuRoles_Handler,
		},
		{
			MethodName: "DeleteRoleMenus",
			Handler:    _RoleMenu_DeleteRoleMenus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rolemenu/proto/rolemenu_service.proto",
}
